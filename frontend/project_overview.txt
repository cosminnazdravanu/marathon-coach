Project structure (depth=3):
.
    .env
    .gitignore
    dist
        assets
            index-B4OODjau.js
            index-CvjmrJox.css
        index.html
        tailwind.css
        vite.svg
    eslint.config.js
    index.html
    node_modules
        .bin
            .acorn-oCOCgIwY
            .autoprefixer-F4eS6O6W
            .browserslist-fHdqS6NR
            .esbuild-lkWDvZsW
            .eslint-Sebp5HW2
            .jiti-kuQ5BTYa
            .js-yaml-5OTIZp6u
            .jsesc-1IHN2ewX
            .json5-Sk7iEyUZ
            .loose-envify-ZzRSWELM
            .mkdirp-4KCA6TPr
            .nanoid-Qj80g1L2
            .node-which-yIyMkhCn
            .parser-nWMyuqEY
            .postcss-Gev0q8xP
            .rollup-HasKuTQZ
            .semver-jc75H3dj
            .tailwindcss-txPobcpV
            .update-browserslist-db-pAMDf7ZA
            .vite-wQKBwcwe
            .yaml-Z5k0vT32
            acorn
            acorn.cmd
            acorn.ps1
            autoprefixer
            autoprefixer.cmd
            autoprefixer.ps1
            browserslist
            browserslist.cmd
            browserslist.ps1
            cssesc
            cssesc.cmd
            cssesc.ps1
            esbuild
            esbuild.cmd
            esbuild.ps1
            eslint
            eslint.cmd
            eslint.ps1
            handlebars
            handlebars.cmd
            handlebars.ps1
            jiti
            jiti.cmd
            jiti.ps1
            js-yaml
            js-yaml.cmd
            js-yaml.ps1
            jsesc
            jsesc.cmd
            jsesc.ps1
            json5
            json5.cmd
            json5.ps1
            loose-envify
            loose-envify.cmd
            loose-envify.ps1
            mini-svg-data-uri
            mini-svg-data-uri.cmd
            mini-svg-data-uri.ps1
            mkdirp
            mkdirp.cmd
            mkdirp.ps1
            nanoid
            nanoid.cmd
            nanoid.ps1
            node-which
            node-which.cmd
            node-which.ps1
            openapi
            openapi-typescript
            openapi-typescript.cmd
            openapi-typescript.ps1
            openapi.cmd
            openapi.ps1
            parser
            parser.cmd
            parser.ps1
            postcss
            postcss.cmd
            postcss.ps1
            rollup
            rollup.cmd
            rollup.ps1
            semver
            semver.cmd
            semver.ps1
            tailwindcss
            tailwindcss.cmd
            tailwindcss.ps1
            tsc
            tsc.cmd
            tsc.ps1
            tsserver
            tsserver.cmd
            tsserver.ps1
            uglifyjs
            uglifyjs.cmd
            uglifyjs.ps1
            update-browserslist-db
            update-browserslist-db.cmd
            update-browserslist-db.ps1
            vite
            vite.cmd
            vite.ps1
            yaml
            yaml.cmd
            yaml.ps1
        .package-lock.json
        .vite
            deps
        .vite-temp
        @alloc
            quick-lru
        @ampproject
            remapping
        @apidevtools
            json-schema-ref-parser
        @babel
            code-frame
            compat-data
            core
            generator
            helper-compilation-targets
            helper-globals
            helper-module-imports
            helper-module-transforms
            helper-plugin-utils
            helper-string-parser
            helper-validator-identifier
            helper-validator-option
            helpers
            parser
            plugin-transform-react-jsx-self
            plugin-transform-react-jsx-source
            template
            traverse
            types
        @csstools
            selector-resolve-nested
            selector-specificity
        @esbuild
            linux-x64
            win32-x64
        @eslint
            config-array
            config-helpers
            core
            eslintrc
            js
            object-schema
            plugin-kit
        @eslint-community
            eslint-utils
            regexpp
        @floating-ui
            core
            dom
            react
            react-dom
            utils
        @headlessui
            react
        @heroicons
            react
        @humanfs
            core
            node
        @humanwhocodes
            module-importer
            retry
        @isaacs
            fs-minipass
        @jridgewell
            gen-mapping
            resolve-uri
            sourcemap-codec
            trace-mapping
        @jsdevtools
            ono
        @nodelib
            fs.scandir
            fs.stat
            fs.walk
        @parcel
            watcher
            watcher-linux-x64-glibc
            watcher-linux-x64-musl
            watcher-win32-x64
        @react-aria
            focus
            interactions
            ssr
            utils
        @react-stately
            flags
            utils
        @react-types
            shared
        @redocly
            ajv
            config
            openapi-core
        @rolldown
            pluginutils
        @rollup
            rollup-linux-x64-gnu
            rollup-linux-x64-musl
            rollup-win32-x64-msvc
        @swc
            helpers
        @tailwindcss
            cli
            forms
            node
            oxide
            oxide-linux-x64-gnu
            oxide-linux-x64-musl
            oxide-win32-x64-msvc
            postcss
            typography
            vite
        @tanstack
            react-virtual
            virtual-core
        @types
            babel__core
            babel__generator
            babel__template
            babel__traverse
            debug
            estree
            estree-jsx
            hast
            json-schema
            mdast
            ms
            react
            react-dom
            unist
        @ungap
            structured-clone
        @vitejs
            plugin-react
        acorn
            bin
            CHANGELOG.md
            dist
            LICENSE
            package.json
            README.md
        acorn-jsx
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
            xhtml.js
        agent-base
            dist
            LICENSE
            package.json
            README.md
        ajv
            .tonic_example.js
            dist
            lib
            LICENSE
            package.json
            README.md
            scripts
        ansi-colors
            index.js
            LICENSE
            package.json
            README.md
            symbols.js
            types
        ansi-regex
            index.d.ts
            index.js
            license
            package.json
            readme.md
        ansi-styles
            index.d.ts
            index.js
            license
            package.json
            readme.md
        anymatch
            index.d.ts
            index.js
            LICENSE
            node_modules
            package.json
            README.md
        argparse
            argparse.js
            CHANGELOG.md
            lib
            LICENSE
            package.json
            README.md
        autoprefixer
            bin
            data
            lib
            LICENSE
            package.json
            README.md
        bail
            index.d.ts
            index.js
            license
            package.json
            readme.md
        balanced-match
            .github
            index.js
            LICENSE.md
            package.json
            README.md
        binary-extensions
            binary-extensions.json
            binary-extensions.json.d.ts
            index.d.ts
            index.js
            license
            package.json
            readme.md
        brace-expansion
            index.js
            LICENSE
            package.json
            README.md
        braces
            index.js
            lib
            LICENSE
            package.json
            README.md
        browserslist
            browser.js
            cli.js
            error.d.ts
            error.js
            index.d.ts
            index.js
            LICENSE
            node.js
            package.json
            parse.js
            README.md
        callsites
            index.d.ts
            index.js
            license
            package.json
            readme.md
        camelcase
            index.d.ts
            index.js
            license
            package.json
            readme.md
        caniuse-lite
            data
            dist
            LICENSE
            package.json
            README.md
        ccount
            index.d.ts
            index.js
            license
            package.json
            readme.md
        chalk
            index.d.ts
            license
            package.json
            readme.md
            source
        change-case
            dist
            package.json
            README.md
        character-entities
            index.d.ts
            index.js
            license
            package.json
            readme.md
        character-entities-html4
            index.d.ts
            index.js
            license
            package.json
            readme.md
        character-entities-legacy
            index.d.ts
            index.js
            license
            package.json
            readme.md
        character-reference-invalid
            index.d.ts
            index.js
            license
            package.json
            readme.md
        chokidar
            index.js
            lib
            LICENSE
            node_modules
            package.json
            README.md
            types
        chownr
            dist
            LICENSE.md
            package.json
            README.md
        cliui
            build
            CHANGELOG.md
            index.mjs
            LICENSE.txt
            package.json
            README.md
        clsx
            clsx.d.mts
            clsx.d.ts
            dist
            license
            package.json
            readme.md
        color-convert
            CHANGELOG.md
            conversions.js
            index.js
            LICENSE
            package.json
            README.md
            route.js
        color-name
            index.js
            LICENSE
            package.json
            README.md
        colorette
            index.cjs
            index.d.ts
            index.js
            LICENSE.md
            package.json
            README.md
        comma-separated-tokens
            index.d.ts
            index.js
            license
            package.json
            readme.md
        commander
            esm.mjs
            index.js
            lib
            LICENSE
            package-support.json
            package.json
            Readme.md
            typings
        concat-map
            .travis.yml
            example
            index.js
            LICENSE
            package.json
            README.markdown
            test
        convert-source-map
            index.js
            LICENSE
            package.json
            README.md
        cross-spawn
            index.js
            lib
            LICENSE
            package.json
            README.md
        cssesc
            bin
            cssesc.js
            LICENSE-MIT.txt
            man
            package.json
            README.md
        csstype
            index.d.ts
            index.js.flow
            LICENSE
            package.json
            README.md
        date-fns
            add.cjs
            add.d.cts
            add.d.ts
            add.js
            addBusinessDays.cjs
            addBusinessDays.d.cts
            addBusinessDays.d.ts
            addBusinessDays.js
            addDays.cjs
            addDays.d.cts
            addDays.d.ts
            addDays.js
            addHours.cjs
            addHours.d.cts
            addHours.d.ts
            addHours.js
            addISOWeekYears.cjs
            addISOWeekYears.d.cts
            addISOWeekYears.d.ts
            addISOWeekYears.js
            addMilliseconds.cjs
            addMilliseconds.d.cts
            addMilliseconds.d.ts
            addMilliseconds.js
            addMinutes.cjs
            addMinutes.d.cts
            addMinutes.d.ts
            addMinutes.js
            addMonths.cjs
            addMonths.d.cts
            addMonths.d.ts
            addMonths.js
            addQuarters.cjs
            addQuarters.d.cts
            addQuarters.d.ts
            addQuarters.js
            addSeconds.cjs
            addSeconds.d.cts
            addSeconds.d.ts
            addSeconds.js
            addWeeks.cjs
            addWeeks.d.cts
            addWeeks.d.ts
            addWeeks.js
            addYears.cjs
            addYears.d.cts
            addYears.d.ts
            addYears.js
            areIntervalsOverlapping.cjs
            areIntervalsOverlapping.d.cts
            areIntervalsOverlapping.d.ts
            areIntervalsOverlapping.js
            cdn.js
            cdn.js.map
            cdn.min.js
            cdn.min.js.map
            CHANGELOG.md
            clamp.cjs
            clamp.d.cts
            clamp.d.ts
            clamp.js
            closestIndexTo.cjs
            closestIndexTo.d.cts
            closestIndexTo.d.ts
            closestIndexTo.js
            closestTo.cjs
            closestTo.d.cts
            closestTo.d.ts
            closestTo.js
            compareAsc.cjs
            compareAsc.d.cts
            compareAsc.d.ts
            compareAsc.js
            compareDesc.cjs
            compareDesc.d.cts
            compareDesc.d.ts
            compareDesc.js
            constants.cjs
            constants.d.cts
            constants.d.ts
            constants.js
            constructFrom.cjs
            constructFrom.d.cts
            constructFrom.d.ts
            constructFrom.js
            constructNow.cjs
            constructNow.d.cts
            constructNow.d.ts
            constructNow.js
            daysToWeeks.cjs
            daysToWeeks.d.cts
            daysToWeeks.d.ts
            daysToWeeks.js
            differenceInBusinessDays.cjs
            differenceInBusinessDays.d.cts
            differenceInBusinessDays.d.ts
            differenceInBusinessDays.js
            differenceInCalendarDays.cjs
            differenceInCalendarDays.d.cts
            differenceInCalendarDays.d.ts
            differenceInCalendarDays.js
            differenceInCalendarISOWeeks.cjs
            differenceInCalendarISOWeeks.d.cts
            differenceInCalendarISOWeeks.d.ts
            differenceInCalendarISOWeeks.js
            differenceInCalendarISOWeekYears.cjs
            differenceInCalendarISOWeekYears.d.cts
            differenceInCalendarISOWeekYears.d.ts
            differenceInCalendarISOWeekYears.js
            differenceInCalendarMonths.cjs
            differenceInCalendarMonths.d.cts
            differenceInCalendarMonths.d.ts
            differenceInCalendarMonths.js
            differenceInCalendarQuarters.cjs
            differenceInCalendarQuarters.d.cts
            differenceInCalendarQuarters.d.ts
            differenceInCalendarQuarters.js
            differenceInCalendarWeeks.cjs
            differenceInCalendarWeeks.d.cts
            differenceInCalendarWeeks.d.ts
            differenceInCalendarWeeks.js
            differenceInCalendarYears.cjs
            differenceInCalendarYears.d.cts
            differenceInCalendarYears.d.ts
            differenceInCalendarYears.js
            differenceInDays.cjs
            differenceInDays.d.cts
            differenceInDays.d.ts
            differenceInDays.js
            differenceInHours.cjs
            differenceInHours.d.cts
            differenceInHours.d.ts
            differenceInHours.js
            differenceInISOWeekYears.cjs
            differenceInISOWeekYears.d.cts
            differenceInISOWeekYears.d.ts
            differenceInISOWeekYears.js
            differenceInMilliseconds.cjs
            differenceInMilliseconds.d.cts
            differenceInMilliseconds.d.ts
            differenceInMilliseconds.js
            differenceInMinutes.cjs
            differenceInMinutes.d.cts
            differenceInMinutes.d.ts
            differenceInMinutes.js
            differenceInMonths.cjs
            differenceInMonths.d.cts
            differenceInMonths.d.ts
            differenceInMonths.js
            differenceInQuarters.cjs
            differenceInQuarters.d.cts
            differenceInQuarters.d.ts
            differenceInQuarters.js
            differenceInSeconds.cjs
            differenceInSeconds.d.cts
            differenceInSeconds.d.ts
            differenceInSeconds.js
            differenceInWeeks.cjs
            differenceInWeeks.d.cts
            differenceInWeeks.d.ts
            differenceInWeeks.js
            differenceInYears.cjs
            differenceInYears.d.cts
            differenceInYears.d.ts
            differenceInYears.js
            docs
            eachDayOfInterval.cjs
            eachDayOfInterval.d.cts
            eachDayOfInterval.d.ts
            eachDayOfInterval.js
            eachHourOfInterval.cjs
            eachHourOfInterval.d.cts
            eachHourOfInterval.d.ts
            eachHourOfInterval.js
            eachMinuteOfInterval.cjs
            eachMinuteOfInterval.d.cts
            eachMinuteOfInterval.d.ts
            eachMinuteOfInterval.js
            eachMonthOfInterval.cjs
            eachMonthOfInterval.d.cts
            eachMonthOfInterval.d.ts
            eachMonthOfInterval.js
            eachQuarterOfInterval.cjs
            eachQuarterOfInterval.d.cts
            eachQuarterOfInterval.d.ts
            eachQuarterOfInterval.js
            eachWeekendOfInterval.cjs
            eachWeekendOfInterval.d.cts
            eachWeekendOfInterval.d.ts
            eachWeekendOfInterval.js
            eachWeekendOfMonth.cjs
            eachWeekendOfMonth.d.cts
            eachWeekendOfMonth.d.ts
            eachWeekendOfMonth.js
            eachWeekendOfYear.cjs
            eachWeekendOfYear.d.cts
            eachWeekendOfYear.d.ts
            eachWeekendOfYear.js
            eachWeekOfInterval.cjs
            eachWeekOfInterval.d.cts
            eachWeekOfInterval.d.ts
            eachWeekOfInterval.js
            eachYearOfInterval.cjs
            eachYearOfInterval.d.cts
            eachYearOfInterval.d.ts
            eachYearOfInterval.js
            endOfDay.cjs
            endOfDay.d.cts
            endOfDay.d.ts
            endOfDay.js
            endOfDecade.cjs
            endOfDecade.d.cts
            endOfDecade.d.ts
            endOfDecade.js
            endOfHour.cjs
            endOfHour.d.cts
            endOfHour.d.ts
            endOfHour.js
            endOfISOWeek.cjs
            endOfISOWeek.d.cts
            endOfISOWeek.d.ts
            endOfISOWeek.js
            endOfISOWeekYear.cjs
            endOfISOWeekYear.d.cts
            endOfISOWeekYear.d.ts
            endOfISOWeekYear.js
            endOfMinute.cjs
            endOfMinute.d.cts
            endOfMinute.d.ts
            endOfMinute.js
            endOfMonth.cjs
            endOfMonth.d.cts
            endOfMonth.d.ts
            endOfMonth.js
            endOfQuarter.cjs
            endOfQuarter.d.cts
            endOfQuarter.d.ts
            endOfQuarter.js
            endOfSecond.cjs
            endOfSecond.d.cts
            endOfSecond.d.ts
            endOfSecond.js
            endOfToday.cjs
            endOfToday.d.cts
            endOfToday.d.ts
            endOfToday.js
            endOfTomorrow.cjs
            endOfTomorrow.d.cts
            endOfTomorrow.d.ts
            endOfTomorrow.js
            endOfWeek.cjs
            endOfWeek.d.cts
            endOfWeek.d.ts
            endOfWeek.js
            endOfYear.cjs
            endOfYear.d.cts
            endOfYear.d.ts
            endOfYear.js
            endOfYesterday.cjs
            endOfYesterday.d.cts
            endOfYesterday.d.ts
            endOfYesterday.js
            format.cjs
            format.d.cts
            format.d.ts
            format.js
            formatDistance.cjs
            formatDistance.d.cts
            formatDistance.d.ts
            formatDistance.js
            formatDistanceStrict.cjs
            formatDistanceStrict.d.cts
            formatDistanceStrict.d.ts
            formatDistanceStrict.js
            formatDistanceToNow.cjs
            formatDistanceToNow.d.cts
            formatDistanceToNow.d.ts
            formatDistanceToNow.js
            formatDistanceToNowStrict.cjs
            formatDistanceToNowStrict.d.cts
            formatDistanceToNowStrict.d.ts
            formatDistanceToNowStrict.js
            formatDuration.cjs
            formatDuration.d.cts
            formatDuration.d.ts
            formatDuration.js
            formatISO.cjs
            formatISO.d.cts
            formatISO.d.ts
            formatISO.js
            formatISO9075.cjs
            formatISO9075.d.cts
            formatISO9075.d.ts
            formatISO9075.js
            formatISODuration.cjs
            formatISODuration.d.cts
            formatISODuration.d.ts
            formatISODuration.js
            formatRelative.cjs
            formatRelative.d.cts
            formatRelative.d.ts
            formatRelative.js
            formatRFC3339.cjs
            formatRFC3339.d.cts
            formatRFC3339.d.ts
            formatRFC3339.js
            formatRFC7231.cjs
            formatRFC7231.d.cts
            formatRFC7231.d.ts
            formatRFC7231.js
            fp
            fp.cjs
            fp.d.cts
            fp.d.ts
            fp.js
            fromUnixTime.cjs
            fromUnixTime.d.cts
            fromUnixTime.d.ts
            fromUnixTime.js
            getDate.cjs
            getDate.d.cts
            getDate.d.ts
            getDate.js
            getDay.cjs
            getDay.d.cts
            getDay.d.ts
            getDay.js
            getDayOfYear.cjs
            getDayOfYear.d.cts
            getDayOfYear.d.ts
            getDayOfYear.js
            getDaysInMonth.cjs
            getDaysInMonth.d.cts
            getDaysInMonth.d.ts
            getDaysInMonth.js
            getDaysInYear.cjs
            getDaysInYear.d.cts
            getDaysInYear.d.ts
            getDaysInYear.js
            getDecade.cjs
            getDecade.d.cts
            getDecade.d.ts
            getDecade.js
            getDefaultOptions.cjs
            getDefaultOptions.d.cts
            getDefaultOptions.d.ts
            getDefaultOptions.js
            getHours.cjs
            getHours.d.cts
            getHours.d.ts
            getHours.js
            getISODay.cjs
            getISODay.d.cts
            getISODay.d.ts
            getISODay.js
            getISOWeek.cjs
            getISOWeek.d.cts
            getISOWeek.d.ts
            getISOWeek.js
            getISOWeeksInYear.cjs
            getISOWeeksInYear.d.cts
            getISOWeeksInYear.d.ts
            getISOWeeksInYear.js
            getISOWeekYear.cjs
            getISOWeekYear.d.cts
            getISOWeekYear.d.ts
            getISOWeekYear.js
            getMilliseconds.cjs
            getMilliseconds.d.cts
            getMilliseconds.d.ts
            getMilliseconds.js
            getMinutes.cjs
            getMinutes.d.cts
            getMinutes.d.ts
            getMinutes.js
            getMonth.cjs
            getMonth.d.cts
            getMonth.d.ts
            getMonth.js
            getOverlappingDaysInIntervals.cjs
            getOverlappingDaysInIntervals.d.cts
            getOverlappingDaysInIntervals.d.ts
            getOverlappingDaysInIntervals.js
            getQuarter.cjs
            getQuarter.d.cts
            getQuarter.d.ts
            getQuarter.js
            getSeconds.cjs
            getSeconds.d.cts
            getSeconds.d.ts
            getSeconds.js
            getTime.cjs
            getTime.d.cts
            getTime.d.ts
            getTime.js
            getUnixTime.cjs
            getUnixTime.d.cts
            getUnixTime.d.ts
            getUnixTime.js
            getWeek.cjs
            getWeek.d.cts
            getWeek.d.ts
            getWeek.js
            getWeekOfMonth.cjs
            getWeekOfMonth.d.cts
            getWeekOfMonth.d.ts
            getWeekOfMonth.js
            getWeeksInMonth.cjs
            getWeeksInMonth.d.cts
            getWeeksInMonth.d.ts
            getWeeksInMonth.js
            getWeekYear.cjs
            getWeekYear.d.cts
            getWeekYear.d.ts
            getWeekYear.js
            getYear.cjs
            getYear.d.cts
            getYear.d.ts
            getYear.js
            hoursToMilliseconds.cjs
            hoursToMilliseconds.d.cts
            hoursToMilliseconds.d.ts
            hoursToMilliseconds.js
            hoursToMinutes.cjs
            hoursToMinutes.d.cts
            hoursToMinutes.d.ts
            hoursToMinutes.js
            hoursToSeconds.cjs
            hoursToSeconds.d.cts
            hoursToSeconds.d.ts
            hoursToSeconds.js
            index.cjs
            index.d.cts
            index.d.ts
            index.js
            interval.cjs
            interval.d.cts
            interval.d.ts
            interval.js
            intervalToDuration.cjs
            intervalToDuration.d.cts
            intervalToDuration.d.ts
            intervalToDuration.js
            intlFormat.cjs
            intlFormat.d.cts
            intlFormat.d.ts
            intlFormat.js
            intlFormatDistance.cjs
            intlFormatDistance.d.cts
            intlFormatDistance.d.ts
            intlFormatDistance.js
            isAfter.cjs
            isAfter.d.cts
            isAfter.d.ts
            isAfter.js
            isBefore.cjs
            isBefore.d.cts
            isBefore.d.ts
            isBefore.js
            isDate.cjs
            isDate.d.cts
            isDate.d.ts
            isDate.js
            isEqual.cjs
            isEqual.d.cts
            isEqual.d.ts
            isEqual.js
            isExists.cjs
            isExists.d.cts
            isExists.d.ts
            isExists.js
            isFirstDayOfMonth.cjs
            isFirstDayOfMonth.d.cts
            isFirstDayOfMonth.d.ts
            isFirstDayOfMonth.js
            isFriday.cjs
            isFriday.d.cts
            isFriday.d.ts
            isFriday.js
            isFuture.cjs
            isFuture.d.cts
            isFuture.d.ts
            isFuture.js
            isLastDayOfMonth.cjs
            isLastDayOfMonth.d.cts
            isLastDayOfMonth.d.ts
            isLastDayOfMonth.js
            isLeapYear.cjs
            isLeapYear.d.cts
            isLeapYear.d.ts
            isLeapYear.js
            isMatch.cjs
            isMatch.d.cts
            isMatch.d.ts
            isMatch.js
            isMonday.cjs
            isMonday.d.cts
            isMonday.d.ts
            isMonday.js
            isPast.cjs
            isPast.d.cts
            isPast.d.ts
            isPast.js
            isSameDay.cjs
            isSameDay.d.cts
            isSameDay.d.ts
            isSameDay.js
            isSameHour.cjs
            isSameHour.d.cts
            isSameHour.d.ts
            isSameHour.js
            isSameISOWeek.cjs
            isSameISOWeek.d.cts
            isSameISOWeek.d.ts
            isSameISOWeek.js
            isSameISOWeekYear.cjs
            isSameISOWeekYear.d.cts
            isSameISOWeekYear.d.ts
            isSameISOWeekYear.js
            isSameMinute.cjs
            isSameMinute.d.cts
            isSameMinute.d.ts
            isSameMinute.js
            isSameMonth.cjs
            isSameMonth.d.cts
            isSameMonth.d.ts
            isSameMonth.js
            isSameQuarter.cjs
            isSameQuarter.d.cts
            isSameQuarter.d.ts
            isSameQuarter.js
            isSameSecond.cjs
            isSameSecond.d.cts
            isSameSecond.d.ts
            isSameSecond.js
            isSameWeek.cjs
            isSameWeek.d.cts
            isSameWeek.d.ts
            isSameWeek.js
            isSameYear.cjs
            isSameYear.d.cts
            isSameYear.d.ts
            isSameYear.js
            isSaturday.cjs
            isSaturday.d.cts
            isSaturday.d.ts
            isSaturday.js
            isSunday.cjs
            isSunday.d.cts
            isSunday.d.ts
            isSunday.js
            isThisHour.cjs
            isThisHour.d.cts
            isThisHour.d.ts
            isThisHour.js
            isThisISOWeek.cjs
            isThisISOWeek.d.cts
            isThisISOWeek.d.ts
            isThisISOWeek.js
            isThisMinute.cjs
            isThisMinute.d.cts
            isThisMinute.d.ts
            isThisMinute.js
            isThisMonth.cjs
            isThisMonth.d.cts
            isThisMonth.d.ts
            isThisMonth.js
            isThisQuarter.cjs
            isThisQuarter.d.cts
            isThisQuarter.d.ts
            isThisQuarter.js
            isThisSecond.cjs
            isThisSecond.d.cts
            isThisSecond.d.ts
            isThisSecond.js
            isThisWeek.cjs
            isThisWeek.d.cts
            isThisWeek.d.ts
            isThisWeek.js
            isThisYear.cjs
            isThisYear.d.cts
            isThisYear.d.ts
            isThisYear.js
            isThursday.cjs
            isThursday.d.cts
            isThursday.d.ts
            isThursday.js
            isToday.cjs
            isToday.d.cts
            isToday.d.ts
            isToday.js
            isTomorrow.cjs
            isTomorrow.d.cts
            isTomorrow.d.ts
            isTomorrow.js
            isTuesday.cjs
            isTuesday.d.cts
            isTuesday.d.ts
            isTuesday.js
            isValid.cjs
            isValid.d.cts
            isValid.d.ts
            isValid.js
            isWednesday.cjs
            isWednesday.d.cts
            isWednesday.d.ts
            isWednesday.js
            isWeekend.cjs
            isWeekend.d.cts
            isWeekend.d.ts
            isWeekend.js
            isWithinInterval.cjs
            isWithinInterval.d.cts
            isWithinInterval.d.ts
            isWithinInterval.js
            isYesterday.cjs
            isYesterday.d.cts
            isYesterday.d.ts
            isYesterday.js
            lastDayOfDecade.cjs
            lastDayOfDecade.d.cts
            lastDayOfDecade.d.ts
            lastDayOfDecade.js
            lastDayOfISOWeek.cjs
            lastDayOfISOWeek.d.cts
            lastDayOfISOWeek.d.ts
            lastDayOfISOWeek.js
            lastDayOfISOWeekYear.cjs
            lastDayOfISOWeekYear.d.cts
            lastDayOfISOWeekYear.d.ts
            lastDayOfISOWeekYear.js
            lastDayOfMonth.cjs
            lastDayOfMonth.d.cts
            lastDayOfMonth.d.ts
            lastDayOfMonth.js
            lastDayOfQuarter.cjs
            lastDayOfQuarter.d.cts
            lastDayOfQuarter.d.ts
            lastDayOfQuarter.js
            lastDayOfWeek.cjs
            lastDayOfWeek.d.cts
            lastDayOfWeek.d.ts
            lastDayOfWeek.js
            lastDayOfYear.cjs
            lastDayOfYear.d.cts
            lastDayOfYear.d.ts
            lastDayOfYear.js
            LICENSE.md
            lightFormat.cjs
            lightFormat.d.cts
            lightFormat.d.ts
            lightFormat.js
            locale
            locale.cjs
            locale.d.cts
            locale.d.ts
            locale.js
            max.cjs
            max.d.cts
            max.d.ts
            max.js
            milliseconds.cjs
            milliseconds.d.cts
            milliseconds.d.ts
            milliseconds.js
            millisecondsToHours.cjs
            millisecondsToHours.d.cts
            millisecondsToHours.d.ts
            millisecondsToHours.js
            millisecondsToMinutes.cjs
            millisecondsToMinutes.d.cts
            millisecondsToMinutes.d.ts
            millisecondsToMinutes.js
            millisecondsToSeconds.cjs
            millisecondsToSeconds.d.cts
            millisecondsToSeconds.d.ts
            millisecondsToSeconds.js
            min.cjs
            min.d.cts
            min.d.ts
            min.js
            minutesToHours.cjs
            minutesToHours.d.cts
            minutesToHours.d.ts
            minutesToHours.js
            minutesToMilliseconds.cjs
            minutesToMilliseconds.d.cts
            minutesToMilliseconds.d.ts
            minutesToMilliseconds.js
            minutesToSeconds.cjs
            minutesToSeconds.d.cts
            minutesToSeconds.d.ts
            minutesToSeconds.js
            monthsToQuarters.cjs
            monthsToQuarters.d.cts
            monthsToQuarters.d.ts
            monthsToQuarters.js
            monthsToYears.cjs
            monthsToYears.d.cts
            monthsToYears.d.ts
            monthsToYears.js
            nextDay.cjs
            nextDay.d.cts
            nextDay.d.ts
            nextDay.js
            nextFriday.cjs
            nextFriday.d.cts
            nextFriday.d.ts
            nextFriday.js
            nextMonday.cjs
            nextMonday.d.cts
            nextMonday.d.ts
            nextMonday.js
            nextSaturday.cjs
            nextSaturday.d.cts
            nextSaturday.d.ts
            nextSaturday.js
            nextSunday.cjs
            nextSunday.d.cts
            nextSunday.d.ts
            nextSunday.js
            nextThursday.cjs
            nextThursday.d.cts
            nextThursday.d.ts
            nextThursday.js
            nextTuesday.cjs
            nextTuesday.d.cts
            nextTuesday.d.ts
            nextTuesday.js
            nextWednesday.cjs
            nextWednesday.d.cts
            nextWednesday.d.ts
            nextWednesday.js
            package.json
            parse
            parse.cjs
            parse.d.cts
            parse.d.ts
            parse.js
            parseISO.cjs
            parseISO.d.cts
            parseISO.d.ts
            parseISO.js
            parseJSON.cjs
            parseJSON.d.cts
            parseJSON.d.ts
            parseJSON.js
            previousDay.cjs
            previousDay.d.cts
            previousDay.d.ts
            previousDay.js
            previousFriday.cjs
            previousFriday.d.cts
            previousFriday.d.ts
            previousFriday.js
            previousMonday.cjs
            previousMonday.d.cts
            previousMonday.d.ts
            previousMonday.js
            previousSaturday.cjs
            previousSaturday.d.cts
            previousSaturday.d.ts
            previousSaturday.js
            previousSunday.cjs
            previousSunday.d.cts
            previousSunday.d.ts
            previousSunday.js
            previousThursday.cjs
            previousThursday.d.cts
            previousThursday.d.ts
            previousThursday.js
            previousTuesday.cjs
            previousTuesday.d.cts
            previousTuesday.d.ts
            previousTuesday.js
            previousWednesday.cjs
            previousWednesday.d.cts
            previousWednesday.d.ts
            previousWednesday.js
            quartersToMonths.cjs
            quartersToMonths.d.cts
            quartersToMonths.d.ts
            quartersToMonths.js
            quartersToYears.cjs
            quartersToYears.d.cts
            quartersToYears.d.ts
            quartersToYears.js
            README.md
            roundToNearestHours.cjs
            roundToNearestHours.d.cts
            roundToNearestHours.d.ts
            roundToNearestHours.js
            roundToNearestMinutes.cjs
            roundToNearestMinutes.d.cts
            roundToNearestMinutes.d.ts
            roundToNearestMinutes.js
            secondsToHours.cjs
            secondsToHours.d.cts
            secondsToHours.d.ts
            secondsToHours.js
            secondsToMilliseconds.cjs
            secondsToMilliseconds.d.cts
            secondsToMilliseconds.d.ts
            secondsToMilliseconds.js
            secondsToMinutes.cjs
            secondsToMinutes.d.cts
            secondsToMinutes.d.ts
            secondsToMinutes.js
            SECURITY.md
            set.cjs
            set.d.cts
            set.d.ts
            set.js
            setDate.cjs
            setDate.d.cts
            setDate.d.ts
            setDate.js
            setDay.cjs
            setDay.d.cts
            setDay.d.ts
            setDay.js
            setDayOfYear.cjs
            setDayOfYear.d.cts
            setDayOfYear.d.ts
            setDayOfYear.js
            setDefaultOptions.cjs
            setDefaultOptions.d.cts
            setDefaultOptions.d.ts
            setDefaultOptions.js
            setHours.cjs
            setHours.d.cts
            setHours.d.ts
            setHours.js
            setISODay.cjs
            setISODay.d.cts
            setISODay.d.ts
            setISODay.js
            setISOWeek.cjs
            setISOWeek.d.cts
            setISOWeek.d.ts
            setISOWeek.js
            setISOWeekYear.cjs
            setISOWeekYear.d.cts
            setISOWeekYear.d.ts
            setISOWeekYear.js
            setMilliseconds.cjs
            setMilliseconds.d.cts
            setMilliseconds.d.ts
            setMilliseconds.js
            setMinutes.cjs
            setMinutes.d.cts
            setMinutes.d.ts
            setMinutes.js
            setMonth.cjs
            setMonth.d.cts
            setMonth.d.ts
            setMonth.js
            setQuarter.cjs
            setQuarter.d.cts
            setQuarter.d.ts
            setQuarter.js
            setSeconds.cjs
            setSeconds.d.cts
            setSeconds.d.ts
            setSeconds.js
            setWeek.cjs
            setWeek.d.cts
            setWeek.d.ts
            setWeek.js
            setWeekYear.cjs
            setWeekYear.d.cts
            setWeekYear.d.ts
            setWeekYear.js
            setYear.cjs
            setYear.d.cts
            setYear.d.ts
            setYear.js
            startOfDay.cjs
            startOfDay.d.cts
            startOfDay.d.ts
            startOfDay.js
            startOfDecade.cjs
            startOfDecade.d.cts
            startOfDecade.d.ts
            startOfDecade.js
            startOfHour.cjs
            startOfHour.d.cts
            startOfHour.d.ts
            startOfHour.js
            startOfISOWeek.cjs
            startOfISOWeek.d.cts
            startOfISOWeek.d.ts
            startOfISOWeek.js
            startOfISOWeekYear.cjs
            startOfISOWeekYear.d.cts
            startOfISOWeekYear.d.ts
            startOfISOWeekYear.js
            startOfMinute.cjs
            startOfMinute.d.cts
            startOfMinute.d.ts
            startOfMinute.js
            startOfMonth.cjs
            startOfMonth.d.cts
            startOfMonth.d.ts
            startOfMonth.js
            startOfQuarter.cjs
            startOfQuarter.d.cts
            startOfQuarter.d.ts
            startOfQuarter.js
            startOfSecond.cjs
            startOfSecond.d.cts
            startOfSecond.d.ts
            startOfSecond.js
            startOfToday.cjs
            startOfToday.d.cts
            startOfToday.d.ts
            startOfToday.js
            startOfTomorrow.cjs
            startOfTomorrow.d.cts
            startOfTomorrow.d.ts
            startOfTomorrow.js
            startOfWeek.cjs
            startOfWeek.d.cts
            startOfWeek.d.ts
            startOfWeek.js
            startOfWeekYear.cjs
            startOfWeekYear.d.cts
            startOfWeekYear.d.ts
            startOfWeekYear.js
            startOfYear.cjs
            startOfYear.d.cts
            startOfYear.d.ts
            startOfYear.js
            startOfYesterday.cjs
            startOfYesterday.d.cts
            startOfYesterday.d.ts
            startOfYesterday.js
            sub.cjs
            sub.d.cts
            sub.d.ts
            sub.js
            subBusinessDays.cjs
            subBusinessDays.d.cts
            subBusinessDays.d.ts
            subBusinessDays.js
            subDays.cjs
            subDays.d.cts
            subDays.d.ts
            subDays.js
            subHours.cjs
            subHours.d.cts
            subHours.d.ts
            subHours.js
            subISOWeekYears.cjs
            subISOWeekYears.d.cts
            subISOWeekYears.d.ts
            subISOWeekYears.js
            subMilliseconds.cjs
            subMilliseconds.d.cts
            subMilliseconds.d.ts
            subMilliseconds.js
            subMinutes.cjs
            subMinutes.d.cts
            subMinutes.d.ts
            subMinutes.js
            subMonths.cjs
            subMonths.d.cts
            subMonths.d.ts
            subMonths.js
            subQuarters.cjs
            subQuarters.d.cts
            subQuarters.d.ts
            subQuarters.js
            subSeconds.cjs
            subSeconds.d.cts
            subSeconds.d.ts
            subSeconds.js
            subWeeks.cjs
            subWeeks.d.cts
            subWeeks.d.ts
            subWeeks.js
            subYears.cjs
            subYears.d.cts
            subYears.d.ts
            subYears.js
            toDate.cjs
            toDate.d.cts
            toDate.d.ts
            toDate.js
            transpose.cjs
            transpose.d.cts
            transpose.d.ts
            transpose.js
            types.cjs
            types.d.cts
            types.d.ts
            types.js
            weeksToDays.cjs
            weeksToDays.d.cts
            weeksToDays.d.ts
            weeksToDays.js
            yearsToDays.cjs
            yearsToDays.d.cts
            yearsToDays.d.ts
            yearsToDays.js
            yearsToMonths.cjs
            yearsToMonths.d.cts
            yearsToMonths.d.ts
            yearsToMonths.js
            yearsToQuarters.cjs
            yearsToQuarters.d.cts
            yearsToQuarters.d.ts
            yearsToQuarters.js
            _lib
        debug
            LICENSE
            package.json
            README.md
            src
        decode-named-character-reference
            index.d.ts
            index.d.ts.map
            index.dom.d.ts
            index.dom.d.ts.map
            index.dom.js
            index.js
            license
            package.json
            readme.md
        deep-is
            .travis.yml
            example
            index.js
            LICENSE
            package.json
            README.markdown
            test
        dependency-graph
            .github
            CHANGELOG.md
            lib
            LICENSE
            package.json
            README.md
            specs
        dequal
            dist
            index.d.ts
            license
            lite
            package.json
            readme.md
        detect-libc
            index.d.ts
            lib
            LICENSE
            package.json
            README.md
        devlop
            lib
            license
            package.json
            readme.md
        electron-to-chromium
            chromium-versions.js
            chromium-versions.json
            full-chromium-versions.js
            full-chromium-versions.json
            full-versions.js
            full-versions.json
            index.js
            LICENSE
            package.json
            README.md
            versions.js
            versions.json
        emoji-regex
            es2015
            index.d.ts
            index.js
            LICENSE-MIT.txt
            package.json
            README.md
            text.js
        enhanced-resolve
            lib
            LICENSE
            package.json
            README.md
            types.d.ts
        esbuild
            bin
            install.js
            lib
            LICENSE.md
            package.json
            README.md
        escalade
            dist
            index.d.mts
            index.d.ts
            license
            package.json
            readme.md
            sync
        escape-string-regexp
            index.d.ts
            index.js
            license
            package.json
            readme.md
        eslint
            bin
            conf
            lib
            LICENSE
            messages
            package.json
            README.md
        eslint-plugin-react-hooks
            cjs
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
        eslint-plugin-react-refresh
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
        eslint-scope
            dist
            lib
            LICENSE
            package.json
            README.md
        eslint-visitor-keys
            dist
            lib
            LICENSE
            package.json
            README.md
        espree
            dist
            espree.js
            lib
            LICENSE
            package.json
            README.md
        esquery
            dist
            license.txt
            package.json
            parser.js
            README.md
        esrecurse
            .babelrc
            esrecurse.js
            gulpfile.babel.js
            package.json
            README.md
        estraverse
            .jshintrc
            estraverse.js
            gulpfile.js
            LICENSE.BSD
            package.json
            README.md
        estree-util-is-identifier-name
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        esutils
            lib
            LICENSE.BSD
            package.json
            README.md
        extend
            .editorconfig
            .eslintrc
            .jscs.json
            .travis.yml
            CHANGELOG.md
            component.json
            index.js
            LICENSE
            package.json
            README.md
        fast-deep-equal
            es6
            index.d.ts
            index.js
            LICENSE
            package.json
            react.d.ts
            react.js
            README.md
        fast-glob
            LICENSE
            node_modules
            out
            package.json
            README.md
        fast-json-stable-stringify
            .eslintrc.yml
            .github
            .travis.yml
            benchmark
            example
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
            test
        fast-levenshtein
            levenshtein.js
            LICENSE.md
            package.json
            README.md
        fastq
            .github
            bench.js
            example.js
            example.mjs
            index.d.ts
            LICENSE
            package.json
            queue.js
            README.md
            SECURITY.md
            test
        fdir
            dist
            LICENSE
            package.json
            README.md
        file-entry-cache
            cache.js
            LICENSE
            package.json
            README.md
        fill-range
            index.js
            LICENSE
            package.json
            README.md
        find-up
            index.d.ts
            index.js
            license
            package.json
            readme.md
        flat-cache
            changelog.md
            LICENSE
            package.json
            README.md
            src
        flatted
            cjs
            es.js
            esm
            esm.js
            index.js
            LICENSE
            min.js
            package.json
            php
            python
            README.md
            types
        fraction.js
            bigfraction.js
            fraction.cjs
            fraction.d.ts
            fraction.js
            fraction.min.js
            LICENSE
            package.json
            README.md
        framer-motion
            client
            dist
            dom
            LICENSE.md
            m
            mini
            package.json
            README.md
        fs-extra
            lib
            LICENSE
            package.json
            README.md
        gensync
            index.js
            index.js.flow
            LICENSE
            package.json
            README.md
            test
        get-caller-file
            index.d.ts
            index.js
            index.js.map
            LICENSE.md
            package.json
            README.md
        glob-parent
            index.js
            LICENSE
            package.json
            README.md
        globals
            globals.json
            index.d.ts
            index.js
            license
            package.json
            readme.md
        graceful-fs
            clone.js
            graceful-fs.js
            legacy-streams.js
            LICENSE
            package.json
            polyfills.js
            README.md
        handlebars
            bin
            dist
            lib
            LICENSE
            package.json
            README.markdown
            release-notes.md
            runtime.d.ts
            runtime.js
            types
        has-flag
            index.d.ts
            index.js
            license
            package.json
            readme.md
        hast-util-to-jsx-runtime
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        hast-util-whitespace
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        html-url-attributes
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        https-proxy-agent
            dist
            LICENSE
            package.json
            README.md
        ignore
            index.d.ts
            index.js
            legacy.js
            LICENSE-MIT
            package.json
            README.md
        import-fresh
            index.d.ts
            index.js
            license
            package.json
            readme.md
        imurmurhash
            imurmurhash.js
            imurmurhash.min.js
            package.json
            README.md
        index-to-position
            index.d.ts
            index.js
            license
            package.json
            readme.md
        inline-style-parser
            dist
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
        is-alphabetical
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-alphanumerical
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-binary-path
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-decimal
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-extglob
            index.js
            LICENSE
            package.json
            README.md
        is-fullwidth-code-point
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-glob
            index.js
            LICENSE
            package.json
            README.md
        is-hexadecimal
            index.d.ts
            index.js
            license
            package.json
            readme.md
        is-number
            index.js
            LICENSE
            package.json
            README.md
        is-plain-obj
            index.d.ts
            index.js
            license
            package.json
            readme.md
        isexe
            .npmignore
            index.js
            LICENSE
            mode.js
            package.json
            README.md
            test
            windows.js
        jiti
            dist
            lib
            LICENSE
            package.json
            README.md
        js-levenshtein
            index.js
            LICENSE
            package.json
            README.md
        js-tokens
            CHANGELOG.md
            index.js
            LICENSE
            package.json
            README.md
        js-yaml
            bin
            CHANGELOG.md
            dist
            index.js
            lib
            LICENSE
            package.json
            README.md
        jsesc
            bin
            jsesc.js
            LICENSE-MIT.txt
            man
            package.json
            README.md
        json-buffer
            .travis.yml
            index.js
            LICENSE
            package.json
            README.md
            test
        json-schema-traverse
            .eslintrc.yml
            .travis.yml
            index.js
            LICENSE
            package.json
            README.md
            spec
        json-stable-stringify-without-jsonify
            .npmignore
            .travis.yml
            example
            index.js
            LICENSE
            package.json
            readme.markdown
            test
        json5
            dist
            lib
            LICENSE.md
            package.json
            README.md
        jsonfile
            CHANGELOG.md
            index.js
            LICENSE
            package.json
            README.md
            utils.js
        keyv
            package.json
            README.md
            src
        levn
            lib
            LICENSE
            package.json
            README.md
        lightningcss
            LICENSE
            node
            package.json
            README.md
        lightningcss-linux-x64-gnu
            LICENSE
            lightningcss.linux-x64-gnu.node
            package.json
            README.md
        lightningcss-linux-x64-musl
            LICENSE
            lightningcss.linux-x64-musl.node
            package.json
            README.md
        lightningcss-win32-x64-msvc
            LICENSE
            lightningcss.win32-x64-msvc.node
            package.json
            README.md
        lilconfig
            LICENSE
            package.json
            readme.md
            src
        locate-path
            index.d.ts
            index.js
            license
            package.json
            readme.md
        lodash.castarray
            index.js
            LICENSE
            package.json
            README.md
        lodash.isplainobject
            index.js
            LICENSE
            package.json
            README.md
        lodash.merge
            index.js
            LICENSE
            package.json
            README.md
        lodash.throttle
            index.js
            LICENSE
            package.json
            README.md
        longest-streak
            index.d.ts
            index.js
            license
            package.json
            readme.md
        loose-envify
            cli.js
            custom.js
            index.js
            LICENSE
            loose-envify.js
            package.json
            README.md
            replace.js
        lru-cache
            index.js
            LICENSE
            package.json
            README.md
        magic-string
            dist
            LICENSE
            package.json
            README.md
        mdast-util-from-markdown
            dev
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-mdx-expression
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-mdx-jsx
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-mdxjs-esm
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-phrasing
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-to-hast
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-to-markdown
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        mdast-util-to-string
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        merge2
            index.js
            LICENSE
            package.json
            README.md
        micromark
            dev
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
            stream.d.ts
            stream.d.ts.map
            stream.js
        micromark-core-commonmark
            dev
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        micromark-factory-destination
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-factory-label
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-factory-space
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-factory-title
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-factory-whitespace
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-character
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-chunked
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-classify-character
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-combine-extensions
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-decode-numeric-character-reference
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-decode-string
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-encode
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-html-tag-name
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-normalize-identifier
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-resolve-all
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-sanitize-uri
            dev
            index.d.ts
            index.d.ts.map
            index.js
            license
            package.json
            readme.md
        micromark-util-subtokenize
            dev
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        micromark-util-symbol
            lib
            license
            package.json
            readme.md
        micromark-util-types
            index.d.ts
            index.js
            license
            package.json
            readme.md
        micromatch
            index.js
            LICENSE
            node_modules
            package.json
            README.md
        mini-svg-data-uri
            cli.js
            index.d.ts
            index.js
            index.test-d.ts
            LICENSE
            package.json
            README.md
            shorter-css-color-names.js
        minimatch
            LICENSE
            minimatch.js
            package.json
            README.md
        minimist
            .eslintrc
            .github
            .nycrc
            CHANGELOG.md
            example
            index.js
            LICENSE
            package.json
            README.md
            test
        minipass
            dist
            LICENSE
            package.json
            README.md
        minizlib
            dist
            LICENSE
            package.json
            README.md
        mkdirp
            dist
            LICENSE
            package.json
            readme.markdown
        motion-dom
            dist
            LICENSE.md
            package.json
        motion-utils
            dist
            LICENSE.md
            package.json
        mri
            index.d.ts
            lib
            license.md
            package.json
            readme.md
        ms
            index.js
            license.md
            package.json
            readme.md
        nanoid
            async
            bin
            index.browser.cjs
            index.browser.js
            index.cjs
            index.d.cts
            index.d.ts
            index.js
            LICENSE
            nanoid.js
            non-secure
            package.json
            README.md
            url-alphabet
        natural-compare
            index.js
            package.json
            README.md
        neo-async
            all.js
            allLimit.js
            allSeries.js
            angelFall.js
            any.js
            anyLimit.js
            anySeries.js
            apply.js
            applyEach.js
            applyEachSeries.js
            async.js
            async.min.js
            asyncify.js
            auto.js
            autoInject.js
            cargo.js
            compose.js
            concat.js
            concatLimit.js
            concatSeries.js
            constant.js
            createLogger.js
            detect.js
            detectLimit.js
            detectSeries.js
            dir.js
            doDuring.js
            doUntil.js
            doWhilst.js
            during.js
            each.js
            eachLimit.js
            eachOf.js
            eachOfLimit.js
            eachOfSeries.js
            eachSeries.js
            ensureAsync.js
            every.js
            everyLimit.js
            everySeries.js
            fast.js
            filter.js
            filterLimit.js
            filterSeries.js
            find.js
            findLimit.js
            findSeries.js
            foldl.js
            foldr.js
            forEach.js
            forEachLimit.js
            forEachOf.js
            forEachOfLimit.js
            forEachOfSeries.js
            forEachSeries.js
            forever.js
            groupBy.js
            groupByLimit.js
            groupBySeries.js
            inject.js
            iterator.js
            LICENSE
            log.js
            map.js
            mapLimit.js
            mapSeries.js
            mapValues.js
            mapValuesLimit.js
            mapValuesSeries.js
            memoize.js
            nextTick.js
            omit.js
            omitLimit.js
            omitSeries.js
            package.json
            parallel.js
            parallelLimit.js
            pick.js
            pickLimit.js
            pickSeries.js
            priorityQueue.js
            queue.js
            race.js
            README.md
            reduce.js
            reduceRight.js
            reflect.js
            reflectAll.js
            reject.js
            rejectLimit.js
            rejectSeries.js
            retry.js
            retryable.js
            safe.js
            select.js
            selectLimit.js
            selectSeries.js
            seq.js
            series.js
            setImmediate.js
            some.js
            someLimit.js
            someSeries.js
            sortBy.js
            sortByLimit.js
            sortBySeries.js
            timeout.js
            times.js
            timesLimit.js
            timesSeries.js
            transform.js
            transformLimit.js
            transformSeries.js
            tryEach.js
            unmemoize.js
            until.js
            waterfall.js
            whilst.js
            wrapSync.js
        node-addon-api
            common.gypi
            except.gypi
            index.js
            LICENSE.md
            napi-inl.deprecated.h
            napi-inl.h
            napi.h
            node_addon_api.gyp
            node_api.gyp
            noexcept.gypi
            nothing.c
            package-support.json
            package.json
            README.md
            tools
        node-releases
            data
            LICENSE
            package.json
            README.md
        normalize-path
            index.js
            LICENSE
            package.json
            README.md
        normalize-range
            index.js
            license
            package.json
            readme.md
        object-assign
            index.js
            license
            package.json
            readme.md
        openapi-typescript
            bin
            CHANGELOG.md
            CONTRIBUTING.md
            dist
            LICENSE
            node_modules
            package.json
            README.md
            src
        openapi-typescript-codegen
            bin
            dist
            LICENSE
            package.json
            README.md
            types
        optionator
            CHANGELOG.md
            lib
            LICENSE
            package.json
            README.md
        p-limit
            index.d.ts
            index.js
            license
            package.json
            readme.md
        p-locate
            index.d.ts
            index.js
            license
            package.json
            readme.md
        parent-module
            index.js
            license
            package.json
            readme.md
        parse-entities
            index.d.ts
            index.js
            lib
            license
            node_modules
            package.json
            readme.md
        parse-json
            index.d.ts
            index.js
            license
            package.json
            readme.md
        path-exists
            index.d.ts
            index.js
            license
            package.json
            readme.md
        path-key
            index.d.ts
            index.js
            license
            package.json
            readme.md
        picocolors
            LICENSE
            package.json
            picocolors.browser.js
            picocolors.d.ts
            picocolors.js
            README.md
            types.d.ts
        picomatch
            index.js
            lib
            LICENSE
            package.json
            posix.js
            README.md
        pify
            index.js
            license
            package.json
            readme.md
        pluralize
            LICENSE
            package.json
            pluralize.js
            Readme.md
        postcss
            lib
            LICENSE
            package.json
            README.md
        postcss-cli
            index.js
            lib
            LICENSE
            package.json
            README.md
        postcss-load-config
            LICENSE
            package.json
            README.md
            src
        postcss-nesting
            CHANGELOG.md
            dist
            LICENSE.md
            package.json
            README.md
        postcss-reporter
            index.js
            lib
            LICENSE
            package.json
            README.md
        postcss-selector-parser
            API.md
            CHANGELOG.md
            dist
            LICENSE-MIT
            package.json
            postcss-selector-parser.d.ts
            README.md
        postcss-value-parser
            lib
            LICENSE
            package.json
            README.md
        prelude-ls
            CHANGELOG.md
            lib
            LICENSE
            package.json
            README.md
        pretty-hrtime
            .jshintignore
            .npmignore
            index.js
            LICENSE
            package.json
            README.md
        prop-types
            checkPropTypes.js
            factory.js
            factoryWithThrowingShims.js
            factoryWithTypeCheckers.js
            index.js
            lib
            LICENSE
            package.json
            prop-types.js
            prop-types.min.js
            README.md
        property-information
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        punycode
            LICENSE-MIT.txt
            package.json
            punycode.es6.js
            punycode.js
            README.md
        queue-microtask
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
        react
            cjs
            compiler-runtime.js
            index.js
            jsx-dev-runtime.js
            jsx-dev-runtime.react-server.js
            jsx-runtime.js
            jsx-runtime.react-server.js
            LICENSE
            package.json
            react.react-server.js
            README.md
        react-dom
            cjs
            client.js
            client.react-server.js
            index.js
            LICENSE
            package.json
            profiling.js
            profiling.react-server.js
            react-dom.react-server.js
            README.md
            server.browser.js
            server.bun.js
            server.edge.js
            server.js
            server.node.js
            server.react-server.js
            static.browser.js
            static.edge.js
            static.js
            static.node.js
            static.react-server.js
            test-utils.js
        react-draggable
            build
            CHANGELOG.md
            LICENSE
            package.json
            README.md
            typings
        react-icons
            ai
            bi
            bs
            cg
            ci
            di
            fa
            fa6
            fc
            fi
            gi
            go
            gr
            hi
            hi2
            im
            index.d.ts
            index.js
            index.mjs
            io
            io5
            lia
            lib
            LICENSE
            lu
            md
            package.json
            pi
            README.md
            ri
            rx
            si
            sl
            tb
            tfi
            ti
            vsc
            wi
        react-is
            build-info.json
            cjs
            index.js
            LICENSE
            package.json
            README.md
            umd
        react-markdown
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        react-refresh
            babel.js
            cjs
            LICENSE
            package.json
            README.md
            runtime.js
        react-resizable
            .babelrc
            .browserslistrc
            .eslintrc
            .flowconfig
            .packj.yaml
            build
            CHANGELOG.md
            css
            dist
            index.js
            LICENSE
            package.json
            README.md
        react-resizable-panels
            dist
            LICENSE
            package.json
            README.md
        read-cache
            index.js
            LICENSE
            package.json
            README.md
        readdirp
            index.d.ts
            index.js
            LICENSE
            node_modules
            package.json
            README.md
        remark-parse
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        remark-rehype
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        require-directory
            .jshintrc
            .npmignore
            .travis.yml
            index.js
            LICENSE
            package.json
            README.markdown
        require-from-string
            index.js
            license
            package.json
            readme.md
        resolve-from
            index.js
            license
            package.json
            readme.md
        reusify
            .github
            benchmarks
            eslint.config.js
            LICENSE
            package.json
            README.md
            reusify.d.ts
            reusify.js
            SECURITY.md
            test.js
            tsconfig.json
        rollup
            dist
            LICENSE.md
            package.json
            README.md
        run-parallel
            index.js
            LICENSE
            package.json
            README.md
        scheduler
            cjs
            index.js
            index.native.js
            LICENSE
            package.json
            README.md
            unstable_mock.js
            unstable_post_task.js
        semver
            bin
            LICENSE
            package.json
            range.bnf
            README.md
            semver.js
        shebang-command
            index.js
            license
            package.json
            readme.md
        shebang-regex
            index.d.ts
            index.js
            license
            package.json
            readme.md
        slash
            index.d.ts
            index.js
            license
            package.json
            readme.md
        source-map
            CHANGELOG.md
            dist
            lib
            LICENSE
            package.json
            README.md
            source-map.d.ts
            source-map.js
        source-map-js
            lib
            LICENSE
            package.json
            README.md
            source-map.d.ts
            source-map.js
        space-separated-tokens
            index.d.ts
            index.js
            license
            package.json
            readme.md
        string-width
            index.d.ts
            index.js
            license
            package.json
            readme.md
        stringify-entities
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        strip-ansi
            index.d.ts
            index.js
            license
            package.json
            readme.md
        strip-json-comments
            index.d.ts
            index.js
            license
            package.json
            readme.md
        style-to-js
            cjs
            LICENSE
            package.json
            README.md
            src
            umd
        style-to-object
            cjs
            dist
            esm
            LICENSE
            package.json
            README.md
            src
        supports-color
            browser.js
            index.js
            license
            package.json
            readme.md
        tabbable
            CHANGELOG.md
            dist
            index.d.ts
            LICENSE
            package.json
            README.md
            SECURITY.md
            src
        tailwindcss
            dist
            index.css
            LICENSE
            package.json
            preflight.css
            README.md
            theme.css
            utilities.css
        tapable
            lib
            LICENSE
            package.json
            README.md
            tapable.d.ts
        tar
            dist
            LICENSE
            node_modules
            package.json
            README.md
        thenby
            LICENSE.TXT
            package.json
            README.md
            thenBy.min.js
            thenBy.module.d.ts
            thenBy.module.js
        tinyglobby
            dist
            LICENSE
            package.json
            README.md
        to-regex-range
            index.js
            LICENSE
            package.json
            README.md
        trim-lines
            index.d.ts
            index.js
            license
            package.json
            readme.md
        trough
            index.d.ts
            index.d.ts.map
            index.js
            lib
            license
            package.json
            readme.md
        tslib
            CopyrightNotice.txt
            LICENSE.txt
            modules
            package.json
            README.md
            SECURITY.md
            tslib.d.ts
            tslib.es6.html
            tslib.es6.js
            tslib.es6.mjs
            tslib.html
            tslib.js
        type-check
            lib
            LICENSE
            package.json
            README.md
        type-fest
            index.d.ts
            license-cc0
            license-mit
            package.json
            readme.md
            source
        typescript
            bin
            lib
            LICENSE.txt
            package.json
            README.md
            SECURITY.md
            ThirdPartyNoticeText.txt
        uglify-js
            bin
            lib
            LICENSE
            package.json
            README.md
            tools
        unified
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        unist-util-is
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        unist-util-position
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        unist-util-stringify-position
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        unist-util-visit
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        unist-util-visit-parents
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        universalify
            index.js
            LICENSE
            package.json
            README.md
        update-browserslist-db
            check-npm-version.js
            cli.js
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
            utils.js
        uri-js
            dist
            LICENSE
            package.json
            README.md
            yarn.lock
        uri-js-replace
            dist
            package.json
            README.md
        use-sync-external-store
            cjs
            index.js
            LICENSE
            package.json
            README.md
            shim
            with-selector.js
        util-deprecate
            browser.js
            History.md
            LICENSE
            node.js
            package.json
            README.md
        vfile
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        vfile-message
            index.d.ts
            index.js
            lib
            license
            package.json
            readme.md
        vite
            bin
            client.d.ts
            dist
            LICENSE.md
            misc
            package.json
            README.md
            types
        which
            bin
            CHANGELOG.md
            LICENSE
            package.json
            README.md
            which.js
        word-wrap
            index.d.ts
            index.js
            LICENSE
            package.json
            README.md
        wordwrap
            example
            index.js
            LICENSE
            package.json
            README.markdown
            test
        wrap-ansi
            index.js
            license
            package.json
            readme.md
        y18n
            build
            CHANGELOG.md
            index.mjs
            LICENSE
            package.json
            README.md
        yallist
            iterator.js
            LICENSE
            package.json
            README.md
            yallist.js
        yaml
            bin.mjs
            browser
            dist
            LICENSE
            package.json
            README.md
            util.js
        yaml-ast-parser
            .travis.yml
            dist
            license.txt
            package.json
            README.md
            src
            test
            tsconfig.json
            workspace.json
        yargs
            browser.d.ts
            browser.mjs
            build
            helpers
            index.cjs
            index.mjs
            lib
            LICENSE
            locales
            package.json
            README.md
            yargs
            yargs.mjs
        yargs-parser
            browser.js
            build
            CHANGELOG.md
            LICENSE.txt
            package.json
            README.md
        yocto-queue
            index.d.ts
            index.js
            license
            package.json
            readme.md
        zwitch
            index.d.ts
            index.js
            license
            package.json
            readme.md
    npm
    npx
    package-lock.json
    package.json
    postcss.config.cjs
    project_overview.txt
    public
        tailwind.css
        vite.svg
    README.md
    src
        api
            core
            index.ts
            models
            models.ts
            services
            types.ts
        App.css
        App.jsx
        assets
            react.svg
        components
            CalendarGrid.jsx
            PlanList.tsx
            WorkoutCard.jsx
            WorkoutModal.jsx
        index.css
        main.jsx
    tailwind.config.cjs
    utils
        dateHelpers.js
    vite.config.js


Key files (first 600 lines each):

--- FILE: ./dist/assets/index-B4OODjau.js ---
(function(){const yl=document.createElement("link").relList;if(yl&&yl.supports&&yl.supports("modulepreload"))return;for(const Z of document.querySelectorAll('link[rel="modulepreload"]'))r(Z);new MutationObserver(Z=>{for(const w of Z)if(w.type==="childList")for(const dl of w.addedNodes)dl.tagName==="LINK"&&dl.rel==="modulepreload"&&r(dl)}).observe(document,{childList:!0,subtree:!0});function F(Z){const w={};return Z.integrity&&(w.integrity=Z.integrity),Z.referrerPolicy&&(w.referrerPolicy=Z.referrerPolicy),Z.crossOrigin==="use-credentials"?w.credentials="include":Z.crossOrigin==="anonymous"?w.credentials="omit":w.credentials="same-origin",w}function r(Z){if(Z.ep)return;Z.ep=!0;const w=F(Z);fetch(Z.href,w)}})();function ey(M){return M&&M.__esModule&&Object.prototype.hasOwnProperty.call(M,"default")?M.default:M}var $c={exports:{}},oe={};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Wv;function Dd(){if(Wv)return oe;Wv=1;var M=Symbol.for("react.transitional.element"),yl=Symbol.for("react.fragment");function F(r,Z,w){var dl=null;if(w!==void 0&&(dl=""+w),Z.key!==void 0&&(dl=""+Z.key),"key"in Z){w={};for(var ql in Z)ql!=="key"&&(w[ql]=Z[ql])}else w=Z;return Z=w.ref,{$$typeof:M,type:r,key:dl,ref:Z!==void 0?Z:null,props:w}}return oe.Fragment=yl,oe.jsx=F,oe.jsxs=F,oe}var $v;function Ud(){return $v||($v=1,$c.exports=Dd()),$c.exports}var re=Ud(),kc={exports:{}},X={};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var kv;function Rd(){if(kv)return X;kv=1;var M=Symbol.for("react.transitional.element"),yl=Symbol.for("react.portal"),F=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),Z=Symbol.for("react.profiler"),w=Symbol.for("react.consumer"),dl=Symbol.for("react.context"),ql=Symbol.for("react.forward_ref"),H=Symbol.for("react.suspense"),A=Symbol.for("react.memo"),R=Symbol.for("react.lazy"),nl=Symbol.iterator;function al(s){return s===null||typeof s!="object"?null:(s=nl&&s[nl]||s["@@iterator"],typeof s=="function"?s:null)}var Yl={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Bl=Object.assign,vt={};function Gl(s,E,_){this.props=s,this.context=E,this.refs=vt,this.updater=_||Yl}Gl.prototype.isReactComponent={},Gl.prototype.setState=function(s,E){if(typeof s!="object"&&typeof s!="function"&&s!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,s,E,"setState")},Gl.prototype.forceUpdate=function(s){this.updater.enqueueForceUpdate(this,s,"forceUpdate")};function vu(){}vu.prototype=Gl.prototype;function At(s,E,_){this.props=s,this.context=E,this.refs=vt,this.updater=_||Yl}var Ml=At.prototype=new vu;Ml.constructor=At,Bl(Ml,Gl.prototype),Ml.isPureReactComponent=!0;var yt=Array.isArray,L={H:null,A:null,T:null,S:null,V:null},Cl=Object.prototype.hasOwnProperty;function Vl(s,E,_,z,N,K){return _=K.ref,{$$typeof:M,type:s,key:E,ref:_!==void 0?_:null,props:K}}function Ll(s,E){return Vl(s.type,E,void 0,void 0,void 0,s.props)}function mt(s){return typeof s=="object"&&s!==null&&s.$$typeof===M}function Nu(s){var E={"=":"=0",":":"=2"};return"$"+s.replace(/[=:]/g,function(_){return E[_]})}var zt=/\/+/g;function Dl(s,E){return typeof s=="object"&&s!==null&&s.key!=null?Nu(""+s.key):E.toString(36)}function yu(){}function du(s){switch(s.status){case"fulfilled":return s.value;case"rejected":throw s.reason;default:switch(typeof s.status=="string"?s.then(yu,yu):(s.status="pending",s.then(function(E){s.status==="pending"&&(s.status="fulfilled",s.value=E)},function(E){s.status==="pending"&&(s.status="rejected",s.reason=E)})),s.status){case"fulfilled":return s.value;case"rejected":throw s.reason}}throw s}function Ul(s,E,_,z,N){var K=typeof s;(K==="undefined"||K==="boolean")&&(s=null);var G=!1;if(s===null)G=!0;else switch(K){case"bigint":case"string":case"number":G=!0;break;case"object":switch(s.$$typeof){case M:case yl:G=!0;break;case R:return G=s._init,Ul(G(s._payload),E,_,z,N)}}if(G)return N=N(s),G=z===""?"."+Dl(s,0):z,yt(N)?(_="",G!=null&&(_=G.replace(zt,"$&/")+"/"),Ul(N,E,_,"",function(xt){return xt})):N!=null&&(mt(N)&&(N=Ll(N,_+(N.key==null||s&&s.key===N.key?"":(""+N.key).replace(zt,"$&/")+"/")+G)),E.push(N)),1;G=0;var Kl=z===""?".":z+":";if(yt(s))for(var fl=0;fl<s.length;fl++)z=s[fl],K=Kl+Dl(z,fl),G+=Ul(z,E,_,K,N);else if(fl=al(s),typeof fl=="function")for(s=fl.call(s),fl=0;!(z=s.next()).done;)z=z.value,K=Kl+Dl(z,fl++),G+=Ul(z,E,_,K,N);else if(K==="object"){if(typeof s.then=="function")return Ul(du(s),E,_,z,N);throw E=String(s),Error("Objects are not valid as a React child (found: "+(E==="[object Object]"?"object with keys {"+Object.keys(s).join(", ")+"}":E)+"). If you meant to render a collection of children, use an array instead.")}return G}function g(s,E,_){if(s==null)return s;var z=[],N=0;return Ul(s,z,"","",function(K){return E.call(_,K,N++)}),z}function O(s){if(s._status===-1){var E=s._result;E=E(),E.then(function(_){(s._status===0||s._status===-1)&&(s._status=1,s._result=_)},function(_){(s._status===0||s._status===-1)&&(s._status=2,s._result=_)}),s._status===-1&&(s._status=0,s._result=E)}if(s._status===1)return s._result.default;throw s._result}var B=typeof reportError=="function"?reportError:function(s){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var E=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof s=="object"&&s!==null&&typeof s.message=="string"?String(s.message):String(s),error:s});if(!window.dispatchEvent(E))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",s);return}console.error(s)};function tl(){}return X.Children={map:g,forEach:function(s,E,_){g(s,function(){E.apply(this,arguments)},_)},count:function(s){var E=0;return g(s,function(){E++}),E},toArray:function(s){return g(s,function(E){return E})||[]},only:function(s){if(!mt(s))throw Error("React.Children.only expected to receive a single React element child.");return s}},X.Component=Gl,X.Fragment=F,X.Profiler=Z,X.PureComponent=At,X.StrictMode=r,X.Suspense=H,X.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=L,X.__COMPILER_RUNTIME={__proto__:null,c:function(s){return L.H.useMemoCache(s)}},X.cache=function(s){return function(){return s.apply(null,arguments)}},X.cloneElement=function(s,E,_){if(s==null)throw Error("The argument must be a React element, but you passed "+s+".");var z=Bl({},s.props),N=s.key,K=void 0;if(E!=null)for(G in E.ref!==void 0&&(K=void 0),E.key!==void 0&&(N=""+E.key),E)!Cl.call(E,G)||G==="key"||G==="__self"||G==="__source"||G==="ref"&&E.ref===void 0||(z[G]=E[G]);var G=arguments.length-2;if(G===1)z.children=_;else if(1<G){for(var Kl=Array(G),fl=0;fl<G;fl++)Kl[fl]=arguments[fl+2];z.children=Kl}return Vl(s.type,N,void 0,void 0,K,z)},X.createContext=function(s){return s={$$typeof:dl,_currentValue:s,_currentValue2:s,_threadCount:0,Provider:null,Consumer:null},s.Provider=s,s.Consumer={$$typeof:w,_context:s},s},X.createElement=function(s,E,_){var z,N={},K=null;if(E!=null)for(z in E.key!==void 0&&(K=""+E.key),E)Cl.call(E,z)&&z!=="key"&&z!=="__self"&&z!=="__source"&&(N[z]=E[z]);var G=arguments.length-2;if(G===1)N.children=_;else if(1<G){for(var Kl=Array(G),fl=0;fl<G;fl++)Kl[fl]=arguments[fl+2];N.children=Kl}if(s&&s.defaultProps)for(z in G=s.defaultProps,G)N[z]===void 0&&(N[z]=G[z]);return Vl(s,K,void 0,void 0,null,N)},X.createRef=function(){return{current:null}},X.forwardRef=function(s){return{$$typeof:ql,render:s}},X.isValidElement=mt,X.lazy=function(s){return{$$typeof:R,_payload:{_status:-1,_result:s},_init:O}},X.memo=function(s,E){return{$$typeof:A,type:s,compare:E===void 0?null:E}},X.startTransition=function(s){var E=L.T,_={};L.T=_;try{var z=s(),N=L.S;N!==null&&N(_,z),typeof z=="object"&&z!==null&&typeof z.then=="function"&&z.then(tl,B)}catch(K){B(K)}finally{L.T=E}},X.unstable_useCacheRefresh=function(){return L.H.useCacheRefresh()},X.use=function(s){return L.H.use(s)},X.useActionState=function(s,E,_){return L.H.useActionState(s,E,_)},X.useCallback=function(s,E){return L.H.useCallback(s,E)},X.useContext=function(s){return L.H.useContext(s)},X.useDebugValue=function(){},X.useDeferredValue=function(s,E){return L.H.useDeferredValue(s,E)},X.useEffect=function(s,E,_){var z=L.H;if(typeof _=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return z.useEffect(s,E)},X.useId=function(){return L.H.useId()},X.useImperativeHandle=function(s,E,_){return L.H.useImperativeHandle(s,E,_)},X.useInsertionEffect=function(s,E){return L.H.useInsertionEffect(s,E)},X.useLayoutEffect=function(s,E){return L.H.useLayoutEffect(s,E)},X.useMemo=function(s,E){return L.H.useMemo(s,E)},X.useOptimistic=function(s,E){return L.H.useOptimistic(s,E)},X.useReducer=function(s,E,_){return L.H.useReducer(s,E,_)},X.useRef=function(s){return L.H.useRef(s)},X.useState=function(s){return L.H.useState(s)},X.useSyncExternalStore=function(s,E,_){return L.H.useSyncExternalStore(s,E,_)},X.useTransition=function(){return L.H.useTransition()},X.version="19.1.1",X}var Fv;function ti(){return Fv||(Fv=1,kc.exports=Rd()),kc.exports}var Hd=ti();const Nd=ey(Hd);var Fc={exports:{}},me={},Ic={exports:{}},Pc={};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Iv;function qd(){return Iv||(Iv=1,function(M){function yl(g,O){var B=g.length;g.push(O);l:for(;0<B;){var tl=B-1>>>1,s=g[tl];if(0<Z(s,O))g[tl]=O,g[B]=s,B=tl;else break l}}function F(g){return g.length===0?null:g[0]}function r(g){if(g.length===0)return null;var O=g[0],B=g.pop();if(B!==O){g[0]=B;l:for(var tl=0,s=g.length,E=s>>>1;tl<E;){var _=2*(tl+1)-1,z=g[_],N=_+1,K=g[N];if(0>Z(z,B))N<s&&0>Z(K,z)?(g[tl]=K,g[N]=B,tl=N):(g[tl]=z,g[_]=B,tl=_);else if(N<s&&0>Z(K,B))g[tl]=K,g[N]=B,tl=N;else break l}}return O}function Z(g,O){var B=g.sortIndex-O.sortIndex;return B!==0?B:g.id-O.id}if(M.unstable_now=void 0,typeof performance=="object"&&typeof performance.now=="function"){var w=performance;M.unstable_now=function(){return w.now()}}else{var dl=Date,ql=dl.now();M.unstable_now=function(){return dl.now()-ql}}var H=[],A=[],R=1,nl=null,al=3,Yl=!1,Bl=!1,vt=!1,Gl=!1,vu=typeof setTimeout=="function"?setTimeout:null,At=typeof clearTimeout=="function"?clearTimeout:null,Ml=typeof setImmediate<"u"?setImmediate:null;function yt(g){for(var O=F(A);O!==null;){if(O.callback===null)r(A);else if(O.startTime<=g)r(A),O.sortIndex=O.expirationTime,yl(H,O);else break;O=F(A)}}function L(g){if(vt=!1,yt(g),!Bl)if(F(H)!==null)Bl=!0,Cl||(Cl=!0,Dl());else{var O=F(A);O!==null&&Ul(L,O.startTime-g)}}var Cl=!1,Vl=-1,Ll=5,mt=-1;function Nu(){return Gl?!0:!(M.unstable_now()-mt<Ll)}function zt(){if(Gl=!1,Cl){var g=M.unstable_now();mt=g;var O=!0;try{l:{Bl=!1,vt&&(vt=!1,At(Vl),Vl=-1),Yl=!0;var B=al;try{t:{for(yt(g),nl=F(H);nl!==null&&!(nl.expirationTime>g&&Nu());){var tl=nl.callback;if(typeof tl=="function"){nl.callback=null,al=nl.priorityLevel;var s=tl(nl.expirationTime<=g);if(g=M.unstable_now(),typeof s=="function"){nl.callback=s,yt(g),O=!0;break t}nl===F(H)&&r(H),yt(g)}else r(H);nl=F(H)}if(nl!==null)O=!0;else{var E=F(A);E!==null&&Ul(L,E.startTime-g),O=!1}}break l}finally{nl=null,al=B,Yl=!1}O=void 0}}finally{O?Dl():Cl=!1}}}var Dl;if(typeof Ml=="function")Dl=function(){Ml(zt)};else if(typeof MessageChannel<"u"){var yu=new MessageChannel,du=yu.port2;yu.port1.onmessage=zt,Dl=function(){du.postMessage(null)}}else Dl=function(){vu(zt,0)};function Ul(g,O){Vl=vu(function(){g(M.unstable_now())},O)}M.unstable_IdlePriority=5,M.unstable_ImmediatePriority=1,M.unstable_LowPriority=4,M.unstable_NormalPriority=3,M.unstable_Profiling=null,M.unstable_UserBlockingPriority=2,M.unstable_cancelCallback=function(g){g.callback=null},M.unstable_forceFrameRate=function(g){0>g||125<g?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Ll=0<g?Math.floor(1e3/g):5},M.unstable_getCurrentPriorityLevel=function(){return al},M.unstable_next=function(g){switch(al){case 1:case 2:case 3:var O=3;break;default:O=al}var B=al;al=O;try{return g()}finally{al=B}},M.unstable_requestPaint=function(){Gl=!0},M.unstable_runWithPriority=function(g,O){switch(g){case 1:case 2:case 3:case 4:case 5:break;default:g=3}var B=al;al=g;try{return O()}finally{al=B}},M.unstable_scheduleCallback=function(g,O,B){var tl=M.unstable_now();switch(typeof B=="object"&&B!==null?(B=B.delay,B=typeof B=="number"&&0<B?tl+B:tl):B=tl,g){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return s=B+s,g={id:R++,callback:O,priorityLevel:g,startTime:B,expirationTime:s,sortIndex:-1},B>tl?(g.sortIndex=B,yl(A,g),F(H)===null&&g===F(A)&&(vt?(At(Vl),Vl=-1):vt=!0,Ul(L,B-tl))):(g.sortIndex=s,yl(H,g),Bl||Yl||(Bl=!0,Cl||(Cl=!0,Dl()))),g},M.unstable_shouldYield=Nu,M.unstable_wrapCallback=function(g){var O=al;return function(){var B=al;al=O;try{return g.apply(this,arguments)}finally{al=B}}}}(Pc)),Pc}var Pv;function Yd(){return Pv||(Pv=1,Ic.exports=qd()),Ic.exports}var li={exports:{}},Nl={};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ly;function Bd(){if(ly)return Nl;ly=1;var M=ti();function yl(H){var A="https://react.dev/errors/"+H;if(1<arguments.length){A+="?args[]="+encodeURIComponent(arguments[1]);for(var R=2;R<arguments.length;R++)A+="&args[]="+encodeURIComponent(arguments[R])}return"Minified React error #"+H+"; visit "+A+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function F(){}var r={d:{f:F,r:function(){throw Error(yl(522))},D:F,C:F,L:F,m:F,X:F,S:F,M:F},p:0,findDOMNode:null},Z=Symbol.for("react.portal");function w(H,A,R){var nl=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Z,key:nl==null?null:""+nl,children:H,containerInfo:A,implementation:R}}var dl=M.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function ql(H,A){if(H==="font")return"";if(typeof A=="string")return A==="use-credentials"?A:""}return Nl.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=r,Nl.createPortal=function(H,A){var R=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!A||A.nodeType!==1&&A.nodeType!==9&&A.nodeType!==11)throw Error(yl(299));return w(H,A,null,R)},Nl.flushSync=function(H){var A=dl.T,R=r.p;try{if(dl.T=null,r.p=2,H)return H()}finally{dl.T=A,r.p=R,r.d.f()}},Nl.preconnect=function(H,A){typeof H=="string"&&(A?(A=A.crossOrigin,A=typeof A=="string"?A==="use-credentials"?A:"":void 0):A=null,r.d.C(H,A))},Nl.prefetchDNS=function(H){typeof H=="string"&&r.d.D(H)},Nl.preinit=function(H,A){if(typeof H=="string"&&A&&typeof A.as=="string"){var R=A.as,nl=ql(R,A.crossOrigin),al=typeof A.integrity=="string"?A.integrity:void 0,Yl=typeof A.fetchPriority=="string"?A.fetchPriority:void 0;R==="style"?r.d.S(H,typeof A.precedence=="string"?A.precedence:void 0,{crossOrigin:nl,integrity:al,fetchPriority:Yl}):R==="script"&&r.d.X(H,{crossOrigin:nl,integrity:al,fetchPriority:Yl,nonce:typeof A.nonce=="string"?A.nonce:void 0})}},Nl.preinitModule=function(H,A){if(typeof H=="string")if(typeof A=="object"&&A!==null){if(A.as==null||A.as==="script"){var R=ql(A.as,A.crossOrigin);r.d.M(H,{crossOrigin:R,integrity:typeof A.integrity=="string"?A.integrity:void 0,nonce:typeof A.nonce=="string"?A.nonce:void 0})}}else A==null&&r.d.M(H)},Nl.preload=function(H,A){if(typeof H=="string"&&typeof A=="object"&&A!==null&&typeof A.as=="string"){var R=A.as,nl=ql(R,A.crossOrigin);r.d.L(H,R,{crossOrigin:nl,integrity:typeof A.integrity=="string"?A.integrity:void 0,nonce:typeof A.nonce=="string"?A.nonce:void 0,type:typeof A.type=="string"?A.type:void 0,fetchPriority:typeof A.fetchPriority=="string"?A.fetchPriority:void 0,referrerPolicy:typeof A.referrerPolicy=="string"?A.referrerPolicy:void 0,imageSrcSet:typeof A.imageSrcSet=="string"?A.imageSrcSet:void 0,imageSizes:typeof A.imageSizes=="string"?A.imageSizes:void 0,media:typeof A.media=="string"?A.media:void 0})}},Nl.preloadModule=function(H,A){if(typeof H=="string")if(A){var R=ql(A.as,A.crossOrigin);r.d.m(H,{as:typeof A.as=="string"&&A.as!=="script"?A.as:void 0,crossOrigin:R,integrity:typeof A.integrity=="string"?A.integrity:void 0})}else r.d.m(H)},Nl.requestFormReset=function(H){r.d.r(H)},Nl.unstable_batchedUpdates=function(H,A){return H(A)},Nl.useFormState=function(H,A,R){return dl.H.useFormState(H,A,R)},Nl.useFormStatus=function(){return dl.H.useHostTransitionStatus()},Nl.version="19.1.1",Nl}var ty;function pd(){if(ty)return li.exports;ty=1;function M(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(M)}catch(yl){console.error(yl)}}return M(),li.exports=Bd(),li.exports}/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var uy;function Gd(){if(uy)return me;uy=1;var M=Yd(),yl=ti(),F=pd();function r(l){var t="https://react.dev/errors/"+l;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var u=2;u<arguments.length;u++)t+="&args[]="+encodeURIComponent(arguments[u])}return"Minified React error #"+l+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function Z(l){return!(!l||l.nodeType!==1&&l.nodeType!==9&&l.nodeType!==11)}function w(l){var t=l,u=l;if(l.alternate)for(;t.return;)t=t.return;else{l=t;do t=l,(t.flags&4098)!==0&&(u=t.return),l=t.return;while(l)}return t.tag===3?u:null}function dl(l){if(l.tag===13){var t=l.memoizedState;if(t===null&&(l=l.alternate,l!==null&&(t=l.memoizedState)),t!==null)return t.dehydrated}return null}function ql(l){if(w(l)!==l)throw Error(r(188))}function H(l){var t=l.alternate;if(!t){if(t=w(l),t===null)throw Error(r(188));return t!==l?null:l}for(var u=l,a=t;;){var e=u.return;if(e===null)break;var n=e.alternate;if(n===null){if(a=e.return,a!==null){u=a;continue}break}if(e.child===n.child){for(n=e.child;n;){if(n===u)return ql(e),l;if(n===a)return ql(e),t;n=n.sibling}throw Error(r(188))}if(u.return!==a.return)u=e,a=n;else{for(var f=!1,c=e.child;c;){if(c===u){f=!0,u=e,a=n;break}if(c===a){f=!0,a=e,u=n;break}c=c.sibling}if(!f){for(c=n.child;c;){if(c===u){f=!0,u=n,a=e;break}if(c===a){f=!0,a=n,u=e;break}c=c.sibling}if(!f)throw Error(r(189))}}if(u.alternate!==a)throw Error(r(190))}if(u.tag!==3)throw Error(r(188));return u.stateNode.current===u?l:t}function A(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l;for(l=l.child;l!==null;){if(t=A(l),t!==null)return t;l=l.sibling}return null}var R=Object.assign,nl=Symbol.for("react.element"),al=Symbol.for("react.transitional.element"),Yl=Symbol.for("react.portal"),Bl=Symbol.for("react.fragment"),vt=Symbol.for("react.strict_mode"),Gl=Symbol.for("react.profiler"),vu=Symbol.for("react.provider"),At=Symbol.for("react.consumer"),Ml=Symbol.for("react.context"),yt=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),Cl=Symbol.for("react.suspense_list"),Vl=Symbol.for("react.memo"),Ll=Symbol.for("react.lazy"),mt=Symbol.for("react.activity"),Nu=Symbol.for("react.memo_cache_sentinel"),zt=Symbol.iterator;function Dl(l){return l===null||typeof l!="object"?null:(l=zt&&l[zt]||l["@@iterator"],typeof l=="function"?l:null)}var yu=Symbol.for("react.client.reference");function du(l){if(l==null)return null;if(typeof l=="function")return l.$$typeof===yu?null:l.displayName||l.name||null;if(typeof l=="string")return l;switch(l){case Bl:return"Fragment";case Gl:return"Profiler";case vt:return"StrictMode";case L:return"Suspense";case Cl:return"SuspenseList";case mt:return"Activity"}if(typeof l=="object")switch(l.$$typeof){case Yl:return"Portal";case Ml:return(l.displayName||"Context")+".Provider";case At:return(l._context.displayName||"Context")+".Consumer";case yt:var t=l.render;return l=l.displayName,l||(l=t.displayName||t.name||"",l=l!==""?"ForwardRef("+l+")":"ForwardRef"),l;case Vl:return t=l.displayName||null,t!==null?t:du(l.type)||"Memo";case Ll:t=l._payload,l=l._init;try{return du(l(t))}catch{}}return null}var Ul=Array.isArray,g=yl.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,O=F.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,B={pending:!1,data:null,method:null,action:null},tl=[],s=-1;function E(l){return{current:l}}function _(l){0>s||(l.current=tl[s],tl[s]=null,s--)}function z(l,t){s++,tl[s]=l.current,l.current=t}var N=E(null),K=E(null),G=E(null),Kl=E(null);function fl(l,t){switch(z(G,t),z(K,l),z(N,null),t.nodeType){case 9:case 11:l=(l=t.documentElement)&&(l=l.namespaceURI)?Av(l):0;break;default:if(l=t.tagName,t=t.namespaceURI)t=Av(t),l=zv(t,l);else switch(l){case"svg":l=1;break;case"math":l=2;break;default:l=0}}_(N),z(N,l)}function xt(){_(N),_(K),_(G)}function Yn(l){l.memoizedState!==null&&z(Kl,l);var t=N.current,u=zv(t,l.type);t!==u&&(z(K,l),z(N,u))}function Se(l){K.current===l&&(_(N),_(K)),Kl.current===l&&(_(Kl),se._currentValue=B)}var Bn=Object.prototype.hasOwnProperty,pn=M.unstable_scheduleCallback,Gn=M.unstable_cancelCallback,ny=M.unstable_shouldYield,fy=M.unstable_requestPaint,rt=M.unstable_now,cy=M.unstable_getCurrentPriorityLevel,ui=M.unstable_ImmediatePriority,ai=M.unstable_UserBlockingPriority,ge=M.unstable_NormalPriority,iy=M.unstable_LowPriority,ei=M.unstable_IdlePriority,sy=M.log,vy=M.unstable_setDisableYieldValue,Sa=null,Jl=null;function Zt(l){if(typeof sy=="function"&&vy(l),Jl&&typeof Jl.setStrictMode=="function")try{Jl.setStrictMode(Sa,l)}catch{}}var wl=Math.clz32?Math.clz32:hy,yy=Math.log,dy=Math.LN2;function hy(l){return l>>>=0,l===0?32:31-(yy(l)/dy|0)|0}var be=256,Te=4194304;function hu(l){var t=l&42;if(t!==0)return t;switch(l&-l){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return l&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return l&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return l}}function Ee(l,t,u){var a=l.pendingLanes;if(a===0)return 0;var e=0,n=l.suspendedLanes,f=l.pingedLanes;l=l.warmLanes;var c=a&134217727;return c!==0?(a=c&~n,a!==0?e=hu(a):(f&=c,f!==0?e=hu(f):u||(u=c&~l,u!==0&&(e=hu(u))))):(c=a&~n,c!==0?e=hu(c):f!==0?e=hu(f):u||(u=a&~l,u!==0&&(e=hu(u)))),e===0?0:t!==0&&t!==e&&(t&n)===0&&(n=e&-e,u=t&-t,n>=u||n===32&&(u&4194048)!==0)?t:e}function ga(l,t){return(l.pendingLanes&~(l.suspendedLanes&~l.pingedLanes)&t)===0}function oy(l,t){switch(l){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function ni(){var l=be;return be<<=1,(be&4194048)===0&&(be=256),l}function fi(){var l=Te;return Te<<=1,(Te&62914560)===0&&(Te=4194304),l}function Xn(l){for(var t=[],u=0;31>u;u++)t.push(l);return t}function ba(l,t){l.pendingLanes|=t,t!==268435456&&(l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0)}function my(l,t,u,a,e,n){var f=l.pendingLanes;l.pendingLanes=u,l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0,l.expiredLanes&=u,l.entangledLanes&=u,l.errorRecoveryDisabledLanes&=u,l.shellSuspendCounter=0;var c=l.entanglements,i=l.expirationTimes,h=l.hiddenUpdates;for(u=f&~u;0<u;){var S=31-wl(u),T=1<<S;c[S]=0,i[S]=-1;var o=h[S];if(o!==null)for(h[S]=null,S=0;S<o.length;S++){var m=o[S];m!==null&&(m.lane&=-536870913)}u&=~T}a!==0&&ci(l,a,0),n!==0&&e===0&&l.tag!==0&&(l.suspendedLanes|=n&~(f&~t))}function ci(l,t,u){l.pendingLanes|=t,l.suspendedLanes&=~t;var a=31-wl(t);l.entangledLanes|=t,l.entanglements[a]=l.entanglements[a]|1073741824|u&4194090}function ii(l,t){var u=l.entangledLanes|=t;for(l=l.entanglements;u;){var a=31-wl(u),e=1<<a;e&t|l[a]&t&&(l[a]|=t),u&=~e}}function Qn(l){switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=128;break;case 268435456:l=134217728;break;default:l=0}return l}function xn(l){return l&=-l,2<l?8<l?(l&134217727)!==0?32:268435456:8:2}function si(){var l=O.p;return l!==0?l:(l=window.event,l===void 0?32:Cv(l.type))}function ry(l,t){var u=O.p;try{return O.p=l,t()}finally{O.p=u}}var jt=Math.random().toString(36).slice(2),Rl="__reactFiber$"+jt,Xl="__reactProps$"+jt,qu="__reactContainer$"+jt,Zn="__reactEvents$"+jt,Sy="__reactListeners$"+jt,gy="__reactHandles$"+jt,vi="__reactResources$"+jt,Ta="__reactMarker$"+jt;function jn(l){delete l[Rl],delete l[Xl],delete l[Zn],delete l[Sy],delete l[gy]}function Yu(l){var t=l[Rl];if(t)return t;for(var u=l.parentNode;u;){if(t=u[qu]||u[Rl]){if(u=t.alternate,t.child!==null||u!==null&&u.child!==null)for(l=Dv(l);l!==null;){if(u=l[Rl])return u;l=Dv(l)}return t}l=u,u=l.parentNode}return null}function Bu(l){if(l=l[Rl]||l[qu]){var t=l.tag;if(t===5||t===6||t===13||t===26||t===27||t===3)return l}return null}function Ea(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l.stateNode;throw Error(r(33))}function pu(l){var t=l[vi];return t||(t=l[vi]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function bl(l){l[Ta]=!0}var yi=new Set,di={};function ou(l,t){Gu(l,t),Gu(l+"Capture",t)}function Gu(l,t){for(di[l]=t,l=0;l<t.length;l++)yi.add(t[l])}var by=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),hi={},oi={};function Ty(l){return Bn.call(oi,l)?!0:Bn.call(hi,l)?!1:by.test(l)?oi[l]=!0:(hi[l]=!0,!1)}function Ae(l,t,u){if(Ty(t))if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":l.removeAttribute(t);return;case"boolean":var a=t.toLowerCase().slice(0,5);if(a!=="data-"&&a!=="aria-"){l.removeAttribute(t);return}}l.setAttribute(t,""+u)}}function ze(l,t,u){if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(t);return}l.setAttribute(t,""+u)}}function Ot(l,t,u,a){if(a===null)l.removeAttribute(u);else{switch(typeof a){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(u);return}l.setAttributeNS(t,u,""+a)}}var Cn,mi;function Xu(l){if(Cn===void 0)try{throw Error()}catch(u){var t=u.stack.trim().match(/\n( *(at )?)/);Cn=t&&t[1]||"",mi=-1<u.stack.indexOf(`
    at`)?" (<anonymous>)":-1<u.stack.indexOf("@")?"@unknown:0:0":""}return`
`+Cn+l+mi}var Vn=!1;function Ln(l,t){if(!l||Vn)return"";Vn=!0;var u=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var a={DetermineComponentFrameRoot:function(){try{if(t){var T=function(){throw Error()};if(Object.defineProperty(T.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(T,[])}catch(m){var o=m}Reflect.construct(l,[],T)}else{try{T.call()}catch(m){o=m}l.call(T.prototype)}}else{try{throw Error()}catch(m){o=m}(T=l())&&typeof T.catch=="function"&&T.catch(function(){})}}catch(m){if(m&&o&&typeof m.stack=="string")return[m.stack,o.stack]}return[null,null]}};a.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var e=Object.getOwnPropertyDescriptor(a.DetermineComponentFrameRoot,"name");e&&e.configurable&&Object.defineProperty(a.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var n=a.DetermineComponentFrameRoot(),f=n[0],c=n[1];if(f&&c){var i=f.split(`
`),h=c.split(`
`);for(e=a=0;a<i.length&&!i[a].includes("DetermineComponentFrameRoot");)a++;for(;e<h.length&&!h[e].includes("DetermineComponentFrameRoot");)e++;if(a===i.length||e===h.length)for(a=i.length-1,e=h.length-1;1<=a&&0<=e&&i[a]!==h[e];)e--;for(;1<=a&&0<=e;a--,e--)if(i[a]!==h[e]){if(a!==1||e!==1)do if(a--,e--,0>e||i[a]!==h[e]){var S=`
`+i[a].replace(" at new "," at ");return l.displayName&&S.includes("<anonymous>")&&(S=S.replace("<anonymous>",l.displayName)),S}while(1<=a&&0<=e);break}}}finally{Vn=!1,Error.prepareStackTrace=u}return(u=l?l.displayName||l.name:"")?Xu(u):""}function Ey(l){switch(l.tag){case 26:case 27:case 5:return Xu(l.type);case 16:return Xu("Lazy");case 13:return Xu("Suspense");case 19:return Xu("SuspenseList");case 0:case 15:return Ln(l.type,!1);case 11:return Ln(l.type.render,!1);case 1:return Ln(l.type,!0);case 31:return Xu("Activity");default:return""}}function ri(l){try{var t="";do t+=Ey(l),l=l.return;while(l);return t}catch(u){return`
Error generating stack: `+u.message+`
`+u.stack}}function tt(l){switch(typeof l){case"bigint":case"boolean":case"number":case"string":case"undefined":return l;case"object":return l;default:return""}}function Si(l){var t=l.type;return(l=l.nodeName)&&l.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Ay(l){var t=Si(l)?"checked":"value",u=Object.getOwnPropertyDescriptor(l.constructor.prototype,t),a=""+l[t];if(!l.hasOwnProperty(t)&&typeof u<"u"&&typeof u.get=="function"&&typeof u.set=="function"){var e=u.get,n=u.set;return Object.defineProperty(l,t,{configurable:!0,get:function(){return e.call(this)},set:function(f){a=""+f,n.call(this,f)}}),Object.defineProperty(l,t,{enumerable:u.enumerable}),{getValue:function(){return a},setValue:function(f){a=""+f},stopTracking:function(){l._valueTracker=null,delete l[t]}}}}function Oe(l){l._valueTracker||(l._valueTracker=Ay(l))}function gi(l){if(!l)return!1;var t=l._valueTracker;if(!t)return!0;var u=t.getValue(),a="";return l&&(a=Si(l)?l.checked?"true":"false":l.value),l=a,l!==u?(t.setValue(l),!0):!1}function _e(l){if(l=l||(typeof document<"u"?document:void 0),typeof l>"u")return null;try{return l.activeElement||l.body}catch{return l.body}}var zy=/[\n"\\]/g;function ut(l){return l.replace(zy,function(t){return"\\"+t.charCodeAt(0).toString(16)+" "})}function Kn(l,t,u,a,e,n,f,c){l.name="",f!=null&&typeof f!="function"&&typeof f!="symbol"&&typeof f!="boolean"?l.type=f:l.removeAttribute("type"),t!=null?f==="number"?(t===0&&l.value===""||l.value!=t)&&(l.value=""+tt(t)):l.value!==""+tt(t)&&(l.value=""+tt(t)):f!=="submit"&&f!=="reset"||l.removeAttribute("value"),t!=null?Jn(l,f,tt(t)):u!=null?Jn(l,f,tt(u)):a!=null&&l.removeAttribute("value"),e==null&&n!=null&&(l.defaultChecked=!!n),e!=null&&(l.checked=e&&typeof e!="function"&&typeof e!="symbol"),c!=null&&typeof c!="function"&&typeof c!="symbol"&&typeof c!="boolean"?l.name=""+tt(c):l.removeAttribute("name")}function bi(l,t,u,a,e,n,f,c){if(n!=null&&typeof n!="function"&&typeof n!="symbol"&&typeof n!="boolean"&&(l.type=n),t!=null||u!=null){if(!(n!=="submit"&&n!=="reset"||t!=null))return;u=u!=null?""+tt(u):"",t=t!=null?""+tt(t):u,c||t===l.value||(l.value=t),l.defaultValue=t}a=a??e,a=typeof a!="function"&&typeof a!="symbol"&&!!a,l.checked=c?l.checked:!!a,l.defaultChecked=!!a,f!=null&&typeof f!="function"&&typeof f!="symbol"&&typeof f!="boolean"&&(l.name=f)}function Jn(l,t,u){t==="number"&&_e(l.ownerDocument)===l||l.defaultValue===""+u||(l.defaultValue=""+u)}function Qu(l,t,u,a){if(l=l.options,t){t={};for(var e=0;e<u.length;e++)t["$"+u[e]]=!0;for(u=0;u<l.length;u++)e=t.hasOwnProperty("$"+l[u].value),l[u].selected!==e&&(l[u].selected=e),e&&a&&(l[u].defaultSelected=!0)}else{for(u=""+tt(u),t=null,e=0;e<l.length;e++){if(l[e].value===u){l[e].selected=!0,a&&(l[e].defaultSelected=!0);return}t!==null||l[e].disabled||(t=l[e])}t!==null&&(t.selected=!0)}}function Ti(l,t,u){if(t!=null&&(t=""+tt(t),t!==l.value&&(l.value=t),u==null)){l.defaultValue!==t&&(l.defaultValue=t);return}l.defaultValue=u!=null?""+tt(u):""}function Ei(l,t,u,a){if(t==null){if(a!=null){if(u!=null)throw Error(r(92));if(Ul(a)){if(1<a.length)throw Error(r(93));a=a[0]}u=a}u==null&&(u=""),t=u}u=tt(t),l.defaultValue=u,a=l.textContent,a===u&&a!==""&&a!==null&&(l.value=a)}function xu(l,t){if(t){var u=l.firstChild;if(u&&u===l.lastChild&&u.nodeType===3){u.nodeValue=t;return}}l.textContent=t}var Oy=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ai(l,t,u){var a=t.indexOf("--")===0;u==null||typeof u=="boolean"||u===""?a?l.setProperty(t,""):t==="float"?l.cssFloat="":l[t]="":a?l.setProperty(t,u):typeof u!="number"||u===0||Oy.has(t)?t==="float"?l.cssFloat=u:l[t]=(""+u).trim():l[t]=u+"px"}function zi(l,t,u){if(t!=null&&typeof t!="object")throw Error(r(62));if(l=l.style,u!=null){for(var a in u)!u.hasOwnProperty(a)||t!=null&&t.hasOwnProperty(a)||(a.indexOf("--")===0?l.setProperty(a,""):a==="float"?l.cssFloat="":l[a]="");for(var e in t)a=t[e],t.hasOwnProperty(e)&&u[e]!==a&&Ai(l,e,a)}else for(var n in t)t.hasOwnProperty(n)&&Ai(l,n,t[n])}function wn(l){if(l.indexOf("-")===-1)return!1;switch(l){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _y=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),My=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Me(l){return My.test(""+l)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":l}var Wn=null;function $n(l){return l=l.target||l.srcElement||window,l.correspondingUseElement&&(l=l.correspondingUseElement),l.nodeType===3?l.parentNode:l}var Zu=null,ju=null;function Oi(l){var t=Bu(l);if(t&&(l=t.stateNode)){var u=l[Xl]||null;l:switch(l=t.stateNode,t.type){case"input":if(Kn(l,u.value,u.defaultValue,u.defaultValue,u.checked,u.defaultChecked,u.type,u.name),t=u.name,u.type==="radio"&&t!=null){for(u=l;u.parentNode;)u=u.parentNode;for(u=u.querySelectorAll('input[name="'+ut(""+t)+'"][type="radio"]'),t=0;t<u.length;t++){var a=u[t];if(a!==l&&a.form===l.form){var e=a[Xl]||null;if(!e)throw Error(r(90));Kn(a,e.value,e.defaultValue,e.defaultValue,e.checked,e.defaultChecked,e.type,e.name)}}for(t=0;t<u.length;t++)a=u[t],a.form===l.form&&gi(a)}break l;case"textarea":Ti(l,u.value,u.defaultValue);break l;case"select":t=u.value,t!=null&&Qu(l,!!u.multiple,t,!1)}}}var kn=!1;function _i(l,t,u){if(kn)return l(t,u);kn=!0;try{var a=l(t);return a}finally{if(kn=!1,(Zu!==null||ju!==null)&&(dn(),Zu&&(t=Zu,l=ju,ju=Zu=null,Oi(t),l)))for(t=0;t<l.length;t++)Oi(l[t])}}function Aa(l,t){var u=l.stateNode;if(u===null)return null;var a=u[Xl]||null;if(a===null)return null;u=a[t];l:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(l=l.type,a=!(l==="button"||l==="input"||l==="select"||l==="textarea")),l=!a;break l;default:l=!1}if(l)return null;if(u&&typeof u!="function")throw Error(r(231,t,typeof u));return u}var _t=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Fn=!1;if(_t)try{var za={};Object.defineProperty(za,"passive",{get:function(){Fn=!0}}),window.addEventListener("test",za,za),window.removeEventListener("test",za,za)}catch{Fn=!1}var Ct=null,In=null,De=null;function Mi(){if(De)return De;var l,t=In,u=t.length,a,e="value"in Ct?Ct.value:Ct.textContent,n=e.length;for(l=0;l<u&&t[l]===e[l];l++);var f=u-l;for(a=1;a<=f&&t[u-a]===e[n-a];a++);return De=e.slice(l,1<a?1-a:void 0)}function Ue(l){var t=l.keyCode;return"charCode"in l?(l=l.charCode,l===0&&t===13&&(l=13)):l=t,l===10&&(l=13),32<=l||l===13?l:0}function Re(){return!0}function Di(){return!1}function Ql(l){function t(u,a,e,n,f){this._reactName=u,this._targetInst=e,this.type=a,this.nativeEvent=n,this.target=f,this.currentTarget=null;for(var c in l)l.hasOwnProperty(c)&&(u=l[c],this[c]=u?u(n):n[c]);return this.isDefaultPrevented=(n.defaultPrevented!=null?n.defaultPrevented:n.returnValue===!1)?Re:Di,this.isPropagationStopped=Di,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var u=this.nativeEvent;u&&(u.preventDefault?u.preventDefault():typeof u.returnValue!="unknown"&&(u.returnValue=!1),this.isDefaultPrevented=Re)},stopPropagation:function(){var u=this.nativeEvent;u&&(u.stopPropagation?u.stopPropagation():typeof u.cancelBubble!="unknown"&&(u.cancelBubble=!0),this.isPropagationStopped=Re)},persist:function(){},isPersistent:Re}),t}var mu={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(l){return l.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},He=Ql(mu),Oa=R({},mu,{view:0,detail:0}),Dy=Ql(Oa),Pn,lf,_a,Ne=R({},Oa,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:uf,button:0,buttons:0,relatedTarget:function(l){return l.relatedTarget===void 0?l.fromElement===l.srcElement?l.toElement:l.fromElement:l.relatedTarget},movementX:function(l){return"movementX"in l?l.movementX:(l!==_a&&(_a&&l.type==="mousemove"?(Pn=l.screenX-_a.screenX,lf=l.screenY-_a.screenY):lf=Pn=0,_a=l),Pn)},movementY:function(l){return"movementY"in l?l.movementY:lf}}),Ui=Ql(Ne),Uy=R({},Ne,{dataTransfer:0}),Ry=Ql(Uy),Hy=R({},Oa,{relatedTarget:0}),tf=Ql(Hy),Ny=R({},mu,{animationName:0,elapsedTime:0,pseudoElement:0}),qy=Ql(Ny),Yy=R({},mu,{clipboardData:function(l){return"clipboardData"in l?l.clipboardData:window.clipboardData}}),By=Ql(Yy),py=R({},mu,{data:0}),Ri=Ql(py),Gy={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xy={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Qy={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xy(l){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(l):(l=Qy[l])?!!t[l]:!1}function uf(){return xy}var Zy=R({},Oa,{key:function(l){if(l.key){var t=Gy[l.key]||l.key;if(t!=="Unidentified")return t}return l.type==="keypress"?(l=Ue(l),l===13?"Enter":String.fromCharCode(l)):l.type==="keydown"||l.type==="keyup"?Xy[l.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:uf,charCode:function(l){return l.type==="keypress"?Ue(l):0},keyCode:function(l){return l.type==="keydown"||l.type==="keyup"?l.keyCode:0},which:function(l){return l.type==="keypress"?Ue(l):l.type==="keydown"||l.type==="keyup"?l.keyCode:0}}),jy=Ql(Zy),Cy=R({},Ne,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Hi=Ql(Cy),Vy=R({},Oa,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:uf}),Ly=Ql(Vy),Ky=R({},mu,{propertyName:0,elapsedTime:0,pseudoElement:0}),Jy=Ql(Ky),wy=R({},Ne,{deltaX:function(l){return"deltaX"in l?l.deltaX:"wheelDeltaX"in l?-l.wheelDeltaX:0},deltaY:function(l){return"deltaY"in l?l.deltaY:"wheelDeltaY"in l?-l.wheelDeltaY:"wheelDelta"in l?-l.wheelDelta:0},deltaZ:0,deltaMode:0}),Wy=Ql(wy),$y=R({},mu,{newState:0,oldState:0}),ky=Ql($y),Fy=[9,13,27,32],af=_t&&"CompositionEvent"in window,Ma=null;_t&&"documentMode"in document&&(Ma=document.documentMode);var Iy=_t&&"TextEvent"in window&&!Ma,Ni=_t&&(!af||Ma&&8<Ma&&11>=Ma),qi=" ",Yi=!1;function Bi(l,t){switch(l){case"keyup":return Fy.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function pi(l){return l=l.detail,typeof l=="object"&&"data"in l?l.data:null}var Cu=!1;function Py(l,t){switch(l){case"compositionend":return pi(t);case"keypress":return t.which!==32?null:(Yi=!0,qi);case"textInput":return l=t.data,l===qi&&Yi?null:l;default:return null}}function l1(l,t){if(Cu)return l==="compositionend"||!af&&Bi(l,t)?(l=Mi(),De=In=Ct=null,Cu=!1,l):null;switch(l){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ni&&t.locale!=="ko"?null:t.data;default:return null}}var t1={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gi(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t==="input"?!!t1[l.type]:t==="textarea"}function Xi(l,t,u,a){Zu?ju?ju.push(a):ju=[a]:Zu=a,t=gn(t,"onChange"),0<t.length&&(u=new He("onChange","change",null,u,a),l.push({event:u,listeners:t}))}var Da=null,Ua=null;function u1(l){Sv(l,0)}function qe(l){var t=Ea(l);if(gi(t))return l}function Qi(l,t){if(l==="change")return t}var xi=!1;if(_t){var ef;if(_t){var nf="oninput"in document;if(!nf){var Zi=document.createElement("div");Zi.setAttribute("oninput","return;"),nf=typeof Zi.oninput=="function"}ef=nf}else ef=!1;xi=ef&&(!document.documentMode||9<document.documentMode)}function ji(){Da&&(Da.detachEvent("onpropertychange",Ci),Ua=Da=null)}function Ci(l){if(l.propertyName==="value"&&qe(Ua)){var t=[];Xi(t,Ua,l,$n(l)),_i(u1,t)}}function a1(l,t,u){l==="focusin"?(ji(),Da=t,Ua=u,Da.attachEvent("onpropertychange",Ci)):l==="focusout"&&ji()}function e1(l){if(l==="selectionchange"||l==="keyup"||l==="keydown")return qe(Ua)}function n1(l,t){if(l==="click")return qe(t)}function f1(l,t){if(l==="input"||l==="change")return qe(t)}function c1(l,t){return l===t&&(l!==0||1/l===1/t)||l!==l&&t!==t}var Wl=typeof Object.is=="function"?Object.is:c1;function Ra(l,t){if(Wl(l,t))return!0;if(typeof l!="object"||l===null||typeof t!="object"||t===null)return!1;var u=Object.keys(l),a=Object.keys(t);if(u.length!==a.length)return!1;for(a=0;a<u.length;a++){var e=u[a];if(!Bn.call(t,e)||!Wl(l[e],t[e]))return!1}return!0}function Vi(l){for(;l&&l.firstChild;)l=l.firstChild;return l}function Li(l,t){var u=Vi(l);l=0;for(var a;u;){if(u.nodeType===3){if(a=l+u.textContent.length,l<=t&&a>=t)return{node:u,offset:t-l};l=a}l:{for(;u;){if(u.nextSibling){u=u.nextSibling;break l}u=u.parentNode}u=void 0}u=Vi(u)}}function Ki(l,t){return l&&t?l===t?!0:l&&l.nodeType===3?!1:t&&t.nodeType===3?Ki(l,t.parentNode):"contains"in l?l.contains(t):l.compareDocumentPosition?!!(l.compareDocumentPosition(t)&16):!1:!1}function Ji(l){l=l!=null&&l.ownerDocument!=null&&l.ownerDocument.defaultView!=null?l.ownerDocument.defaultView:window;for(var t=_e(l.document);t instanceof l.HTMLIFrameElement;){try{var u=typeof t.contentWindow.location.href=="string"}catch{u=!1}if(u)l=t.contentWindow;else break;t=_e(l.document)}return t}function ff(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t&&(t==="input"&&(l.type==="text"||l.type==="search"||l.type==="tel"||l.type==="url"||l.type==="password")||t==="textarea"||l.contentEditable==="true")}var i1=_t&&"documentMode"in document&&11>=document.documentMode,Vu=null,cf=null,Ha=null,sf=!1;function wi(l,t,u){var a=u.window===u?u.document:u.nodeType===9?u:u.ownerDocument;sf||Vu==null||Vu!==_e(a)||(a=Vu,"selectionStart"in a&&ff(a)?a={start:a.selectionStart,end:a.selectionEnd}:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection(),a={anchorNode:a.anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset}),Ha&&Ra(Ha,a)||(Ha=a,a=gn(cf,"onSelect"),0<a.length&&(t=new He("onSelect","select",null,t,u),l.push({event:t,listeners:a}),t.target=Vu)))}function ru(l,t){var u={};return u[l.toLowerCase()]=t.toLowerCase(),u["Webkit"+l]="webkit"+t,u["Moz"+l]="moz"+t,u}var Lu={animationend:ru("Animation","AnimationEnd"),animationiteration:ru("Animation","AnimationIteration"),animationstart:ru("Animation","AnimationStart"),transitionrun:ru("Transition","TransitionRun"),transitionstart:ru("Transition","TransitionStart"),transitioncancel:ru("Transition","TransitionCancel"),transitionend:ru("Transition","TransitionEnd")},vf={},Wi={};_t&&(Wi=document.createElement("div").style,"AnimationEvent"in window||(delete Lu.animationend.animation,delete Lu.animationiteration.animation,delete Lu.animationstart.animation),"TransitionEvent"in window||delete Lu.transitionend.transition);function Su(l){if(vf[l])return vf[l];if(!Lu[l])return l;var t=Lu[l],u;for(u in t)if(t.hasOwnProperty(u)&&u in Wi)return vf[l]=t[u];return l}var $i=Su("animationend"),ki=Su("animationiteration"),Fi=Su("animationstart"),s1=Su("transitionrun"),v1=Su("transitionstart"),y1=Su("transitioncancel"),Ii=Su("transitionend"),Pi=new Map,yf="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");yf.push("scrollEnd");function dt(l,t){Pi.set(l,t),ou(t,[l])}var l0=new WeakMap;function at(l,t){if(typeof l=="object"&&l!==null){var u=l0.get(l);return u!==void 0?u:(t={value:l,source:t,stack:ri(t)},l0.set(l,t),t)}return{value:l,source:t,stack:ri(t)}}var et=[],Ku=0,df=0;function Ye(){for(var l=Ku,t=df=Ku=0;t<l;){var u=et[t];et[t++]=null;var a=et[t];et[t++]=null;var e=et[t];et[t++]=null;var n=et[t];if(et[t++]=null,a!==null&&e!==null){var f=a.pending;f===null?e.next=e:(e.next=f.next,f.next=e),a.pending=e}n!==0&&t0(u,e,n)}}function Be(l,t,u,a){et[Ku++]=l,et[Ku++]=t,et[Ku++]=u,et[Ku++]=a,df|=a,l.lanes|=a,l=l.alternate,l!==null&&(l.lanes|=a)}function hf(l,t,u,a){return Be(l,t,u,a),pe(l)}function Ju(l,t){return Be(l,null,null,t),pe(l)}function t0(l,t,u){l.lanes|=u;var a=l.alternate;a!==null&&(a.lanes|=u);for(var e=!1,n=l.return;n!==null;)n.childLanes|=u,a=n.alternate,a!==null&&(a.childLanes|=u),n.tag===22&&(l=n.stateNode,l===null||l._visibility&1||(e=!0)),l=n,n=n.return;return l.tag===3?(n=l.stateNode,e&&t!==null&&(e=31-wl(u),l=n.hiddenUpdates,a=l[e],a===null?l[e]=[t]:a.push(t),t.lane=u|536870912),n):null}function pe(l){if(50<te)throw te=0,bc=null,Error(r(185));for(var t=l.return;t!==null;)l=t,t=l.return;return l.tag===3?l.stateNode:null}var wu={};function d1(l,t,u,a){this.tag=l,this.key=u,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function $l(l,t,u,a){return new d1(l,t,u,a)}function of(l){return l=l.prototype,!(!l||!l.isReactComponent)}function Mt(l,t){var u=l.alternate;return u===null?(u=$l(l.tag,t,l.key,l.mode),u.elementType=l.elementType,u.type=l.type,u.stateNode=l.stateNode,u.alternate=l,l.alternate=u):(u.pendingProps=t,u.type=l.type,u.flags=0,u.subtreeFlags=0,u.deletions=null),u.flags=l.flags&65011712,u.childLanes=l.childLanes,u.lanes=l.lanes,u.child=l.child,u.memoizedProps=l.memoizedProps,u.memoizedState=l.memoizedState,u.updateQueue=l.updateQueue,t=l.dependencies,u.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},u.sibling=l.sibling,u.index=l.index,u.ref=l.ref,u.refCleanup=l.refCleanup,u}function u0(l,t){l.flags&=65011714;var u=l.alternate;return u===null?(l.childLanes=0,l.lanes=t,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,t=u.dependencies,l.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),l}function Ge(l,t,u,a,e,n){var f=0;if(a=l,typeof l=="function")of(l)&&(f=1);else if(typeof l=="string")f=od(l,u,N.current)?26:l==="html"||l==="head"||l==="body"?27:5;else l:switch(l){case mt:return l=$l(31,u,t,e),l.elementType=mt,l.lanes=n,l;case Bl:return gu(u.children,e,n,t);case vt:f=8,e|=24;break;case Gl:return l=$l(12,u,t,e|2),l.elementType=Gl,l.lanes=n,l;case L:return l=$l(13,u,t,e),l.elementType=L,l.lanes=n,l;case Cl:return l=$l(19,u,t,e),l.elementType=Cl,l.lanes=n,l;default:if(typeof l=="object"&&l!==null)switch(l.$$typeof){case vu:case Ml:f=10;break l;case At:f=9;break l;case yt:f=11;break l;case Vl:f=14;break l;case Ll:f=16,a=null;break l}f=29,u=Error(r(130,l===null?"null":typeof l,"")),a=null}return t=$l(f,u,t,e),t.elementType=l,t.type=a,t.lanes=n,t}function gu(l,t,u,a){return l=$l(7,l,a,t),l.lanes=u,l}function mf(l,t,u){return l=$l(6,l,null,t),l.lanes=u,l}function rf(l,t,u){return t=$l(4,l.children!==null?l.children:[],l.key,t),t.lanes=u,t.stateNode={containerInfo:l.containerInfo,pendingChildren:null,implementation:l.implementation},t}var Wu=[],$u=0,Xe=null,Qe=0,nt=[],ft=0,bu=null,Dt=1,Ut="";function Tu(l,t){Wu[$u++]=Qe,Wu[$u++]=Xe,Xe=l,Qe=t}function a0(l,t,u){nt[ft++]=Dt,nt[ft++]=Ut,nt[ft++]=bu,bu=l;var a=Dt;l=Ut;var e=32-wl(a)-1;a&=~(1<<e),u+=1;var n=32-wl(t)+e;if(30<n){var f=e-e%5;n=(a&(1<<f)-1).toString(32),a>>=f,e-=f,Dt=1<<32-wl(t)+e|u<<e|a,Ut=n+l}else Dt=1<<n|u<<e|a,Ut=l}function Sf(l){l.return!==null&&(Tu(l,1),a0(l,1,0))}function gf(l){for(;l===Xe;)Xe=Wu[--$u],Wu[$u]=null,Qe=Wu[--$u],Wu[$u]=null;for(;l===bu;)bu=nt[--ft],nt[ft]=null,Ut=nt[--ft],nt[ft]=null,Dt=nt[--ft],nt[ft]=null}var pl=null,sl=null,W=!1,Eu=null,St=!1,bf=Error(r(519));function Au(l){var t=Error(r(418,""));throw Ya(at(t,l)),bf}function e0(l){var t=l.stateNode,u=l.type,a=l.memoizedProps;switch(t[Rl]=l,t[Xl]=a,u){case"dialog":C("cancel",t),C("close",t);break;case"iframe":case"object":case"embed":C("load",t);break;case"video":case"audio":for(u=0;u<ae.length;u++)C(ae[u],t);break;case"source":C("error",t);break;case"img":case"image":case"link":C("error",t),C("load",t);break;case"details":C("toggle",t);break;case"input":C("invalid",t),bi(t,a.value,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name,!0),Oe(t);break;case"select":C("invalid",t);break;case"textarea":C("invalid",t),Ei(t,a.value,a.defaultValue,a.children),Oe(t)}u=a.children,typeof u!="string"&&typeof u!="number"&&typeof u!="bigint"||t.textContent===""+u||a.suppressHydrationWarning===!0||Ev(t.textContent,u)?(a.popover!=null&&(C("beforetoggle",t),C("toggle",t)),a.onScroll!=null&&C("scroll",t),a.onScrollEnd!=null&&C("scrollend",t),a.onClick!=null&&(t.onclick=bn),t=!0):t=!1,t||Au(l)}function n0(l){for(pl=l.return;pl;)switch(pl.tag){case 5:case 13:St=!1;return;case 27:case 3:St=!0;return;default:pl=pl.return}}function Na(l){if(l!==pl)return!1;if(!W)return n0(l),W=!0,!1;var t=l.tag,u;if((u=t!==3&&t!==27)&&((u=t===5)&&(u=l.type,u=!(u!=="form"&&u!=="button")||pc(l.type,l.memoizedProps)),u=!u),u&&sl&&Au(l),n0(l),t===13){if(l=l.memoizedState,l=l!==null?l.dehydrated:null,!l)throw Error(r(317));l:{for(l=l.nextSibling,t=0;l;){if(l.nodeType===8)if(u=l.data,u==="/$"){if(t===0){sl=ot(l.nextSibling);break l}t--}else u!=="$"&&u!=="$!"&&u!=="$?"||t++;l=l.nextSibling}sl=null}}else t===27?(t=sl,eu(l.type)?(l=xc,xc=null,sl=l):sl=t):sl=pl?ot(l.stateNode.nextSibling):null;return!0}function qa(){sl=pl=null,W=!1}function f0(){var l=Eu;return l!==null&&(jl===null?jl=l:jl.push.apply(jl,l),Eu=null),l}function Ya(l){Eu===null?Eu=[l]:Eu.push(l)}var Tf=E(null),zu=null,Rt=null;function Vt(l,t,u){z(Tf,t._currentValue),t._currentValue=u}function Ht(l){l._currentValue=Tf.current,_(Tf)}function Ef(l,t,u){for(;l!==null;){var a=l.alternate;if((l.childLanes&t)!==t?(l.childLanes|=t,a!==null&&(a.childLanes|=t)):a!==null&&(a.childLanes&t)!==t&&(a.childLanes|=t),l===u)break;l=l.return}}function Af(l,t,u,a){var e=l.child;for(e!==null&&(e.return=l);e!==null;){var n=e.dependencies;if(n!==null){var f=e.child;n=n.firstContext;l:for(;n!==null;){var c=n;n=e;for(var i=0;i<t.length;i++)if(c.context===t[i]){n.lanes|=u,c=n.alternate,c!==null&&(c.lanes|=u),Ef(n.return,u,l),a||(f=null);break l}n=c.next}}else if(e.tag===18){if(f=e.return,f===null)throw Error(r(341));f.lanes|=u,n=f.alternate,n!==null&&(n.lanes|=u),Ef(f,u,l),f=null}else f=e.child;if(f!==null)f.return=e;else for(f=e;f!==null;){if(f===l){f=null;break}if(e=f.sibling,e!==null){e.return=f.return,f=e;break}f=f.return}e=f}}function Ba(l,t,u,a){l=null;for(var e=t,n=!1;e!==null;){if(!n){if((e.flags&524288)!==0)n=!0;else if((e.flags&262144)!==0)break}if(e.tag===10){var f=e.alternate;if(f===null)throw Error(r(387));if(f=f.memoizedProps,f!==null){var c=e.type;Wl(e.pendingProps.value,f.value)||(l!==null?l.push(c):l=[c])}}else if(e===Kl.current){if(f=e.alternate,f===null)throw Error(r(387));f.memoizedState.memoizedState!==e.memoizedState.memoizedState&&(l!==null?l.push(se):l=[se])}e=e.return}l!==null&&Af(t,l,u,a),t.flags|=262144}function xe(l){for(l=l.firstContext;l!==null;){if(!Wl(l.context._currentValue,l.memoizedValue))return!0;l=l.next}return!1}function Ou(l){zu=l,Rt=null,l=l.dependencies,l!==null&&(l.firstContext=null)}function Hl(l){return c0(zu,l)}function Ze(l,t){return zu===null&&Ou(l),c0(l,t)}function c0(l,t){var u=t._currentValue;if(t={context:t,memoizedValue:u,next:null},Rt===null){if(l===null)throw Error(r(308));Rt=t,l.dependencies={lanes:0,firstContext:t},l.flags|=524288}else Rt=Rt.next=t;return u}var h1=typeof AbortController<"u"?AbortController:function(){var l=[],t=this.signal={aborted:!1,addEventListener:function(u,a){l.push(a)}};this.abort=function(){t.aborted=!0,l.forEach(function(u){return u()})}},o1=M.unstable_scheduleCallback,m1=M.unstable_NormalPriority,Sl={$$typeof:Ml,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function zf(){return{controller:new h1,data:new Map,refCount:0}}function pa(l){l.refCount--,l.refCount===0&&o1(m1,function(){l.controller.abort()})}var Ga=null,Of=0,ku=0,Fu=null;function r1(l,t){if(Ga===null){var u=Ga=[];Of=0,ku=Mc(),Fu={status:"pending",value:void 0,then:function(a){u.push(a)}}}return Of++,t.then(i0,i0),t}function i0(){if(--Of===0&&Ga!==null){Fu!==null&&(Fu.status="fulfilled");var l=Ga;Ga=null,ku=0,Fu=null;for(var t=0;t<l.length;t++)(0,l[t])()}}function S1(l,t){var u=[],a={status:"pending",value:null,reason:null,then:function(e){u.push(e)}};return l.then(function(){a.status="fulfilled",a.value=t;for(var e=0;e<u.length;e++)(0,u[e])(t)},function(e){for(a.status="rejected",a.reason=e,e=0;e<u.length;e++)(0,u[e])(void 0)}),a}var s0=g.S;g.S=function(l,t){typeof t=="object"&&t!==null&&typeof t.then=="function"&&r1(l,t),s0!==null&&s0(l,t)};var _u=E(null);function _f(){var l=_u.current;return l!==null?l:el.pooledCache}function je(l,t){t===null?z(_u,_u.current):z(_u,t.pool)}function v0(){var l=_f();return l===null?null:{parent:Sl._currentValue,pool:l}}var Xa=Error(r(460)),y0=Error(r(474)),Ce=Error(r(542)),Mf={then:function(){}};function d0(l){return l=l.status,l==="fulfilled"||l==="rejected"}function Ve(){}function h0(l,t,u){switch(u=l[u],u===void 0?l.push(t):u!==t&&(t.then(Ve,Ve),t=u),t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,m0(l),l;default:if(typeof t.status=="string")t.then(Ve,Ve);else{if(l=el,l!==null&&100<l.shellSuspendCounter)throw Error(r(482));l=t,l.status="pending",l.then(function(a){if(t.status==="pending"){var e=t;e.status="fulfilled",e.value=a}},function(a){if(t.status==="pending"){var e=t;e.status="rejected",e.reason=a}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,m0(l),l}throw Qa=t,Xa}}var Qa=null;function o0(){if(Qa===null)throw Error(r(459));var l=Qa;return Qa=null,l}function m0(l){if(l===Xa||l===Ce)throw Error(r(483))}var Lt=!1;function Df(l){l.updateQueue={baseState:l.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Uf(l,t){l=l.updateQueue,t.updateQueue===l&&(t.updateQueue={baseState:l.baseState,firstBaseUpdate:l.firstBaseUpdate,lastBaseUpdate:l.lastBaseUpdate,shared:l.shared,callbacks:null})}function Kt(l){return{lane:l,tag:0,payload:null,callback:null,next:null}}function Jt(l,t,u){var a=l.updateQueue;if(a===null)return null;if(a=a.shared,($&2)!==0){var e=a.pending;return e===null?t.next=t:(t.next=e.next,e.next=t),a.pending=t,t=pe(l),t0(l,null,u),t}return Be(l,a,t,u),pe(l)}function xa(l,t,u){if(t=t.updateQueue,t!==null&&(t=t.shared,(u&4194048)!==0)){var a=t.lanes;a&=l.pendingLanes,u|=a,t.lanes=u,ii(l,u)}}function Rf(l,t){var u=l.updateQueue,a=l.alternate;if(a!==null&&(a=a.updateQueue,u===a)){var e=null,n=null;if(u=u.firstBaseUpdate,u!==null){do{var f={lane:u.lane,tag:u.tag,payload:u.payload,callback:null,next:null};n===null?e=n=f:n=n.next=f,u=u.next}while(u!==null);n===null?e=n=t:n=n.next=t}else e=n=t;u={baseState:a.baseState,firstBaseUpdate:e,lastBaseUpdate:n,shared:a.shared,callbacks:a.callbacks},l.updateQueue=u;return}l=u.lastBaseUpdate,l===null?u.firstBaseUpdate=t:l.next=t,u.lastBaseUpdate=t}var Hf=!1;function Za(){if(Hf){var l=Fu;if(l!==null)throw l}}function ja(l,t,u,a){Hf=!1;var e=l.updateQueue;Lt=!1;var n=e.firstBaseUpdate,f=e.lastBaseUpdate,c=e.shared.pending;if(c!==null){e.shared.pending=null;var i=c,h=i.next;i.next=null,f===null?n=h:f.next=h,f=i;var S=l.alternate;S!==null&&(S=S.updateQueue,c=S.lastBaseUpdate,c!==f&&(c===null?S.firstBaseUpdate=h:c.next=h,S.lastBaseUpdate=i))}if(n!==null){var T=e.baseState;f=0,S=h=i=null,c=n;do{var o=c.lane&-536870913,m=o!==c.lane;if(m?(V&o)===o:(a&o)===o){o!==0&&o===ku&&(Hf=!0),S!==null&&(S=S.next={lane:0,tag:c.tag,payload:c.payload,callback:null,next:null});l:{var p=l,q=c;o=t;var ll=u;switch(q.tag){case 1:if(p=q.payload,typeof p=="function"){T=p.call(ll,T,o);break l}T=p;break l;case 3:p.flags=p.flags&-65537|128;case 0:if(p=q.payload,o=typeof p=="function"?p.call(ll,T,o):p,o==null)break l;T=R({},T,o);break l;case 2:Lt=!0}}o=c.callback,o!==null&&(l.flags|=64,m&&(l.flags|=8192),m=e.callbacks,m===null?e.callbacks=[o]:m.push(o))}else m={lane:o,tag:c.tag,payload:c.payload,callback:c.callback,next:null},S===null?(h=S=m,i=T):S=S.next=m,f|=o;if(c=c.next,c===null){if(c=e.shared.pending,c===null)break;m=c,c=m.next,m.next=null,e.lastBaseUpdate=m,e.shared.pending=null}}while(!0);S===null&&(i=T),e.baseState=i,e.firstBaseUpdate=h,e.lastBaseUpdate=S,n===null&&(e.shared.lanes=0),lu|=f,l.lanes=f,l.memoizedState=T}}function r0(l,t){if(typeof l!="function")throw Error(r(191,l));l.call(t)}function S0(l,t){var u=l.callbacks;if(u!==null)for(l.callbacks=null,l=0;l<u.length;l++)r0(u[l],t)}var Iu=E(null),Le=E(0);function g0(l,t){l=Xt,z(Le,l),z(Iu,t),Xt=l|t.baseLanes}function Nf(){z(Le,Xt),z(Iu,Iu.current)}function qf(){Xt=Le.current,_(Iu),_(Le)}var wt=0,Q=null,I=null,ml=null,Ke=!1,Pu=!1,Mu=!1,Je=0,Ca=0,la=null,g1=0;function hl(){throw Error(r(321))}function Yf(l,t){if(t===null)return!1;for(var u=0;u<t.length&&u<l.length;u++)if(!Wl(l[u],t[u]))return!1;return!0}function Bf(l,t,u,a,e,n){return wt=n,Q=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,g.H=l===null||l.memoizedState===null?ts:us,Mu=!1,n=u(a,e),Mu=!1,Pu&&(n=T0(t,u,a,e)),b0(l),n}function b0(l){g.H=Ie;var t=I!==null&&I.next!==null;if(wt=0,ml=I=Q=null,Ke=!1,Ca=0,la=null,t)throw Error(r(300));l===null||Tl||(l=l.dependencies,l!==null&&xe(l)&&(Tl=!0))}function T0(l,t,u,a){Q=l;var e=0;do{if(Pu&&(la=null),Ca=0,Pu=!1,25<=e)throw Error(r(301));if(e+=1,ml=I=null,l.updateQueue!=null){var n=l.updateQueue;n.lastEffect=null,n.events=null,n.stores=null,n.memoCache!=null&&(n.memoCache.index=0)}g.H=_1,n=t(u,a)}while(Pu);return n}function b1(){var l=g.H,t=l.useState()[0];return t=typeof t.then=="function"?Va(t):t,l=l.useState()[0],(I!==null?I.memoizedState:null)!==l&&(Q.flags|=1024),t}function pf(){var l=Je!==0;return Je=0,l}function Gf(l,t,u){t.updateQueue=l.updateQueue,t.flags&=-2053,l.lanes&=~u}function Xf(l){if(Ke){for(l=l.memoizedState;l!==null;){var t=l.queue;t!==null&&(t.pending=null),l=l.next}Ke=!1}wt=0,ml=I=Q=null,Pu=!1,Ca=Je=0,la=null}function xl(){var l={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ml===null?Q.memoizedState=ml=l:ml=ml.next=l,ml}function rl(){if(I===null){var l=Q.alternate;l=l!==null?l.memoizedState:null}else l=I.next;var t=ml===null?Q.memoizedState:ml.next;if(t!==null)ml=t,I=l;else{if(l===null)throw Q.alternate===null?Error(r(467)):Error(r(310));I=l,l={memoizedState:I.memoizedState,baseState:I.baseState,baseQueue:I.baseQueue,queue:I.queue,next:null},ml===null?Q.memoizedState=ml=l:ml=ml.next=l}return ml}function Qf(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function Va(l){var t=Ca;return Ca+=1,la===null&&(la=[]),l=h0(la,l,t),t=Q,(ml===null?t.memoizedState:ml.next)===null&&(t=t.alternate,g.H=t===null||t.memoizedState===null?ts:us),l}function we(l){if(l!==null&&typeof l=="object"){if(typeof l.then=="function")return Va(l);if(l.$$typeof===Ml)return Hl(l)}throw Error(r(438,String(l)))}function xf(l){var t=null,u=Q.updateQueue;if(u!==null&&(t=u.memoCache),t==null){var a=Q.alternate;a!==null&&(a=a.updateQueue,a!==null&&(a=a.memoCache,a!=null&&(t={data:a.data.map(function(e){return e.slice()}),index:0})))}if(t==null&&(t={data:[],index:0}),u===null&&(u=Qf(),Q.updateQueue=u),u.memoCache=t,u=t.data[t.index],u===void 0)for(u=t.data[t.index]=Array(l),a=0;a<l;a++)u[a]=Nu;return t.index++,u}function Nt(l,t){return typeof t=="function"?t(l):t}function We(l){var t=rl();return Zf(t,I,l)}function Zf(l,t,u){var a=l.queue;if(a===null)throw Error(r(311));a.lastRenderedReducer=u;var e=l.baseQueue,n=a.pending;if(n!==null){if(e!==null){var f=e.next;e.next=n.next,n.next=f}t.baseQueue=e=n,a.pending=null}if(n=l.baseState,e===null)l.memoizedState=n;else{t=e.next;var c=f=null,i=null,h=t,S=!1;do{var T=h.lane&-536870913;if(T!==h.lane?(V&T)===T:(wt&T)===T){var o=h.revertLane;if(o===0)i!==null&&(i=i.next={lane:0,revertLane:0,action:h.action,hasEagerState:h.hasEagerState,eagerState:h.eagerState,next:null}),T===ku&&(S=!0);else if((wt&o)===o){h=h.next,o===ku&&(S=!0);continue}else T={lane:0,revertLane:h.revertLane,action:h.action,hasEagerState:h.hasEagerState,eagerState:h.eagerState,next:null},i===null?(c=i=T,f=n):i=i.next=T,Q.lanes|=o,lu|=o;T=h.action,Mu&&u(n,T),n=h.hasEagerState?h.eagerState:u(n,T)}else o={lane:T,revertLane:h.revertLane,action:h.action,hasEagerState:h.hasEagerState,eagerState:h.eagerState,next:null},i===null?(c=i=o,f=n):i=i.next=o,Q.lanes|=T,lu|=T;h=h.next}while(h!==null&&h!==t);if(i===null?f=n:i.next=c,!Wl(n,l.memoizedState)&&(Tl=!0,S&&(u=Fu,u!==null)))throw u;l.memoizedState=n,l.baseState=f,l.baseQueue=i,a.lastRenderedState=n}return e===null&&(a.lanes=0),[l.memoizedState,a.dispatch]}function jf(l){var t=rl(),u=t.queue;if(u===null)throw Error(r(311));u.lastRenderedReducer=l;var a=u.dispatch,e=u.pending,n=t.memoizedState;if(e!==null){u.pending=null;var f=e=e.next;do n=l(n,f.action),f=f.next;while(f!==e);Wl(n,t.memoizedState)||(Tl=!0),t.memoizedState=n,t.baseQueue===null&&(t.baseState=n),u.lastRenderedState=n}return[n,a]}function E0(l,t,u){var a=Q,e=rl(),n=W;if(n){if(u===void 0)throw Error(r(407));u=u()}else u=t();var f=!Wl((I||e).memoizedState,u);f&&(e.memoizedState=u,Tl=!0),e=e.queue;var c=O0.bind(null,a,e,l);if(La(2048,8,c,[l]),e.getSnapshot!==t||f||ml!==null&&ml.memoizedState.tag&1){if(a.flags|=2048,ta(9,$e(),z0.bind(null,a,e,u,t),null),el===null)throw Error(r(349));n||(wt&124)!==0||A0(a,t,u)}return u}function A0(l,t,u){l.flags|=16384,l={getSnapshot:t,value:u},t=Q.updateQueue,t===null?(t=Qf(),Q.updateQueue=t,t.stores=[l]):(u=t.stores,u===null?t.stores=[l]:u.push(l))}function z0(l,t,u,a){t.value=u,t.getSnapshot=a,_0(t)&&M0(l)}function O0(l,t,u){return u(function(){_0(t)&&M0(l)})}function _0(l){var t=l.getSnapshot;l=l.value;try{var u=t();return!Wl(l,u)}catch{return!0}}function M0(l){var t=Ju(l,2);t!==null&&lt(t,l,2)}function Cf(l){var t=xl();if(typeof l=="function"){var u=l;if(l=u(),Mu){Zt(!0);try{u()}finally{Zt(!1)}}}return t.memoizedState=t.baseState=l,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Nt,lastRenderedState:l},t}function D0(l,t,u,a){return l.baseState=u,Zf(l,I,typeof a=="function"?a:Nt)}function T1(l,t,u,a,e){if(Fe(l))throw Error(r(485));if(l=t.action,l!==null){var n={payload:e,action:l,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(f){n.listeners.push(f)}};g.T!==null?u(!0):n.isTransition=!1,a(n),u=t.pending,u===null?(n.next=t.pending=n,U0(t,n)):(n.next=u.next,t.pending=u.next=n)}}function U0(l,t){var u=t.action,a=t.payload,e=l.state;if(t.isTransition){var n=g.T,f={};g.T=f;try{var c=u(e,a),i=g.S;i!==null&&i(f,c),R0(l,t,c)}catch(h){Vf(l,t,h)}finally{g.T=n}}else try{n=u(e,a),R0(l,t,n)}catch(h){Vf(l,t,h)}}function R0(l,t,u){u!==null&&typeof u=="object"&&typeof u.then=="function"?u.then(function(a){H0(l,t,a)},function(a){return Vf(l,t,a)}):H0(l,t,u)}function H0(l,t,u){t.status="fulfilled",t.value=u,N0(t),l.state=u,t=l.pending,t!==null&&(u=t.next,u===t?l.pending=null:(u=u.next,t.next=u,U0(l,u)))}function Vf(l,t,u){var a=l.pending;if(l.pending=null,a!==null){a=a.next;do t.status="rejected",t.reason=u,N0(t),t=t.next;while(t!==a)}l.action=null}function N0(l){l=l.listeners;for(var t=0;t<l.length;t++)(0,l[t])()}function q0(l,t){return t}function Y0(l,t){if(W){var u=el.formState;if(u!==null){l:{var a=Q;if(W){if(sl){t:{for(var e=sl,n=St;e.nodeType!==8;){if(!n){e=null;break t}if(e=ot(e.nextSibling),e===null){e=null;break t}}n=e.data,e=n==="F!"||n==="F"?e:null}if(e){sl=ot(e.nextSibling),a=e.data==="F!";break l}}Au(a)}a=!1}a&&(t=u[0])}}return u=xl(),u.memoizedState=u.baseState=t,a={pending:null,lanes:0,dispatch:null,lastRenderedReducer:q0,lastRenderedState:t},u.queue=a,u=I0.bind(null,Q,a),a.dispatch=u,a=Cf(!1),n=Wf.bind(null,Q,!1,a.queue),a=xl(),e={state:t,dispatch:null,action:l,pending:null},a.queue=e,u=T1.bind(null,Q,e,n,u),e.dispatch=u,a.memoizedState=l,[t,u,!1]}function B0(l){var t=rl();return p0(t,I,l)}function p0(l,t,u){if(t=Zf(l,t,q0)[0],l=We(Nt)[0],typeof t=="object"&&t!==null&&typeof t.then=="function")try{var a=Va(t)}catch(f){throw f===Xa?Ce:f}else a=t;t=rl();var e=t.queue,n=e.dispatch;return u!==t.memoizedState&&(Q.flags|=2048,ta(9,$e(),E1.bind(null,e,u),null)),[a,n,l]}function E1(l,t){l.action=t}function G0(l){var t=rl(),u=I;if(u!==null)return p0(t,u,l);rl(),t=t.memoizedState,u=rl();var a=u.queue.dispatch;return u.memoizedState=l,[t,a,!1]}function ta(l,t,u,a){return l={tag:l,create:u,deps:a,inst:t,next:null},t=Q.updateQueue,t===null&&(t=Qf(),Q.updateQueue=t),u=t.lastEffect,u===null?t.lastEffect=l.next=l:(a=u.next,u.next=l,l.next=a,t.lastEffect=l),l}function $e(){return{destroy:void 0,resource:void 0}}function X0(){return rl().memoizedState}function ke(l,t,u,a){var e=xl();a=a===void 0?null:a,Q.flags|=l,e.memoizedState=ta(1|t,$e(),u,a)}function La(l,t,u,a){var e=rl();a=a===void 0?null:a;var n=e.memoizedState.inst;I!==null&&a!==null&&Yf(a,I.memoizedState.deps)?e.memoizedState=ta(t,n,u,a):(Q.flags|=l,e.memoizedState=ta(1|t,n,u,a))}function Q0(l,t){ke(8390656,8,l,t)}function x0(l,t){La(2048,8,l,t)}function Z0(l,t){return La(4,2,l,t)}function j0(l,t){return La(4,4,l,t)}function C0(l,t){if(typeof t=="function"){l=l();var u=t(l);return function(){typeof u=="function"?u():t(null)}}if(t!=null)return l=l(),t.current=l,function(){t.current=null}}function V0(l,t,u){u=u!=null?u.concat([l]):null,La(4,4,C0.bind(null,t,l),u)}function Lf(){}function L0(l,t){var u=rl();t=t===void 0?null:t;var a=u.memoizedState;return t!==null&&Yf(t,a[1])?a[0]:(u.memoizedState=[l,t],l)}function K0(l,t){var u=rl();t=t===void 0?null:t;var a=u.memoizedState;if(t!==null&&Yf(t,a[1]))return a[0];if(a=l(),Mu){Zt(!0);try{l()}finally{Zt(!1)}}return u.memoizedState=[a,t],a}function Kf(l,t,u){return u===void 0||(wt&1073741824)!==0?l.memoizedState=t:(l.memoizedState=u,l=Ws(),Q.lanes|=l,lu|=l,u)}function J0(l,t,u,a){return Wl(u,t)?u:Iu.current!==null?(l=Kf(l,u,a),Wl(l,t)||(Tl=!0),l):(wt&42)===0?(Tl=!0,l.memoizedState=u):(l=Ws(),Q.lanes|=l,lu|=l,t)}function w0(l,t,u,a,e){var n=O.p;O.p=n!==0&&8>n?n:8;var f=g.T,c={};g.T=c,Wf(l,!1,t,u);try{var i=e(),h=g.S;if(h!==null&&h(c,i),i!==null&&typeof i=="object"&&typeof i.then=="function"){var S=S1(i,a);Ka(l,t,S,Pl(l))}else Ka(l,t,a,Pl(l))}catch(T){Ka(l,t,{then:function(){},status:"rejected",reason:T},Pl())}finally{O.p=n,g.T=f}}function A1(){}function Jf(l,t,u,a){if(l.tag!==5)throw Error(r(476));var e=W0(l).queue;w0(l,e,t,B,u===null?A1:function(){return $0(l),u(a)})}function W0(l){var t=l.memoizedState;if(t!==null)return t;t={memoizedState:B,baseState:B,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Nt,lastRenderedState:B},next:null};var u={};return t.next={memoizedState:u,baseState:u,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Nt,lastRenderedState:u},next:null},l.memoizedState=t,l=l.alternate,l!==null&&(l.memoizedState=t),t}function $0(l){var t=W0(l).next.queue;Ka(l,t,{},Pl())}function wf(){return Hl(se)}function k0(){return rl().memoizedState}function F0(){return rl().memoizedState}function z1(l){for(var t=l.return;t!==null;){switch(t.tag){case 24:case 3:var u=Pl();l=Kt(u);var a=Jt(t,l,u);a!==null&&(lt(a,t,u),xa(a,t,u)),t={cache:zf()},l.payload=t;return}t=t.return}}function O1(l,t,u){var a=Pl();u={lane:a,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null},Fe(l)?P0(t,u):(u=hf(l,t,u,a),u!==null&&(lt(u,l,a),ls(u,t,a)))}function I0(l,t,u){var a=Pl();Ka(l,t,u,a)}function Ka(l,t,u,a){var e={lane:a,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null};if(Fe(l))P0(t,e);else{var n=l.alternate;if(l.lanes===0&&(n===null||n.lanes===0)&&(n=t.lastRenderedReducer,n!==null))try{var f=t.lastRenderedState,c=n(f,u);if(e.hasEagerState=!0,e.eagerState=c,Wl(c,f))return Be(l,t,e,0),el===null&&Ye(),!1}catch{}finally{}if(u=hf(l,t,e,a),u!==null)return lt(u,l,a),ls(u,t,a),!0}return!1}function Wf(l,t,u,a){if(a={lane:2,revertLane:Mc(),action:a,hasEagerState:!1,eagerState:null,next:null},Fe(l)){if(t)throw Error(r(479))}else t=hf(l,u,a,2),t!==null&&lt(t,l,2)}function Fe(l){var t=l.alternate;return l===Q||t!==null&&t===Q}function P0(l,t){Pu=Ke=!0;var u=l.pending;u===null?t.next=t:(t.next=u.next,u.next=t),l.pending=t}function ls(l,t,u){if((u&4194048)!==0){var a=t.lanes;a&=l.pendingLanes,u|=a,t.lanes=u,ii(l,u)}}var Ie={readContext:Hl,use:we,useCallback:hl,useContext:hl,useEffect:hl,useImperativeHandle:hl,useLayoutEffect:hl,useInsertionEffect:hl,useMemo:hl,useReducer:hl,useRef:hl,useState:hl,useDebugValue:hl,useDeferredValue:hl,useTransition:hl,useSyncExternalStore:hl,useId:hl,useHostTransitionStatus:hl,useFormState:hl,useActionState:hl,useOptimistic:hl,useMemoCache:hl,useCacheRefresh:hl},ts={readContext:Hl,use:we,useCallback:function(l,t){return xl().memoizedState=[l,t===void 0?null:t],l},useContext:Hl,useEffect:Q0,useImperativeHandle:function(l,t,u){u=u!=null?u.concat([l]):null,ke(4194308,4,C0.bind(null,t,l),u)},useLayoutEffect:function(l,t){return ke(4194308,4,l,t)},useInsertionEffect:function(l,t){ke(4,2,l,t)},useMemo:function(l,t){var u=xl();t=t===void 0?null:t;var a=l();if(Mu){Zt(!0);try{l()}finally{Zt(!1)}}return u.memoizedState=[a,t],a},useReducer:function(l,t,u){var a=xl();if(u!==void 0){var e=u(t);if(Mu){Zt(!0);try{u(t)}finally{Zt(!1)}}}else e=t;return a.memoizedState=a.baseState=e,l={pending:null,lanes:0,dispatch:null,lastRenderedReducer:l,lastRenderedState:e},a.queue=l,l=l.dispatch=O1.bind(null,Q,l),[a.memoizedState,l]},useRef:function(l){var t=xl();return l={current:l},t.memoizedState=l},useState:function(l){l=Cf(l);var t=l.queue,u=I0.bind(null,Q,t);return t.dispatch=u,[l.memoizedState,u]},useDebugValue:Lf,useDeferredValue:function(l,t){var u=xl();return Kf(u,l,t)},useTransition:function(){var l=Cf(!1);return l=w0.bind(null,Q,l.queue,!0,!1),xl().memoizedState=l,[!1,l]},useSyncExternalStore:function(l,t,u){var a=Q,e=xl();if(W){if(u===void 0)throw Error(r(407));u=u()}else{if(u=t(),el===null)throw Error(r(349));(V&124)!==0||A0(a,t,u)}e.memoizedState=u;var n={value:u,getSnapshot:t};return e.queue=n,Q0(O0.bind(null,a,n,l),[l]),a.flags|=2048,ta(9,$e(),z0.bind(null,a,n,u,t),null),u},useId:function(){var l=xl(),t=el.identifierPrefix;if(W){var u=Ut,a=Dt;u=(a&~(1<<32-wl(a)-1)).toString(32)+u,t="«"+t+"R"+u,u=Je++,0<u&&(t+="H"+u.toString(32)),t+="»"}else u=g1++,t="«"+t+"r"+u.toString(32)+"»";return l.memoizedState=t},useHostTransitionStatus:wf,useFormState:Y0,useActionState:Y0,useOptimistic:function(l){var t=xl();t.memoizedState=t.baseState=l;var u={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=u,t=Wf.bind(null,Q,!0,u),u.dispatch=t,[l,t]},useMemoCache:xf,useCacheRefresh:function(){return xl().memoizedState=z1.bind(null,Q)}},us={readContext:Hl,use:we,useCallback:L0,useContext:Hl,useEffect:x0,useImperativeHandle:V0,useInsertionEffect:Z0,useLayoutEffect:j0,useMemo:K0,useReducer:We,useRef:X0,useState:function(){return We(Nt)},useDebugValue:Lf,useDeferredValue:function(l,t){var u=rl();return J0(u,I.memoizedState,l,t)},useTransition:function(){var l=We(Nt)[0],t=rl().memoizedState;return[typeof l=="boolean"?l:Va(l),t]},useSyncExternalStore:E0,useId:k0,useHostTransitionStatus:wf,useFormState:B0,useActionState:B0,useOptimistic:function(l,t){var u=rl();return D0(u,I,l,t)},useMemoCache:xf,useCacheRefresh:F0},_1={readContext:Hl,use:we,useCallback:L0,useContext:Hl,useEffect:x0,useImperativeHandle:V0,useInsertionEffect:Z0,useLayoutEffect:j0,useMemo:K0,useReducer:jf,useRef:X0,useState:function(){return jf(Nt)},useDebugValue:Lf,useDeferredValue:function(l,t){var u=rl();return I===null?Kf(u,l,t):J0(u,I.memoizedState,l,t)},useTransition:function(){var l=jf(Nt)[0],t=rl().memoizedState;return[typeof l=="boolean"?l:Va(l),t]},useSyncExternalStore:E0,useId:k0,useHostTransitionStatus:wf,useFormState:G0,useActionState:G0,useOptimistic:function(l,t){var u=rl();return I!==null?D0(u,I,l,t):(u.baseState=l,[l,u.queue.dispatch])},useMemoCache:xf,useCacheRefresh:F0},ua=null,Ja=0;function Pe(l){var t=Ja;return Ja+=1,ua===null&&(ua=[]),h0(ua,l,t)}function wa(l,t){t=t.props.ref,l.ref=t!==void 0?t:null}function ln(l,t){throw t.$$typeof===nl?Error(r(525)):(l=Object.prototype.toString.call(t),Error(r(31,l==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":l)))}function as(l){var t=l._init;return t(l._payload)}function es(l){function t(y,v){if(l){var d=y.deletions;d===null?(y.deletions=[v],y.flags|=16):d.push(v)}}function u(y,v){if(!l)return null;for(;v!==null;)t(y,v),v=v.sibling;return null}function a(y){for(var v=new Map;y!==null;)y.key!==null?v.set(y.key,y):v.set(y.index,y),y=y.sibling;return v}function e(y,v){return y=Mt(y,v),y.index=0,y.sibling=null,y}function n(y,v,d){return y.index=d,l?(d=y.alternate,d!==null?(d=d.index,d<v?(y.flags|=67108866,v):d):(y.flags|=67108866,v)):(y.flags|=1048576,v)}function f(y){return l&&y.alternate===null&&(y.flags|=67108866),y}function c(y,v,d,b){return v===null||v.tag!==6?(v=mf(d,y.mode,b),v.return=y,v):(v=e(v,d),v.return=y,v)}function i(y,v,d,b){var D=d.type;return D===Bl?S(y,v,d.props.children,b,d.key):v!==null&&(v.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Ll&&as(D)===v.type)?(v=e(v,d.props),wa(v,d),v.return=y,v):(v=Ge(d.type,d.key,d.props,null,y.mode,b),wa(v,d),v.return=y,v)}function h(y,v,d,b){return v===null||v.tag!==4||v.stateNode.containerInfo!==d.containerInfo||v.stateNode.implementation!==d.implementation?(v=rf(d,y.mode,b),v.return=y,v):(v=e(v,d.children||[]),v.return=y,v)}function S(y,v,d,b,D){return v===null||v.tag!==7?(v=gu(d,y.mode,b,D),v.return=y,v):(v=e(v,d),v.return=y,v)}function T(y,v,d){if(typeof v=="string"&&v!==""||typeof v=="number"||typeof v=="bigint")return v=mf(""+v,y.mode,d),v.return=y,v;if(typeof v=="object"&&v!==null){switch(v.$$typeof){case al:return d=Ge(v.type,v.key,v.props,null,y.mode,d),wa(d,v),d.return=y,d;case Yl:return v=rf(v,y.mode,d),v.return=y,v;case Ll:var b=v._init;return v=b(v._payload),T(y,v,d)}if(Ul(v)||Dl(v))return v=gu(v,y.mode,d,null),v.return=y,v;if(typeof v.then=="function")return T(y,Pe(v),d);if(v.$$typeof===Ml)return T(y,Ze(y,v),d);ln(y,v)}return null}function o(y,v,d,b){var D=v!==null?v.key:null;if(typeof d=="string"&&d!==""||typeof d=="number"||typeof d=="bigint")return D!==null?null:c(y,v,""+d,b);if(typeof d=="object"&&d!==null){switch(d.$$typeof){case al:return d.key===D?i(y,v,d,b):null;case Yl:return d.key===D?h(y,v,d,b):null;case Ll:return D=d._init,d=D(d._payload),o(y,v,d,b)}if(Ul(d)||Dl(d))return D!==null?null:S(y,v,d,b,null);if(typeof d.then=="function")return o(y,v,Pe(d),b);if(d.$$typeof===Ml)return o(y,v,Ze(y,d),b);ln(y,d)}return null}function m(y,v,d,b,D){if(typeof b=="string"&&b!==""||typeof b=="number"||typeof b=="bigint")return y=y.get(d)||null,c(v,y,""+b,D);if(typeof b=="object"&&b!==null){switch(b.$$typeof){case al:return y=y.get(b.key===null?d:b.key)||null,i(v,y,b,D);case Yl:return y=y.get(b.key===null?d:b.key)||null,h(v,y,b,D);case Ll:var x=b._init;return b=x(b._payload),m(y,v,d,b,D)}if(Ul(b)||Dl(b))return y=y.get(d)||null,S(v,y,b,D,null);if(typeof b.then=="function")return m(y,v,d,Pe(b),D);if(b.$$typeof===Ml)return m(y,v,d,Ze(v,b),D);ln(v,b)}return null}function p(y,v,d,b){for(var D=null,x=null,U=v,Y=v=0,Al=null;U!==null&&Y<d.length;Y++){U.index>Y?(Al=U,U=null):Al=U.sibling;var J=o(y,U,d[Y],b);if(J===null){U===null&&(U=Al);break}l&&U&&J.alternate===null&&t(y,U),v=n(J,v,Y),x===null?D=J:x.sibling=J,x=J,U=Al}if(Y===d.length)return u(y,U),W&&Tu(y,Y),D;if(U===null){for(;Y<d.length;Y++)U=T(y,d[Y],b),U!==null&&(v=n(U,v,Y),x===null?D=U:x.sibling=U,x=U);return W&&Tu(y,Y),D}for(U=a(U);Y<d.length;Y++)Al=m(U,y,Y,d[Y],b),Al!==null&&(l&&Al.alternate!==null&&U.delete(Al.key===null?Y:Al.key),v=n(Al,v,Y),x===null?D=Al:x.sibling=Al,x=Al);return l&&U.forEach(function(su){return t(y,su)}),W&&Tu(y,Y),D}function q(y,v,d,b){if(d==null)throw Error(r(151));for(var D=null,x=null,U=v,Y=v=0,Al=null,J=d.next();U!==null&&!J.done;Y++,J=d.next()){U.index>Y?(Al=U,U=null):Al=U.sibling;var su=o(y,U,J.value,b);if(su===null){U===null&&(U=Al);break}l&&U&&su.alternate===null&&t(y,U),v=n(su,v,Y),x===null?D=su:x.sibling=su,x=su,U=Al}if(J.done)return u(y,U),W&&Tu(y,Y),D;if(U===null){for(;!J.done;Y++,J=d.next())J=T(y,J.value,b),J!==null&&(v=n(J,v,Y),x===null?D=J:x.sibling=J,x=J);return W&&Tu(y,Y),D}for(U=a(U);!J.done;Y++,J=d.next())J=m(U,y,Y,J.value,b),J!==null&&(l&&J.alternate!==null&&U.delete(J.key===null?Y:J.key),v=n(J,v,Y),x===null?D=J:x.sibling=J,x=J);return l&&U.forEach(function(Md){return t(y,Md)}),W&&Tu(y,Y),D}function ll(y,v,d,b){if(typeof d=="object"&&d!==null&&d.type===Bl&&d.key===null&&(d=d.props.children),typeof d=="object"&&d!==null){switch(d.$$typeof){case al:l:{for(var D=d.key;v!==null;){if(v.key===D){if(D=d.type,D===Bl){if(v.tag===7){u(y,v.sibling),b=e(v,d.props.children),b.return=y,y=b;break l}}else if(v.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Ll&&as(D)===v.type){u(y,v.sibling),b=e(v,d.props),wa(b,d),b.return=y,y=b;break l}u(y,v);break}else t(y,v);v=v.sibling}d.type===Bl?(b=gu(d.props.children,y.mode,b,d.key),b.return=y,y=b):(b=Ge(d.type,d.key,d.props,null,y.mode,b),wa(b,d),b.return=y,y=b)}return f(y);case Yl:l:{for(D=d.key;v!==null;){if(v.key===D)if(v.tag===4&&v.stateNode.containerInfo===d.containerInfo&&v.stateNode.implementation===d.implementation){u(y,v.sibling),b=e(v,d.children||[]),b.return=y,y=b;break l}else{u(y,v);break}else t(y,v);v=v.sibling}b=rf(d,y.mode,b),b.return=y,y=b}return f(y);case Ll:return D=d._init,d=D(d._payload),ll(y,v,d,b)}if(Ul(d))return p(y,v,d,b);if(Dl(d)){if(D=Dl(d),typeof D!="function")throw Error(r(150));return d=D.call(d),q(y,v,d,b)}if(typeof d.then=="function")return ll(y,v,Pe(d),b);if(d.$$typeof===Ml)return ll(y,v,Ze(y,d),b);ln(y,d)}return typeof d=="string"&&d!==""||typeof d=="number"||typeof d=="bigint"?(d=""+d,v!==null&&v.tag===6?(u(y,v.sibling),b=e(v,d),b.return=y,y=b):(u(y,v),b=mf(d,y.mode,b),b.return=y,y=b),f(y)):u(y,v)}return function(y,v,d,b){try{Ja=0;var D=ll(y,v,d,b);return ua=null,D}catch(U){if(U===Xa||U===Ce)throw U;var x=$l(29,U,null,y.mode);return x.lanes=b,x.return=y,x}finally{}}}var aa=es(!0),ns=es(!1),ct=E(null),gt=null;function Wt(l){var t=l.alternate;z(gl,gl.current&1),z(ct,l),gt===null&&(t===null||Iu.current!==null||t.memoizedState!==null)&&(gt=l)}function fs(l){if(l.tag===22){if(z(gl,gl.current),z(ct,l),gt===null){var t=l.alternate;t!==null&&t.memoizedState!==null&&(gt=l)}}else $t()}function $t(){z(gl,gl.current),z(ct,ct.current)}function qt(l){_(ct),gt===l&&(gt=null),_(gl)}var gl=E(0);function tn(l){for(var t=l;t!==null;){if(t.tag===13){var u=t.memoizedState;if(u!==null&&(u=u.dehydrated,u===null||u.data==="$?"||Qc(u)))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function $f(l,t,u,a){t=l.memoizedState,u=u(a,t),u=u==null?t:R({},t,u),l.memoizedState=u,l.lanes===0&&(l.updateQueue.baseState=u)}var kf={enqueueSetState:function(l,t,u){l=l._reactInternals;var a=Pl(),e=Kt(a);e.payload=t,u!=null&&(e.callback=u),t=Jt(l,e,a),t!==null&&(lt(t,l,a),xa(t,l,a))},enqueueReplaceState:function(l,t,u){l=l._reactInternals;var a=Pl(),e=Kt(a);e.tag=1,e.payload=t,u!=null&&(e.callback=u),t=Jt(l,e,a),t!==null&&(lt(t,l,a),xa(t,l,a))},enqueueForceUpdate:function(l,t){l=l._reactInternals;var u=Pl(),a=Kt(u);a.tag=2,t!=null&&(a.callback=t),t=Jt(l,a,u),t!==null&&(lt(t,l,u),xa(t,l,u))}};function cs(l,t,u,a,e,n,f){return l=l.stateNode,typeof l.shouldComponentUpdate=="function"?l.shouldComponentUpdate(a,n,f):t.prototype&&t.prototype.isPureReactComponent?!Ra(u,a)||!Ra(e,n):!0}function is(l,t,u,a){l=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(u,a),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(u,a),t.state!==l&&kf.enqueueReplaceState(t,t.state,null)}function Du(l,t){var u=t;if("ref"in t){u={};for(var a in t)a!=="ref"&&(u[a]=t[a])}if(l=l.defaultProps){u===t&&(u=R({},u));for(var e in l)u[e]===void 0&&(u[e]=l[e])}return u}var un=typeof reportError=="function"?reportError:function(l){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof l=="object"&&l!==null&&typeof l.message=="string"?String(l.message):String(l),error:l});if(!window.dispatchEvent(t))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",l);return}console.error(l)};function ss(l){un(l)}function vs(l){console.error(l)}function ys(l){un(l)}function an(l,t){try{var u=l.onUncaughtError;u(t.value,{componentStack:t.stack})}catch(a){setTimeout(function(){throw a})}}function ds(l,t,u){try{var a=l.onCaughtError;a(u.value,{componentStack:u.stack,errorBoundary:t.tag===1?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function Ff(l,t,u){return u=Kt(u),u.tag=3,u.payload={element:null},u.callback=function(){an(l,t)},u}function hs(l){return l=Kt(l),l.tag=3,l}function os(l,t,u,a){var e=u.type.getDerivedStateFromError;if(typeof e=="function"){var n=a.value;l.payload=function(){return e(n)},l.callback=function(){ds(t,u,a)}}var f=u.stateNode;f!==null&&typeof f.componentDidCatch=="function"&&(l.callback=function(){ds(t,u,a),typeof e!="function"&&(tu===null?tu=new Set([this]):tu.add(this));var c=a.stack;this.componentDidCatch(a.value,{componentStack:c!==null?c:""})})}function M1(l,t,u,a,e){if(u.flags|=32768,a!==null&&typeof a=="object"&&typeof a.then=="function"){if(t=u.alternate,t!==null&&Ba(t,u,e,!0),u=ct.current,u!==null){switch(u.tag){case 13:return gt===null?Ec():u.alternate===null&&vl===0&&(vl=3),u.flags&=-257,u.flags|=65536,u.lanes=e,a===Mf?u.flags|=16384:(t=u.updateQueue,t===null?u.updateQueue=new Set([a]):t.add(a),zc(l,a,e)),!1;case 22:return u.flags|=65536,a===Mf?u.flags|=16384:(t=u.updateQueue,t===null?(t={transitions:null,markerInstances:null,retryQueue:new Set([a])},u.updateQueue=t):(u=t.retryQueue,u===null?t.retryQueue=new Set([a]):u.add(a)),zc(l,a,e)),!1}throw Error(r(435,u.tag))}return zc(l,a,e),Ec(),!1}if(W)return t=ct.current,t!==null?((t.flags&65536)===0&&(t.flags|=256),t.flags|=65536,t.lanes=e,a!==bf&&(l=Error(r(422),{cause:a}),Ya(at(l,u)))):(a!==bf&&(t=Error(r(423),{cause:a}),Ya(at(t,u))),l=l.current.alternate,l.flags|=65536,e&=-e,l.lanes|=e,a=at(a,u),e=Ff(l.stateNode,a,e),Rf(l,e),vl!==4&&(vl=2)),!1;var n=Error(r(520),{cause:a});if(n=at(n,u),le===null?le=[n]:le.push(n),vl!==4&&(vl=2),t===null)return!0;a=at(a,u),u=t;do{switch(u.tag){case 3:return u.flags|=65536,l=e&-e,u.lanes|=l,l=Ff(u.stateNode,a,l),Rf(u,l),!1;case 1:if(t=u.type,n=u.stateNode,(u.flags&128)===0&&(typeof t.getDerivedStateFromError=="function"||n!==null&&typeof n.componentDidCatch=="function"&&(tu===null||!tu.has(n))))return u.flags|=65536,e&=-e,u.lanes|=e,e=hs(e),os(e,l,u,a),Rf(u,e),!1}u=u.return}while(u!==null);return!1}var ms=Error(r(461)),Tl=!1;function zl(l,t,u,a){t.child=l===null?ns(t,null,u,a):aa(t,l.child,u,a)}function rs(l,t,u,a,e){u=u.render;var n=t.ref;if("ref"in a){var f={};for(var c in a)c!=="ref"&&(f[c]=a[c])}else f=a;return Ou(t),a=Bf(l,t,u,f,n,e),c=pf(),l!==null&&!Tl?(Gf(l,t,e),Yt(l,t,e)):(W&&c&&Sf(t),t.flags|=1,zl(l,t,a,e),t.child)}function Ss(l,t,u,a,e){if(l===null){var n=u.type;return typeof n=="function"&&!of(n)&&n.defaultProps===void 0&&u.compare===null?(t.tag=15,t.type=n,gs(l,t,n,a,e)):(l=Ge(u.type,null,a,t,t.mode,e),l.ref=t.ref,l.return=t,t.child=l)}if(n=l.child,!nc(l,e)){var f=n.memoizedProps;if(u=u.compare,u=u!==null?u:Ra,u(f,a)&&l.ref===t.ref)return Yt(l,t,e)}return t.flags|=1,l=Mt(n,a),l.ref=t.ref,l.return=t,t.child=l}function gs(l,t,u,a,e){if(l!==null){var n=l.memoizedProps;if(Ra(n,a)&&l.ref===t.ref)if(Tl=!1,t.pendingProps=a=n,nc(l,e))(l.flags&131072)!==0&&(Tl=!0);else return t.lanes=l.lanes,Yt(l,t,e)}return If(l,t,u,a,e)}function bs(l,t,u){var a=t.pendingProps,e=a.children,n=l!==null?l.memoizedState:null;if(a.mode==="hidden"){if((t.flags&128)!==0){if(a=n!==null?n.baseLanes|u:u,l!==null){for(e=t.child=l.child,n=0;e!==null;)n=n|e.lanes|e.childLanes,e=e.sibling;t.childLanes=n&~a}else t.childLanes=0,t.child=null;return Ts(l,t,a,u)}if((u&536870912)!==0)t.memoizedState={baseLanes:0,cachePool:null},l!==null&&je(t,n!==null?n.cachePool:null),n!==null?g0(t,n):Nf(),fs(t);else return t.lanes=t.childLanes=536870912,Ts(l,t,n!==null?n.baseLanes|u:u,u)}else n!==null?(je(t,n.cachePool),g0(t,n),$t(),t.memoizedState=null):(l!==null&&je(t,null),Nf(),$t());return zl(l,t,e,u),t.child}function Ts(l,t,u,a){var e=_f();return e=e===null?null:{parent:Sl._currentValue,pool:e},t.memoizedState={baseLanes:u,cachePool:e},l!==null&&je(t,null),Nf(),fs(t),l!==null&&Ba(l,t,a,!0),null}function en(l,t){var u=t.ref;if(u===null)l!==null&&l.ref!==null&&(t.flags|=4194816);else{if(typeof u!="function"&&typeof u!="object")throw Error(r(284));(l===null||l.ref!==u)&&(t.flags|=4194816)}}function If(l,t,u,a,e){return Ou(t),u=Bf(l,t,u,a,void 0,e),a=pf(),l!==null&&!Tl?(Gf(l,t,e),Yt(l,t,e)):(W&&a&&Sf(t),t.flags|=1,zl(l,t,u,e),t.child)}function Es(l,t,u,a,e,n){return Ou(t),t.updateQueue=null,u=T0(t,a,u,e),b0(l),a=pf(),l!==null&&!Tl?(Gf(l,t,n),Yt(l,t,n)):(W&&a&&Sf(t),t.flags|=1,zl(l,t,u,n),t.child)}function As(l,t,u,a,e){if(Ou(t),t.stateNode===null){var n=wu,f=u.contextType;typeof f=="object"&&f!==null&&(n=Hl(f)),n=new u(a,n),t.memoizedState=n.state!==null&&n.state!==void 0?n.state:null,n.updater=kf,t.stateNode=n,n._reactInternals=t,n=t.stateNode,n.props=a,n.state=t.memoizedState,n.refs={},Df(t),f=u.contextType,n.context=typeof f=="object"&&f!==null?Hl(f):wu,n.state=t.memoizedState,f=u.getDerivedStateFromProps,typeof f=="function"&&($f(t,u,f,a),n.state=t.memoizedState),typeof u.getDerivedStateFromProps=="function"||typeof n.getSnapshotBeforeUpdate=="function"||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(f=n.state,typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount(),f!==n.state&&kf.enqueueReplaceState(n,n.state,null),ja(t,a,n,e),Za(),n.state=t.memoizedState),typeof n.componentDidMount=="function"&&(t.flags|=4194308),a=!0}else if(l===null){n=t.stateNode;var c=t.memoizedProps,i=Du(u,c);n.props=i;var h=n.context,S=u.contextType;f=wu,typeof S=="object"&&S!==null&&(f=Hl(S));var T=u.getDerivedStateFromProps;S=typeof T=="function"||typeof n.getSnapshotBeforeUpdate=="function",c=t.pendingProps!==c,S||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(c||h!==f)&&is(t,n,a,f),Lt=!1;var o=t.memoizedState;n.state=o,ja(t,a,n,e),Za(),h=t.memoizedState,c||o!==h||Lt?(typeof T=="function"&&($f(t,u,T,a),h=t.memoizedState),(i=Lt||cs(t,u,i,a,o,h,f))?(S||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount()),typeof n.componentDidMount=="function"&&(t.flags|=4194308)):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=a,t.memoizedState=h),n.props=a,n.state=h,n.context=f,a=i):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),a=!1)}else{n=t.stateNode,Uf(l,t),f=t.memoizedProps,S=Du(u,f),n.props=S,T=t.pendingProps,o=n.context,h=u.contextType,i=wu,typeof h=="object"&&h!==null&&(i=Hl(h)),c=u.getDerivedStateFromProps,(h=typeof c=="function"||typeof n.getSnapshotBeforeUpdate=="function")||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(f!==T||o!==i)&&is(t,n,a,i),Lt=!1,o=t.memoizedState,n.state=o,ja(t,a,n,e),Za();var m=t.memoizedState;f!==T||o!==m||Lt||l!==null&&l.dependencies!==null&&xe(l.dependencies)?(typeof c=="function"&&($f(t,u,c,a),m=t.memoizedState),(S=Lt||cs(t,u,S,a,o,m,i)||l!==null&&l.dependencies!==null&&xe(l.dependencies))?(h||typeof n.UNSAFE_componentWillUpdate!="function"&&typeof n.componentWillUpdate!="function"||(typeof n.componentWillUpdate=="function"&&n.componentWillUpdate(a,m,i),typeof n.UNSAFE_componentWillUpdate=="function"&&n.UNSAFE_componentWillUpdate(a,m,i)),typeof n.componentDidUpdate=="function"&&(t.flags|=4),typeof n.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof n.componentDidUpdate!="function"||f===l.memoizedProps&&o===l.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||f===l.memoizedProps&&o===l.memoizedState||(t.flags|=1024),t.memoizedProps=a,t.memoizedState=m),n.props=a,n.state=m,n.context=i,a=S):(typeof n.componentDidUpdate!="function"||f===l.memoizedProps&&o===l.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||f===l.memoizedProps&&o===l.memoizedState||(t.flags|=1024),a=!1)}return n=a,en(l,t),a=(t.flags&128)!==0,n||a?(n=t.stateNode,u=a&&typeof u.getDerivedStateFromError!="function"?null:n.render(),t.flags|=1,l!==null&&a?(t.child=aa(t,l.child,null,e),t.child=aa(t,null,u,e)):zl(l,t,u,e),t.memoizedState=n.state,l=t.child):l=Yt(l,t,e),l}function zs(l,t,u,a){return qa(),t.flags|=256,zl(l,t,u,a),t.child}var Pf={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function lc(l){return{baseLanes:l,cachePool:v0()}}function tc(l,t,u){return l=l!==null?l.childLanes&~u:0,t&&(l|=it),l}function Os(l,t,u){var a=t.pendingProps,e=!1,n=(t.flags&128)!==0,f;if((f=n)||(f=l!==null&&l.memoizedState===null?!1:(gl.current&2)!==0),f&&(e=!0,t.flags&=-129),f=(t.flags&32)!==0,t.flags&=-33,l===null){if(W){if(e?Wt(t):$t(),W){var c=sl,i;if(i=c){l:{for(i=c,c=St;i.nodeType!==8;){if(!c){c=null;break l}if(i=ot(i.nextSibling),i===null){c=null;break l}}c=i}c!==null?(t.memoizedState={dehydrated:c,treeContext:bu!==null?{id:Dt,overflow:Ut}:null,retryLane:536870912,hydrationErrors:null},i=$l(18,null,null,0),i.stateNode=c,i.return=t,t.child=i,pl=t,sl=null,i=!0):i=!1}i||Au(t)}if(c=t.memoizedState,c!==null&&(c=c.dehydrated,c!==null))return Qc(c)?t.lanes=32:t.lanes=536870912,null;qt(t)}return c=a.children,a=a.fallback,e?($t(),e=t.mode,c=nn({mode:"hidden",children:c},e),a=gu(a,e,u,null),c.return=t,a.return=t,c.sibling=a,t.child=c,e=t.child,e.memoizedState=lc(u),e.childLanes=tc(l,f,u),t.memoizedState=Pf,a):(Wt(t),uc(t,c))}if(i=l.memoizedState,i!==null&&(c=i.dehydrated,c!==null)){if(n)t.flags&256?(Wt(t),t.flags&=-257,t=ac(l,t,u)):t.memoizedState!==null?($t(),t.child=l.child,t.flags|=128,t=null):($t(),e=a.fallback,c=t.mode,a=nn({mode:"visible",children:a.children},c),e=gu(e,c,u,null),e.flags|=2,a.return=t,e.return=t,a.sibling=e,t.child=a,aa(t,l.child,null,u),a=t.child,a.memoizedState=lc(u),a.childLanes=tc(l,f,u),t.memoizedState=Pf,t=e);else if(Wt(t),Qc(c)){if(f=c.nextSibling&&c.nextSibling.dataset,f)var h=f.dgst;f=h,a=Error(r(419)),a.stack="",a.digest=f,Ya({value:a,source:null,stack:null}),t=ac(l,t,u)}else if(Tl||Ba(l,t,u,!1),f=(u&l.childLanes)!==0,Tl||f){if(f=el,f!==null&&(a=u&-u,a=(a&42)!==0?1:Qn(a),a=(a&(f.suspendedLanes|u))!==0?0:a,a!==0&&a!==i.retryLane))throw i.retryLane=a,Ju(l,a),lt(f,l,a),ms;c.data==="$?"||Ec(),t=ac(l,t,u)}else c.data==="$?"?(t.flags|=192,t.child=l.child,t=null):(l=i.treeContext,sl=ot(c.nextSibling),pl=t,W=!0,Eu=null,St=!1,l!==null&&(nt[ft++]=Dt,nt[ft++]=Ut,nt[ft++]=bu,Dt=l.id,Ut=l.overflow,bu=t),t=uc(t,a.children),t.flags|=4096);return t}return e?($t(),e=a.fallback,c=t.mode,i=l.child,h=i.sibling,a=Mt(i,{mode:"hidden",children:a.children}),a.subtreeFlags=i.subtreeFlags&65011712,h!==null?e=Mt(h,e):(e=gu(e,c,u,null),e.flags|=2),e.return=t,a.return=t,a.sibling=e,t.child=a,a=e,e=t.child,c=l.child.memoizedState,c===null?c=lc(u):(i=c.cachePool,i!==null?(h=Sl._currentValue,i=i.parent!==h?{parent:h,pool:h}:i):i=v0(),c={baseLanes:c.baseLanes|u,cachePool:i}),e.memoizedState=c,e.childLanes=tc(l,f,u),t.memoizedState=Pf,a):(Wt(t),u=l.child,l=u.sibling,u=Mt(u,{mode:"visible",children:a.children}),u.return=t,u.sibling=null,l!==null&&(f=t.deletions,f===null?(t.deletions=[l],t.flags|=16):f.push(l)),t.child=u,t.memoizedState=null,u)}function uc(l,t){return t=nn({mode:"visible",children:t},l.mode),t.return=l,l.child=t}function nn(l,t){return l=$l(22,l,null,t),l.lanes=0,l.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},l}function ac(l,t,u){return aa(t,l.child,null,u),l=uc(t,t.pendingProps.children),l.flags|=2,t.memoizedState=null,l}function _s(l,t,u){l.lanes|=t;var a=l.alternate;a!==null&&(a.lanes|=t),Ef(l.return,t,u)}function ec(l,t,u,a,e){var n=l.memoizedState;n===null?l.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:u,tailMode:e}:(n.isBackwards=t,n.rendering=null,n.renderingStartTime=0,n.last=a,n.tail=u,n.tailMode=e)}function Ms(l,t,u){var a=t.pendingProps,e=a.revealOrder,n=a.tail;if(zl(l,t,a.children,u),a=gl.current,(a&2)!==0)a=a&1|2,t.flags|=128;else{if(l!==null&&(l.flags&128)!==0)l:for(l=t.child;l!==null;){if(l.tag===13)l.memoizedState!==null&&_s(l,u,t);else if(l.tag===19)_s(l,u,t);else if(l.child!==null){l.child.return=l,l=l.child;continue}if(l===t)break l;for(;l.sibling===null;){if(l.return===null||l.return===t)break l;l=l.return}l.sibling.return=l.return,l=l.sibling}a&=1}switch(z(gl,a),e){case"forwards":for(u=t.child,e=null;u!==null;)l=u.alternate,l!==null&&tn(l)===null&&(e=u),u=u.sibling;u=e,u===null?(e=t.child,t.child=null):(e=u.sibling,u.sibling=null),ec(t,!1,e,u,n);break;case"backwards":for(u=null,e=t.child,t.child=null;e!==null;){if(l=e.alternate,l!==null&&tn(l)===null){t.child=e;break}l=e.sibling,e.sibling=u,u=e,e=l}ec(t,!0,u,null,n);break;case"together":ec(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Yt(l,t,u){if(l!==null&&(t.dependencies=l.dependencies),lu|=t.lanes,(u&t.childLanes)===0)if(l!==null){if(Ba(l,t,u,!1),(u&t.childLanes)===0)return null}else return null;if(l!==null&&t.child!==l.child)throw Error(r(153));if(t.child!==null){for(l=t.child,u=Mt(l,l.pendingProps),t.child=u,u.return=t;l.sibling!==null;)l=l.sibling,u=u.sibling=Mt(l,l.pendingProps),u.return=t;u.sibling=null}return t.child}function nc(l,t){return(l.lanes&t)!==0?!0:(l=l.dependencies,!!(l!==null&&xe(l)))}function D1(l,t,u){switch(t.tag){case 3:fl(t,t.stateNode.containerInfo),Vt(t,Sl,l.memoizedState.cache),qa();break;case 27:case 5:Yn(t);break;case 4:fl(t,t.stateNode.containerInfo);break;case 10:Vt(t,t.type,t.memoizedProps.value);break;case 13:var a=t.memoizedState;if(a!==null)return a.dehydrated!==null?(Wt(t),t.flags|=128,null):(u&t.child.childLanes)!==0?Os(l,t,u):(Wt(t),l=Yt(l,t,u),l!==null?l.sibling:null);Wt(t);break;case 19:var e=(l.flags&128)!==0;if(a=(u&t.childLanes)!==0,a||(Ba(l,t,u,!1),a=(u&t.childLanes)!==0),e){if(a)return Ms(l,t,u);t.flags|=128}if(e=t.memoizedState,e!==null&&(e.rendering=null,e.tail=null,e.lastEffect=null),z(gl,gl.current),a)break;return null;case 22:case 23:return t.lanes=0,bs(l,t,u);case 24:Vt(t,Sl,l.memoizedState.cache)}return Yt(l,t,u)}function Ds(l,t,u){if(l!==null)if(l.memoizedProps!==t.pendingProps)Tl=!0;else{if(!nc(l,u)&&(t.flags&128)===0)return Tl=!1,D1(l,t,u);Tl=(l.flags&131072)!==0}else Tl=!1,W&&(t.flags&1048576)!==0&&a0(t,Qe,t.index);switch(t.lanes=0,t.tag){case 16:l:{l=t.pendingProps;var a=t.elementType,e=a._init;if(a=e(a._payload),t.type=a,typeof a=="function")of(a)?(l=Du(a,l),t.tag=1,t=As(null,t,a,l,u)):(t.tag=0,t=If(null,t,a,l,u));else{if(a!=null){if(e=a.$$typeof,e===yt){t.tag=11,t=rs(null,t,a,l,u);break l}else if(e===Vl){t.tag=14,t=Ss(null,t,a,l,u);break l}}throw t=du(a)||a,Error(r(306,t,""))}}return t;case 0:return If(l,t,t.type,t.pendingProps,u);case 1:return a=t.type,e=Du(a,t.pendingProps),As(l,t,a,e,u);case 3:l:{if(fl(t,t.stateNode.containerInfo),l===null)throw Error(r(387));a=t.pendingProps;var n=t.memoizedState;e=n.element,Uf(l,t),ja(t,a,null,u);var f=t.memoizedState;if(a=f.cache,Vt(t,Sl,a),a!==n.cache&&Af(t,[Sl],u,!0),Za(),a=f.element,n.isDehydrated)if(n={element:a,isDehydrated:!1,cache:f.cache},t.updateQueue.baseState=n,t.memoizedState=n,t.flags&256){t=zs(l,t,a,u);break l}else if(a!==e){e=at(Error(r(424)),t),Ya(e),t=zs(l,t,a,u);break l}else{switch(l=t.stateNode.containerInfo,l.nodeType){case 9:l=l.body;break;default:l=l.nodeName==="HTML"?l.ownerDocument.body:l}for(sl=ot(l.firstChild),pl=t,W=!0,Eu=null,St=!0,u=ns(t,null,a,u),t.child=u;u;)u.flags=u.flags&-3|4096,u=u.sibling}else{if(qa(),a===e){t=Yt(l,t,u);break l}zl(l,t,a,u)}t=t.child}return t;case 26:return en(l,t),l===null?(u=Nv(t.type,null,t.pendingProps,null))?t.memoizedState=u:W||(u=t.type,l=t.pendingProps,a=Tn(G.current).createElement(u),a[Rl]=t,a[Xl]=l,_l(a,u,l),bl(a),t.stateNode=a):t.memoizedState=Nv(t.type,l.memoizedProps,t.pendingProps,l.memoizedState),null;case 27:return Yn(t),l===null&&W&&(a=t.stateNode=Uv(t.type,t.pendingProps,G.current),pl=t,St=!0,e=sl,eu(t.type)?(xc=e,sl=ot(a.firstChild)):sl=e),zl(l,t,t.pendingProps.children,u),en(l,t),l===null&&(t.flags|=4194304),t.child;case 5:return l===null&&W&&((e=a=sl)&&(a=td(a,t.type,t.pendingProps,St),a!==null?(t.stateNode=a,pl=t,sl=ot(a.firstChild),St=!1,e=!0):e=!1),e||Au(t)),Yn(t),e=t.type,n=t.pendingProps,f=l!==null?l.memoizedProps:null,a=n.children,pc(e,n)?a=null:f!==null&&pc(e,f)&&(t.flags|=32),t.memoizedState!==null&&(e=Bf(l,t,b1,null,null,u),se._currentValue=e),en(l,t),zl(l,t,a,u),t.child;case 6:return l===null&&W&&((l=u=sl)&&(u=ud(u,t.pendingProps,St),u!==null?(t.stateNode=u,pl=t,sl=null,l=!0):l=!1),l||Au(t)),null;case 13:return Os(l,t,u);case 4:return fl(t,t.stateNode.containerInfo),a=t.pendingProps,l===null?t.child=aa(t,null,a,u):zl(l,t,a,u),t.child;case 11:return rs(l,t,t.type,t.pendingProps,u);case 7:return zl(l,t,t.pendingProps,u),t.child;case 8:return zl(l,t,t.pendingProps.children,u),t.child;case 12:return zl(l,t,t.pendingProps.children,u),t.child;case 10:return a=t.pendingProps,Vt(t,t.type,a.value),zl(l,t,a.children,u),t.child;case 9:return e=t.type._context,a=t.pendingProps.children,Ou(t),e=Hl(e),a=a(e),t.flags|=1,zl(l,t,a,u),t.child;case 14:return Ss(l,t,t.type,t.pendingProps,u);case 15:return gs(l,t,t.type,t.pendingProps,u);case 19:return Ms(l,t,u);case 31:return a=t.pendingProps,u=t.mode,a={mode:a.mode,children:a.children},l===null?(u=nn(a,u),u.ref=t.ref,t.child=u,u.return=t,t=u):(u=Mt(l.child,a),u.ref=t.ref,t.child=u,u.return=t,t=u),t;case 22:return bs(l,t,u);case 24:return Ou(t),a=Hl(Sl),l===null?(e=_f(),e===null&&(e=el,n=zf(),e.pooledCache=n,n.refCount++,n!==null&&(e.pooledCacheLanes|=u),e=n),t.memoizedState={parent:a,cache:e},Df(t),Vt(t,Sl,e)):((l.lanes&u)!==0&&(Uf(l,t),ja(t,null,null,u),Za()),e=l.memoizedState,n=t.memoizedState,e.parent!==a?(e={parent:a,cache:a},t.memoizedState=e,t.lanes===0&&(t.memoizedState=t.updateQueue.baseState=e),Vt(t,Sl,a)):(a=n.cache,Vt(t,Sl,a),a!==e.cache&&Af(t,[Sl],u,!0))),zl(l,t,t.pendingProps.children,u),t.child;case 29:throw t.pendingProps}throw Error(r(156,t.tag))}function Bt(l){l.flags|=4}function Us(l,t){if(t.type!=="stylesheet"||(t.state.loading&4)!==0)l.flags&=-16777217;else if(l.flags|=16777216,!Gv(t)){if(t=ct.current,t!==null&&((V&4194048)===V?gt!==null:(V&62914560)!==V&&(V&536870912)===0||t!==gt))throw Qa=Mf,y0;l.flags|=8192}}function fn(l,t){t!==null&&(l.flags|=4),l.flags&16384&&(t=l.tag!==22?fi():536870912,l.lanes|=t,ca|=t)}function Wa(l,t){if(!W)switch(l.tailMode){case"hidden":t=l.tail;for(var u=null;t!==null;)t.alternate!==null&&(u=t),t=t.sibling;u===null?l.tail=null:u.sibling=null;break;case"collapsed":u=l.tail;for(var a=null;u!==null;)u.alternate!==null&&(a=u),u=u.sibling;a===null?t||l.tail===null?l.tail=null:l.tail.sibling=null:a.sibling=null}}function il(l){var t=l.alternate!==null&&l.alternate.child===l.child,u=0,a=0;if(t)for(var e=l.child;e!==null;)u|=e.lanes|e.childLanes,a|=e.subtreeFlags&65011712,a|=e.flags&65011712,e.return=l,e=e.sibling;else for(e=l.child;e!==null;)u|=e.lanes|e.childLanes,a|=e.subtreeFlags,a|=e.flags,e.return=l,e=e.sibling;return l.subtreeFlags|=a,l.childLanes=u,t}function U1(l,t,u){var a=t.pendingProps;switch(gf(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return il(t),null;case 1:return il(t),null;case 3:return u=t.stateNode,a=null,l!==null&&(a=l.memoizedState.cache),t.memoizedState.cache!==a&&(t.flags|=2048),Ht(Sl),xt(),u.pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),(l===null||l.child===null)&&(Na(t)?Bt(t):l===null||l.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,f0())),il(t),null;case 26:return u=t.memoizedState,l===null?(Bt(t),u!==null?(il(t),Us(t,u)):(il(t),t.flags&=-16777217)):u?u!==l.memoizedState?(Bt(t),il(t),Us(t,u)):(il(t),t.flags&=-16777217):(l.memoizedProps!==a&&Bt(t),il(t),t.flags&=-16777217),null;case 27:Se(t),u=G.current;var e=t.type;if(l!==null&&t.stateNode!=null)l.memoizedProps!==a&&Bt(t);else{if(!a){if(t.stateNode===null)throw Error(r(166));return il(t),null}l=N.current,Na(t)?e0(t):(l=Uv(e,a,u),t.stateNode=l,Bt(t))}return il(t),null;case 5:if(Se(t),u=t.type,l!==null&&t.stateNode!=null)l.memoizedProps!==a&&Bt(t);else{if(!a){if(t.stateNode===null)throw Error(r(166));return il(t),null}if(l=N.current,Na(t))e0(t);else{switch(e=Tn(G.current),l){case 1:l=e.createElementNS("http://www.w3.org/2000/svg",u);break;case 2:l=e.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;default:switch(u){case"svg":l=e.createElementNS("http://www.w3.org/2000/svg",u);break;case"math":l=e.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;case"script":l=e.createElement("div"),l.innerHTML="<script><\/script>",l=l.removeChild(l.firstChild);break;case"select":l=typeof a.is=="string"?e.createElement("select",{is:a.is}):e.createElement("select"),a.multiple?l.multiple=!0:a.size&&(l.size=a.size);break;default:l=typeof a.is=="string"?e.createElement(u,{is:a.is}):e.createElement(u)}}l[Rl]=t,l[Xl]=a;l:for(e=t.child;e!==null;){if(e.tag===5||e.tag===6)l.appendChild(e.stateNode);else if(e.tag!==4&&e.tag!==27&&e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break l;for(;e.sibling===null;){if(e.return===null||e.return===t)break l;e=e.return}e.sibling.return=e.return,e=e.sibling}t.stateNode=l;l:switch(_l(l,u,a),u){case"button":case"input":case"select":case"textarea":l=!!a.autoFocus;break l;case"img":l=!0;break l;default:l=!1}l&&Bt(t)}}return il(t),t.flags&=-16777217,null;case 6:if(l&&t.stateNode!=null)l.memoizedProps!==a&&Bt(t);else{if(typeof a!="string"&&t.stateNode===null)throw Error(r(166));if(l=G.current,Na(t)){if(l=t.stateNode,u=t.memoizedProps,a=null,e=pl,e!==null)switch(e.tag){case 27:case 5:a=e.memoizedProps}l[Rl]=t,l=!!(l.nodeValue===u||a!==null&&a.suppressHydrationWarning===!0||Ev(l.nodeValue,u)),l||Au(t)}else l=Tn(l).createTextNode(a),l[Rl]=t,t.stateNode=l}return il(t),null;case 13:if(a=t.memoizedState,l===null||l.memoizedState!==null&&l.memoizedState.dehydrated!==null){if(e=Na(t),a!==null&&a.dehydrated!==null){if(l===null){if(!e)throw Error(r(318));if(e=t.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(r(317));e[Rl]=t}else qa(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;il(t),e=!1}else e=f0(),l!==null&&l.memoizedState!==null&&(l.memoizedState.hydrationErrors=e),e=!0;if(!e)return t.flags&256?(qt(t),t):(qt(t),null)}if(qt(t),(t.flags&128)!==0)return t.lanes=u,t;if(u=a!==null,l=l!==null&&l.memoizedState!==null,u){a=t.child,e=null,a.alternate!==null&&a.alternate.memoizedState!==null&&a.alternate.memoizedState.cachePool!==null&&(e=a.alternate.memoizedState.cachePool.pool);var n=null;a.memoizedState!==null&&a.memoizedState.cachePool!==null&&(n=a.memoizedState.cachePool.pool),n!==e&&(a.flags|=2048)}return u!==l&&u&&(t.child.flags|=8192),fn(t,t.updateQueue),il(t),null;case 4:return xt(),l===null&&Hc(t.stateNode.containerInfo),il(t),null;case 10:return Ht(t.type),il(t),null;case 19:if(_(gl),e=t.memoizedState,e===null)return il(t),null;if(a=(t.flags&128)!==0,n=e.rendering,n===null)if(a)Wa(e,!1);else{if(vl!==0||l!==null&&(l.flags&128)!==0)for(l=t.child;l!==null;){if(n=tn(l),n!==null){for(t.flags|=128,Wa(e,!1),l=n.updateQueue,t.updateQueue=l,fn(t,l),t.subtreeFlags=0,l=u,u=t.child;u!==null;)u0(u,l),u=u.sibling;return z(gl,gl.current&1|2),t.child}l=l.sibling}e.tail!==null&&rt()>vn&&(t.flags|=128,a=!0,Wa(e,!1),t.lanes=4194304)}else{if(!a)if(l=tn(n),l!==null){if(t.flags|=128,a=!0,l=l.updateQueue,t.updateQueue=l,fn(t,l),Wa(e,!0),e.tail===null&&e.tailMode==="hidden"&&!n.alternate&&!W)return il(t),null}else 2*rt()-e.renderingStartTime>vn&&u!==536870912&&(t.flags|=128,a=!0,Wa(e,!1),t.lanes=4194304);e.isBackwards?(n.sibling=t.child,t.child=n):(l=e.last,l!==null?l.sibling=n:t.child=n,e.last=n)}return e.tail!==null?(t=e.tail,e.rendering=t,e.tail=t.sibling,e.renderingStartTime=rt(),t.sibling=null,l=gl.current,z(gl,a?l&1|2:l&1),t):(il(t),null);case 22:case 23:return qt(t),qf(),a=t.memoizedState!==null,l!==null?l.memoizedState!==null!==a&&(t.flags|=8192):a&&(t.flags|=8192),a?(u&536870912)!==0&&(t.flags&128)===0&&(il(t),t.subtreeFlags&6&&(t.flags|=8192)):il(t),u=t.updateQueue,u!==null&&fn(t,u.retryQueue),u=null,l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),a=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(a=t.memoizedState.cachePool.pool),a!==u&&(t.flags|=2048),l!==null&&_(_u),null;case 24:return u=null,l!==null&&(u=l.memoizedState.cache),t.memoizedState.cache!==u&&(t.flags|=2048),Ht(Sl),il(t),null;case 25:return null;case 30:return null}throw Error(r(156,t.tag))}function R1(l,t){switch(gf(t),t.tag){case 1:return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 3:return Ht(Sl),xt(),l=t.flags,(l&65536)!==0&&(l&128)===0?(t.flags=l&-65537|128,t):null;case 26:case 27:case 5:return Se(t),null;case 13:if(qt(t),l=t.memoizedState,l!==null&&l.dehydrated!==null){if(t.alternate===null)throw Error(r(340));qa()}return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 19:return _(gl),null;case 4:return xt(),null;case 10:return Ht(t.type),null;case 22:case 23:return qt(t),qf(),l!==null&&_(_u),l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 24:return Ht(Sl),null;case 25:return null;default:return null}}function Rs(l,t){switch(gf(t),t.tag){case 3:Ht(Sl),xt();break;case 26:case 27:case 5:Se(t);break;case 4:xt();break;case 13:qt(t);break;case 19:_(gl);break;case 10:Ht(t.type);break;case 22:case 23:qt(t),qf(),l!==null&&_(_u);break;case 24:Ht(Sl)}}function $a(l,t){try{var u=t.updateQueue,a=u!==null?u.lastEffect:null;if(a!==null){var e=a.next;u=e;do{if((u.tag&l)===l){a=void 0;var n=u.create,f=u.inst;a=n(),f.destroy=a}u=u.next}while(u!==e)}}catch(c){ul(t,t.return,c)}}function kt(l,t,u){try{var a=t.updateQueue,e=a!==null?a.lastEffect:null;if(e!==null){var n=e.next;a=n;do{if((a.tag&l)===l){var f=a.inst,c=f.destroy;if(c!==void 0){f.destroy=void 0,e=t;var i=u,h=c;try{h()}catch(S){ul(e,i,S)}}}a=a.next}while(a!==n)}}catch(S){ul(t,t.return,S)}}function Hs(l){var t=l.updateQueue;if(t!==null){var u=l.stateNode;try{S0(t,u)}catch(a){ul(l,l.return,a)}}}function Ns(l,t,u){u.props=Du(l.type,l.memoizedProps),u.state=l.memoizedState;try{u.componentWillUnmount()}catch(a){ul(l,t,a)}}function ka(l,t){try{var u=l.ref;if(u!==null){switch(l.tag){case 26:case 27:case 5:var a=l.stateNode;break;case 30:a=l.stateNode;break;default:a=l.stateNode}typeof u=="function"?l.refCleanup=u(a):u.current=a}}catch(e){ul(l,t,e)}}function bt(l,t){var u=l.ref,a=l.refCleanup;if(u!==null)if(typeof a=="function")try{a()}catch(e){ul(l,t,e)}finally{l.refCleanup=null,l=l.alternate,l!=null&&(l.refCleanup=null)}else if(typeof u=="function")try{u(null)}catch(e){ul(l,t,e)}else u.current=null}function qs(l){var t=l.type,u=l.memoizedProps,a=l.stateNode;try{l:switch(t){case"button":case"input":case"select":case"textarea":u.autoFocus&&a.focus();break l;case"img":u.src?a.src=u.src:u.srcSet&&(a.srcset=u.srcSet)}}catch(e){ul(l,l.return,e)}}function fc(l,t,u){try{var a=l.stateNode;k1(a,l.type,u,t),a[Xl]=t}catch(e){ul(l,l.return,e)}}function Ys(l){return l.tag===5||l.tag===3||l.tag===26||l.tag===27&&eu(l.type)||l.tag===4}function cc(l){l:for(;;){for(;l.sibling===null;){if(l.return===null||Ys(l.return))return null;l=l.return}for(l.sibling.return=l.return,l=l.sibling;l.tag!==5&&l.tag!==6&&l.tag!==18;){if(l.tag===27&&eu(l.type)||l.flags&2||l.child===null||l.tag===4)continue l;l.child.return=l,l=l.child}if(!(l.flags&2))return l.stateNode}}function ic(l,t,u){var a=l.tag;if(a===5||a===6)l=l.stateNode,t?(u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u).insertBefore(l,t):(t=u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u,t.appendChild(l),u=u._reactRootContainer,u!=null||t.onclick!==null||(t.onclick=bn));else if(a!==4&&(a===27&&eu(l.type)&&(u=l.stateNode,t=null),l=l.child,l!==null))for(ic(l,t,u),l=l.sibling;l!==null;)ic(l,t,u),l=l.sibling}function cn(l,t,u){var a=l.tag;if(a===5||a===6)l=l.stateNode,t?u.insertBefore(l,t):u.appendChild(l);else if(a!==4&&(a===27&&eu(l.type)&&(u=l.stateNode),l=l.child,l!==null))for(cn(l,t,u),l=l.sibling;l!==null;)cn(l,t,u),l=l.sibling}function Bs(l){var t=l.stateNode,u=l.memoizedProps;try{for(var a=l.type,e=t.attributes;e.length;)t.removeAttributeNode(e[0]);_l(t,a,u),t[Rl]=l,t[Xl]=u}catch(n){ul(l,l.return,n)}}var pt=!1,ol=!1,sc=!1,ps=typeof WeakSet=="function"?WeakSet:Set,El=null;function H1(l,t){if(l=l.containerInfo,Yc=Mn,l=Ji(l),ff(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else l:{u=(u=l.ownerDocument)&&u.defaultView||window;var a=u.getSelection&&u.getSelection();if(a&&a.rangeCount!==0){u=a.anchorNode;var e=a.anchorOffset,n=a.focusNode;a=a.focusOffset;try{u.nodeType,n.nodeType}catch{u=null;break l}var f=0,c=-1,i=-1,h=0,S=0,T=l,o=null;t:for(;;){for(var m;T!==u||e!==0&&T.nodeType!==3||(c=f+e),T!==n||a!==0&&T.nodeType!==3||(i=f+a),T.nodeType===3&&(f+=T.nodeValue.length),(m=T.firstChild)!==null;)o=T,T=m;for(;;){if(T===l)break t;if(o===u&&++h===e&&(c=f),o===n&&++S===a&&(i=f),(m=T.nextSibling)!==null)break;T=o,o=T.parentNode}T=m}u=c===-1||i===-1?null:{start:c,end:i}}else u=null}u=u||{start:0,end:0}}else u=null;for(Bc={focusedElem:l,selectionRange:u},Mn=!1,El=t;El!==null;)if(t=El,l=t.child,(t.subtreeFlags&1024)!==0&&l!==null)l.return=t,El=l;else for(;El!==null;){switch(t=El,n=t.alternate,l=t.flags,t.tag){case 0:break;case 11:case 15:break;case 1:if((l&1024)!==0&&n!==null){l=void 0,u=t,e=n.memoizedProps,n=n.memoizedState,a=u.stateNode;try{var p=Du(u.type,e,u.elementType===u.type);l=a.getSnapshotBeforeUpdate(p,n),a.__reactInternalSnapshotBeforeUpdate=l}catch(q){ul(u,u.return,q)}}break;case 3:if((l&1024)!==0){if(l=t.stateNode.containerInfo,u=l.nodeType,u===9)Xc(l);else if(u===1)switch(l.nodeName){case"HEAD":case"HTML":case"BODY":Xc(l);break;default:l.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((l&1024)!==0)throw Error(r(163))}if(l=t.sibling,l!==null){l.return=t.return,El=l;break}El=t.return}}function Gs(l,t,u){var a=u.flags;switch(u.tag){case 0:case 11:case 15:Ft(l,u),a&4&&$a(5,u);break;case 1:if(Ft(l,u),a&4)if(l=u.stateNode,t===null)try{l.componentDidMount()}catch(f){ul(u,u.return,f)}else{var e=Du(u.type,t.memoizedProps);t=t.memoizedState;try{l.componentDidUpdate(e,t,l.__reactInternalSnapshotBeforeUpdate)}catch(f){ul(u,u.return,f)}}a&64&&Hs(u),a&512&&ka(u,u.return);break;case 3:if(Ft(l,u),a&64&&(l=u.updateQueue,l!==null)){if(t=null,u.child!==null)switch(u.child.tag){case 27:case 5:t=u.child.stateNode;break;case 1:t=u.child.stateNode}try{S0(l,t)}catch(f){ul(u,u.return,f)}}break;case 27:t===null&&a&4&&Bs(u);case 26:case 5:Ft(l,u),t===null&&a&4&&qs(u),a&512&&ka(u,u.return);break;case 12:Ft(l,u);break;case 13:Ft(l,u),a&4&&xs(l,u),a&64&&(l=u.memoizedState,l!==null&&(l=l.dehydrated,l!==null&&(u=x1.bind(null,u),ad(l,u))));break;case 22:if(a=u.memoizedState!==null||pt,!a){t=t!==null&&t.memoizedState!==null||ol,e=pt;var n=ol;pt=a,(ol=t)&&!n?It(l,u,(u.subtreeFlags&8772)!==0):Ft(l,u),pt=e,ol=n}break;case 30:break;default:Ft(l,u)}}function Xs(l){var t=l.alternate;t!==null&&(l.alternate=null,Xs(t)),l.child=null,l.deletions=null,l.sibling=null,l.tag===5&&(t=l.stateNode,t!==null&&jn(t)),l.stateNode=null,l.return=null,l.dependencies=null,l.memoizedProps=null,l.memoizedState=null,l.pendingProps=null,l.stateNode=null,l.updateQueue=null}var cl=null,Zl=!1;function Gt(l,t,u){for(u=u.child;u!==null;)Qs(l,t,u),u=u.sibling}function Qs(l,t,u){if(Jl&&typeof Jl.onCommitFiberUnmount=="function")try{Jl.onCommitFiberUnmount(Sa,u)}catch{}switch(u.tag){case 26:ol||bt(u,t),Gt(l,t,u),u.memoizedState?u.memoizedState.count--:u.stateNode&&(u=u.stateNode,u.parentNode.removeChild(u));break;case 27:ol||bt(u,t);var a=cl,e=Zl;eu(u.type)&&(cl=u.stateNode,Zl=!1),Gt(l,t,u),ne(u.stateNode),cl=a,Zl=e;break;case 5:ol||bt(u,t);case 6:if(a=cl,e=Zl,cl=null,Gt(l,t,u),cl=a,Zl=e,cl!==null)if(Zl)try{(cl.nodeType===9?cl.body:cl.nodeName==="HTML"?cl.ownerDocument.body:cl).removeChild(u.stateNode)}catch(n){ul(u,t,n)}else try{cl.removeChild(u.stateNode)}catch(n){ul(u,t,n)}break;case 18:cl!==null&&(Zl?(l=cl,Mv(l.nodeType===9?l.body:l.nodeName==="HTML"?l.ownerDocument.body:l,u.stateNode),he(l)):Mv(cl,u.stateNode));break;case 4:a=cl,e=Zl,cl=u.stateNode.containerInfo,Zl=!0,Gt(l,t,u),cl=a,Zl=e;break;case 0:case 11:case 14:case 15:ol||kt(2,u,t),ol||kt(4,u,t),Gt(l,t,u);break;case 1:ol||(bt(u,t),a=u.stateNode,typeof a.componentWillUnmount=="function"&&Ns(u,t,a)),Gt(l,t,u);break;case 21:Gt(l,t,u);break;case 22:ol=(a=ol)||u.memoizedState!==null,Gt(l,t,u),ol=a;break;default:Gt(l,t,u)}}function xs(l,t){if(t.memoizedState===null&&(l=t.alternate,l!==null&&(l=l.memoizedState,l!==null&&(l=l.dehydrated,l!==null))))try{he(l)}catch(u){ul(t,t.return,u)}}function N1(l){switch(l.tag){case 13:case 19:var t=l.stateNode;return t===null&&(t=l.stateNode=new ps),t;case 22:return l=l.stateNode,t=l._retryCache,t===null&&(t=l._retryCache=new ps),t;default:throw Error(r(435,l.tag))}}function vc(l,t){var u=N1(l);t.forEach(function(a){var e=Z1.bind(null,l,a);u.has(a)||(u.add(a),a.then(e,e))})}function kl(l,t){var u=t.deletions;if(u!==null)for(var a=0;a<u.length;a++){var e=u[a],n=l,f=t,c=f;l:for(;c!==null;){switch(c.tag){case 27:if(eu(c.type)){cl=c.stateNode,Zl=!1;break l}break;case 5:cl=c.stateNode,Zl=!1;break l;case 3:case 4:cl=c.stateNode.containerInfo,Zl=!0;break l}c=c.return}if(cl===null)throw Error(r(160));Qs(n,f,e),cl=null,Zl=!1,n=e.alternate,n!==null&&(n.return=null),e.return=null}if(t.subtreeFlags&13878)for(t=t.child;t!==null;)Zs(t,l),t=t.sibling}var ht=null;function Zs(l,t){var u=l.alternate,a=l.flags;switch(l.tag){case 0:case 11:case 14:case 15:kl(t,l),Fl(l),a&4&&(kt(3,l,l.return),$a(3,l),kt(5,l,l.return));break;case 1:kl(t,l),Fl(l),a&512&&(ol||u===null||bt(u,u.return)),a&64&&pt&&(l=l.updateQueue,l!==null&&(a=l.callbacks,a!==null&&(u=l.shared.hiddenCallbacks,l.shared.hiddenCallbacks=u===null?a:u.concat(a))));break;case 26:var e=ht;if(kl(t,l),Fl(l),a&512&&(ol||u===null||bt(u,u.return)),a&4){var n=u!==null?u.memoizedState:null;if(a=l.memoizedState,u===null)if(a===null)if(l.stateNode===null){l:{a=l.type,u=l.memoizedProps,e=e.ownerDocument||e;t:switch(a){case"title":n=e.getElementsByTagName("title")[0],(!n||n[Ta]||n[Rl]||n.namespaceURI==="http://www.w3.org/2000/svg"||n.hasAttribute("itemprop"))&&(n=e.createElement(a),e.head.insertBefore(n,e.querySelector("head > title"))),_l(n,a,u),n[Rl]=l,bl(n),a=n;break l;case"link":var f=Bv("link","href",e).get(a+(u.href||""));if(f){for(var c=0;c<f.length;c++)if(n=f[c],n.getAttribute("href")===(u.href==null||u.href===""?null:u.href)&&n.getAttribute("rel")===(u.rel==null?null:u.rel)&&n.getAttribute("title")===(u.title==null?null:u.title)&&n.getAttribute("crossorigin")===(u.crossOrigin==null?null:u.crossOrigin)){f.splice(c,1);break t}}n=e.createElement(a),_l(n,a,u),e.head.appendChild(n);break;case"meta":if(f=Bv("meta","content",e).get(a+(u.content||""))){for(c=0;c<f.length;c++)if(n=f[c],n.getAttribute("content")===(u.content==null?null:""+u.content)&&n.getAttribute("name")===(u.name==null?null:u.name)&&n.getAttribute("property")===(u.property==null?null:u.property)&&n.getAttribute("http-equiv")===(u.httpEquiv==null?null:u.httpEquiv)&&n.getAttribute("charset")===(u.charSet==null?null:u.charSet)){f.splice(c,1);break t}}n=e.createElement(a),_l(n,a,u),e.head.appendChild(n);break;default:throw Error(r(468,a))}n[Rl]=l,bl(n),a=n}l.stateNode=a}else pv(e,l.type,l.stateNode);else l.stateNode=Yv(e,a,l.memoizedProps);else n!==a?(n===null?u.stateNode!==null&&(u=u.stateNode,u.parentNode.removeChild(u)):n.count--,a===null?pv(e,l.type,l.stateNode):Yv(e,a,l.memoizedProps)):a===null&&l.stateNode!==null&&fc(l,l.memoizedProps,u.memoizedProps)}break;case 27:kl(t,l),Fl(l),a&512&&(ol||u===null||bt(u,u.return)),u!==null&&a&4&&fc(l,l.memoizedProps,u.memoizedProps);break;case 5:if(kl(t,l),Fl(l),a&512&&(ol||u===null||bt(u,u.return)),l.flags&32){e=l.stateNode;try{xu(e,"")}catch(m){ul(l,l.return,m)}}a&4&&l.stateNode!=null&&(e=l.memoizedProps,fc(l,e,u!==null?u.memoizedProps:e)),a&1024&&(sc=!0);break;case 6:if(kl(t,l),Fl(l),a&4){if(l.stateNode===null)throw Error(r(162));a=l.memoizedProps,u=l.stateNode;try{u.nodeValue=a}catch(m){ul(l,l.return,m)}}break;case 3:if(zn=null,e=ht,ht=En(t.containerInfo),kl(t,l),ht=e,Fl(l),a&4&&u!==null&&u.memoizedState.isDehydrated)try{he(t.containerInfo)}catch(m){ul(l,l.return,m)}sc&&(sc=!1,js(l));break;case 4:a=ht,ht=En(l.stateNode.containerInfo),kl(t,l),Fl(l),ht=a;break;case 12:kl(t,l),Fl(l);break;case 13:kl(t,l),Fl(l),l.child.flags&8192&&l.memoizedState!==null!=(u!==null&&u.memoizedState!==null)&&(rc=rt()),a&4&&(a=l.updateQueue,a!==null&&(l.updateQueue=null,vc(l,a)));break;case 22:e=l.memoizedState!==null;var i=u!==null&&u.memoizedState!==null,h=pt,S=ol;if(pt=h||e,ol=S||i,kl(t,l),ol=S,pt=h,Fl(l),a&8192)l:for(t=l.stateNode,t._visibility=e?t._visibility&-2:t._visibility|1,e&&(u===null||i||pt||ol||Uu(l)),u=null,t=l;;){if(t.tag===5||t.tag===26){if(u===null){i=u=t;try{if(n=i.stateNode,e)f=n.style,typeof f.setProperty=="function"?f.setProperty("display","none","important"):f.display="none";else{c=i.stateNode;var T=i.memoizedProps.style,o=T!=null&&T.hasOwnProperty("display")?T.display:null;c.style.display=o==null||typeof o=="boolean"?"":(""+o).trim()}}catch(m){ul(i,i.return,m)}}}else if(t.tag===6){if(u===null){i=t;try{i.stateNode.nodeValue=e?"":i.memoizedProps}catch(m){ul(i,i.return,m)}}}else if((t.tag!==22&&t.tag!==23||t.memoizedState===null||t===l)&&t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break l;for(;t.sibling===null;){if(t.return===null||t.return===l)break l;u===t&&(u=null),t=t.return}u===t&&(u=null),t.sibling.return=t.return,t=t.sibling}a&4&&(a=l.updateQueue,a!==null&&(u=a.retryQueue,u!==null&&(a.retryQueue=null,vc(l,u))));break;case 19:kl(t,l),Fl(l),a&4&&(a=l.updateQueue,a!==null&&(l.updateQueue=null,vc(l,a)));break;case 30:break;case 21:break;default:kl(t,l),Fl(l)}}function Fl(l){var t=l.flags;if(t&2){try{for(var u,a=l.return;a!==null;){if(Ys(a)){u=a;break}a=a.return}if(u==null)throw Error(r(160));switch(u.tag){case 27:var e=u.stateNode,n=cc(l);cn(l,n,e);break;case 5:var f=u.stateNode;u.flags&32&&(xu(f,""),u.flags&=-33);var c=cc(l);cn(l,c,f);break;case 3:case 4:var i=u.stateNode.containerInfo,h=cc(l);ic(l,h,i);break;default:throw Error(r(161))}}catch(S){ul(l,l.return,S)}l.flags&=-3}t&4096&&(l.flags&=-4097)}function js(l){if(l.subtreeFlags&1024)for(l=l.child;l!==null;){var t=l;js(t),t.tag===5&&t.flags&1024&&t.stateNode.reset(),l=l.sibling}}function Ft(l,t){if(t.subtreeFlags&8772)for(t=t.child;t!==null;)Gs(l,t.alternate,t),t=t.sibling}function Uu(l){for(l=l.child;l!==null;){var t=l;switch(t.tag){case 0:case 11:case 14:case 15:kt(4,t,t.return),Uu(t);break;case 1:bt(t,t.return);var u=t.stateNode;typeof u.componentWillUnmount=="function"&&Ns(t,t.return,u),Uu(t);break;case 27:ne(t.stateNode);case 26:case 5:bt(t,t.return),Uu(t);break;case 22:t.memoizedState===null&&Uu(t);break;case 30:Uu(t);break;default:Uu(t)}l=l.sibling}}function It(l,t,u){for(u=u&&(t.subtreeFlags&8772)!==0,t=t.child;t!==null;){var a=t.alternate,e=l,n=t,f=n.flags;switch(n.tag){case 0:case 11:case 15:It(e,n,u),$a(4,n);break;case 1:if(It(e,n,u),a=n,e=a.stateNode,typeof e.componentDidMount=="function")try{e.componentDidMount()}catch(h){ul(a,a.return,h)}if(a=n,e=a.updateQueue,e!==null){var c=a.stateNode;try{var i=e.shared.hiddenCallbacks;if(i!==null)for(e.shared.hiddenCallbacks=null,e=0;e<i.length;e++)r0(i[e],c)}catch(h){ul(a,a.return,h)}}u&&f&64&&Hs(n),ka(n,n.return);break;case 27:Bs(n);case 26:case 5:It(e,n,u),u&&a===null&&f&4&&qs(n),ka(n,n.return);break;case 12:It(e,n,u);break;case 13:It(e,n,u),u&&f&4&&xs(e,n);break;case 22:n.memoizedState===null&&It(e,n,u),ka(n,n.return);break;case 30:break;default:It(e,n,u)}t=t.sibling}}function yc(l,t){var u=null;l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),l=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(l=t.memoizedState.cachePool.pool),l!==u&&(l!=null&&l.refCount++,u!=null&&pa(u))}function dc(l,t){l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&pa(l))}function Tt(l,t,u,a){if(t.subtreeFlags&10256)for(t=t.child;t!==null;)Cs(l,t,u,a),t=t.sibling}function Cs(l,t,u,a){var e=t.flags;switch(t.tag){case 0:case 11:case 15:Tt(l,t,u,a),e&2048&&$a(9,t);break;case 1:Tt(l,t,u,a);break;case 3:Tt(l,t,u,a),e&2048&&(l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&pa(l)));break;case 12:if(e&2048){Tt(l,t,u,a),l=t.stateNode;try{var n=t.memoizedProps,f=n.id,c=n.onPostCommit;typeof c=="function"&&c(f,t.alternate===null?"mount":"update",l.passiveEffectDuration,-0)}catch(i){ul(t,t.return,i)}}else Tt(l,t,u,a);break;case 13:Tt(l,t,u,a);break;case 23:break;case 22:n=t.stateNode,f=t.alternate,t.memoizedState!==null?n._visibility&2?Tt(l,t,u,a):Fa(l,t):n._visibility&2?Tt(l,t,u,a):(n._visibility|=2,ea(l,t,u,a,(t.subtreeFlags&10256)!==0)),e&2048&&yc(f,t);break;case 24:Tt(l,t,u,a),e&2048&&dc(t.alternate,t);break;default:Tt(l,t,u,a)}}function ea(l,t,u,a,e){for(e=e&&(t.subtreeFlags&10256)!==0,t=t.child;t!==null;){var n=l,f=t,c=u,i=a,h=f.flags;switch(f.tag){case 0:case 11:case 15:ea(n,f,c,i,e),$a(8,f);break;case 23:break;case 22:var S=f.stateNode;f.memoizedState!==null?S._visibility&2?ea(n,f,c,i,e):Fa(n,f):(S._visibility|=2,ea(n,f,c,i,e)),e&&h&2048&&yc(f.alternate,f);break;case 24:ea(n,f,c,i,e),e&&h&2048&&dc(f.alternate,f);break;default:ea(n,f,c,i,e)}t=t.sibling}}function Fa(l,t){if(t.subtreeFlags&10256)for(t=t.child;t!==null;){var u=l,a=t,e=a.flags;switch(a.tag){case 22:Fa(u,a),e&2048&&yc(a.alternate,a);break;case 24:Fa(u,a),e&2048&&dc(a.alternate,a);break;default:Fa(u,a)}t=t.sibling}}var Ia=8192;function na(l){if(l.subtreeFlags&Ia)for(l=l.child;l!==null;)Vs(l),l=l.sibling}function Vs(l){switch(l.tag){case 26:na(l),l.flags&Ia&&l.memoizedState!==null&&rd(ht,l.memoizedState,l.memoizedProps);break;case 5:na(l);break;case 3:case 4:var t=ht;ht=En(l.stateNode.containerInfo),na(l),ht=t;break;case 22:l.memoizedState===null&&(t=l.alternate,t!==null&&t.memoizedState!==null?(t=Ia,Ia=16777216,na(l),Ia=t):na(l));break;default:na(l)}}function Ls(l){var t=l.alternate;if(t!==null&&(l=t.child,l!==null)){t.child=null;do t=l.sibling,l.sibling=null,l=t;while(l!==null)}}function Pa(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var a=t[u];El=a,Js(a,l)}Ls(l)}if(l.subtreeFlags&10256)for(l=l.child;l!==null;)Ks(l),l=l.sibling}function Ks(l){switch(l.tag){case 0:case 11:case 15:Pa(l),l.flags&2048&&kt(9,l,l.return);break;case 3:Pa(l);break;case 12:Pa(l);break;case 22:var t=l.stateNode;l.memoizedState!==null&&t._visibility&2&&(l.return===null||l.return.tag!==13)?(t._visibility&=-3,sn(l)):Pa(l);break;default:Pa(l)}}function sn(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var a=t[u];El=a,Js(a,l)}Ls(l)}for(l=l.child;l!==null;){switch(t=l,t.tag){case 0:case 11:case 15:kt(8,t,t.return),sn(t);break;case 22:u=t.stateNode,u._visibility&2&&(u._visibility&=-3,sn(t));break;default:sn(t)}l=l.sibling}}function Js(l,t){for(;El!==null;){var u=El;switch(u.tag){case 0:case 11:case 15:kt(8,u,t);break;case 23:case 22:if(u.memoizedState!==null&&u.memoizedState.cachePool!==null){var a=u.memoizedState.cachePool.pool;a!=null&&a.refCount++}break;case 24:pa(u.memoizedState.cache)}if(a=u.child,a!==null)a.return=u,El=a;else l:for(u=l;El!==null;){a=El;var e=a.sibling,n=a.return;if(Xs(a),a===u){El=null;break l}if(e!==null){e.return=n,El=e;break l}El=n}}}var q1={getCacheForType:function(l){var t=Hl(Sl),u=t.data.get(l);return u===void 0&&(u=l(),t.data.set(l,u)),u}},Y1=typeof WeakMap=="function"?WeakMap:Map,$=0,el=null,j=null,V=0,k=0,Il=null,Pt=!1,fa=!1,hc=!1,Xt=0,vl=0,lu=0,Ru=0,oc=0,it=0,ca=0,le=null,jl=null,mc=!1,rc=0,vn=1/0,yn=null,tu=null,Ol=0,uu=null,ia=null,sa=0,Sc=0,gc=null,ws=null,te=0,bc=null;function Pl(){if(($&2)!==0&&V!==0)return V&-V;if(g.T!==null){var l=ku;return l!==0?l:Mc()}return si()}function Ws(){it===0&&(it=(V&536870912)===0||W?ni():536870912);var l=ct.current;return l!==null&&(l.flags|=32),it}function lt(l,t,u){(l===el&&(k===2||k===9)||l.cancelPendingCommit!==null)&&(va(l,0),au(l,V,it,!1)),ba(l,u),(($&2)===0||l!==el)&&(l===el&&(($&2)===0&&(Ru|=u),vl===4&&au(l,V,it,!1)),Et(l))}function $s(l,t,u){if(($&6)!==0)throw Error(r(327));var a=!u&&(t&124)===0&&(t&l.expiredLanes)===0||ga(l,t),e=a?G1(l,t):Ac(l,t,!0),n=a;do{if(e===0){fa&&!a&&au(l,t,0,!1);break}else{if(u=l.current.alternate,n&&!B1(u)){e=Ac(l,t,!1),n=!1;continue}if(e===2){if(n=t,l.errorRecoveryDisabledLanes&n)var f=0;else f=l.pendingLanes&-536870913,f=f!==0?f:f&536870912?536870912:0;if(f!==0){t=f;l:{var c=l;e=le;var i=c.current.memoizedState.isDehydrated;if(i&&(va(c,f).flags|=256),f=Ac(c,f,!1),f!==2){if(hc&&!i){c.errorRecoveryDisabledLanes|=n,Ru|=n,e=4;break l}n=jl,jl=e,n!==null&&(jl===null?jl=n:jl.push.apply(jl,n))}e=f}if(n=!1,e!==2)continue}}if(e===1){va(l,0),au(l,t,0,!0);break}l:{switch(a=l,n=e,n){case 0:case 1:throw Error(r(345));case 4:if((t&4194048)!==t)break;case 6:au(a,t,it,!Pt);break l;case 2:jl=null;break;case 3:case 5:break;default:throw Error(r(329))}if((t&62914560)===t&&(e=rc+300-rt(),10<e)){if(au(a,t,it,!Pt),Ee(a,0,!0)!==0)break l;a.timeoutHandle=Ov(ks.bind(null,a,u,jl,yn,mc,t,it,Ru,ca,Pt,n,2,-0,0),e);break l}ks(a,u,jl,yn,mc,t,it,Ru,ca,Pt,n,0,-0,0)}}break}while(!0);Et(l)}function ks(l,t,u,a,e,n,f,c,i,h,S,T,o,m){if(l.timeoutHandle=-1,T=t.subtreeFlags,(T&8192||(T&16785408)===16785408)&&(ie={stylesheets:null,count:0,unsuspend:md},Vs(t),T=Sd(),T!==null)){l.cancelPendingCommit=T(av.bind(null,l,t,n,u,a,e,f,c,i,S,1,o,m)),au(l,n,f,!h);return}av(l,t,n,u,a,e,f,c,i)}function B1(l){for(var t=l;;){var u=t.tag;if((u===0||u===11||u===15)&&t.flags&16384&&(u=t.updateQueue,u!==null&&(u=u.stores,u!==null)))for(var a=0;a<u.length;a++){var e=u[a],n=e.getSnapshot;e=e.value;try{if(!Wl(n(),e))return!1}catch{return!1}}if(u=t.child,t.subtreeFlags&16384&&u!==null)u.return=t,t=u;else{if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function au(l,t,u,a){t&=~oc,t&=~Ru,l.suspendedLanes|=t,l.pingedLanes&=~t,a&&(l.warmLanes|=t),a=l.expirationTimes;for(var e=t;0<e;){var n=31-wl(e),f=1<<n;a[n]=-1,e&=~f}u!==0&&ci(l,u,t)}function dn(){return($&6)===0?(ue(0),!1):!0}function Tc(){if(j!==null){if(k===0)var l=j.return;else l=j,Rt=zu=null,Xf(l),ua=null,Ja=0,l=j;for(;l!==null;)Rs(l.alternate,l),l=l.return;j=null}}function va(l,t){var u=l.timeoutHandle;u!==-1&&(l.timeoutHandle=-1,I1(u)),u=l.cancelPendingCommit,u!==null&&(l.cancelPendingCommit=null,u()),Tc(),el=l,j=u=Mt(l.current,null),V=t,k=0,Il=null,Pt=!1,fa=ga(l,t),hc=!1,ca=it=oc=Ru=lu=vl=0,jl=le=null,mc=!1,(t&8)!==0&&(t|=t&32);var a=l.entangledLanes;if(a!==0)for(l=l.entanglements,a&=t;0<a;){var e=31-wl(a),n=1<<e;t|=l[e],a&=~n}return Xt=t,Ye(),u}function Fs(l,t){Q=null,g.H=Ie,t===Xa||t===Ce?(t=o0(),k=3):t===y0?(t=o0(),k=4):k=t===ms?8:t!==null&&typeof t=="object"&&typeof t.then=="function"?6:1,Il=t,j===null&&(vl=1,an(l,at(t,l.current)))}function Is(){var l=g.H;return g.H=Ie,l===null?Ie:l}function Ps(){var l=g.A;return g.A=q1,l}function Ec(){vl=4,Pt||(V&4194048)!==V&&ct.current!==null||(fa=!0),(lu&134217727)===0&&(Ru&134217727)===0||el===null||au(el,V,it,!1)}function Ac(l,t,u){var a=$;$|=2;var e=Is(),n=Ps();(el!==l||V!==t)&&(yn=null,va(l,t)),t=!1;var f=vl;l:do try{if(k!==0&&j!==null){var c=j,i=Il;switch(k){case 8:Tc(),f=6;break l;case 3:case 2:case 9:case 6:ct.current===null&&(t=!0);var h=k;if(k=0,Il=null,ya(l,c,i,h),u&&fa){f=0;break l}break;default:h=k,k=0,Il=null,ya(l,c,i,h)}}p1(),f=vl;break}catch(S){Fs(l,S)}while(!0);return t&&l.shellSuspendCounter++,Rt=zu=null,$=a,g.H=e,g.A=n,j===null&&(el=null,V=0,Ye()),f}function p1(){for(;j!==null;)lv(j)}function G1(l,t){var u=$;$|=2;var a=Is(),e=Ps();el!==l||V!==t?(yn=null,vn=rt()+500,va(l,t)):fa=ga(l,t);l:do try{if(k!==0&&j!==null){t=j;var n=Il;t:switch(k){case 1:k=0,Il=null,ya(l,t,n,1);break;case 2:case 9:if(d0(n)){k=0,Il=null,tv(t);break}t=function(){k!==2&&k!==9||el!==l||(k=7),Et(l)},n.then(t,t);break l;case 3:k=7;break l;case 4:k=5;break l;case 7:d0(n)?(k=0,Il=null,tv(t)):(k=0,Il=null,ya(l,t,n,7));break;case 5:var f=null;switch(j.tag){case 26:f=j.memoizedState;case 5:case 27:var c=j;if(!f||Gv(f)){k=0,Il=null;var i=c.sibling;if(i!==null)j=i;else{var h=c.return;h!==null?(j=h,hn(h)):j=null}break t}}k=0,Il=null,ya(l,t,n,5);break;case 6:k=0,Il=null,ya(l,t,n,6);break;case 8:Tc(),vl=6;break l;default:throw Error(r(462))}}X1();break}catch(S){Fs(l,S)}while(!0);return Rt=zu=null,g.H=a,g.A=e,$=u,j!==null?0:(el=null,V=0,Ye(),vl)}function X1(){for(;j!==null&&!ny();)lv(j)}function lv(l){var t=Ds(l.alternate,l,Xt);l.memoizedProps=l.pendingProps,t===null?hn(l):j=t}function tv(l){var t=l,u=t.alternate;switch(t.tag){case 15:case 0:t=Es(u,t,t.pendingProps,t.type,void 0,V);break;case 11:t=Es(u,t,t.pendingProps,t.type.render,t.ref,V);break;case 5:Xf(t);default:Rs(u,t),t=j=u0(t,Xt),t=Ds(u,t,Xt)}l.memoizedProps=l.pendingProps,t===null?hn(l):j=t}function ya(l,t,u,a){Rt=zu=null,Xf(t),ua=null,Ja=0;var e=t.return;try{if(M1(l,e,t,u,V)){vl=1,an(l,at(u,l.current)),j=null;return}}catch(n){if(e!==null)throw j=e,n;vl=1,an(l,at(u,l.current)),j=null;return}t.flags&32768?(W||a===1?l=!0:fa||(V&536870912)!==0?l=!1:(Pt=l=!0,(a===2||a===9||a===3||a===6)&&(a=ct.current,a!==null&&a.tag===13&&(a.flags|=16384))),uv(t,l)):hn(t)}function hn(l){var t=l;do{if((t.flags&32768)!==0){uv(t,Pt);return}l=t.return;var u=U1(t.alternate,t,Xt);if(u!==null){j=u;return}if(t=t.sibling,t!==null){j=t;return}j=t=l}while(t!==null);vl===0&&(vl=5)}function uv(l,t){do{var u=R1(l.alternate,l);if(u!==null){u.flags&=32767,j=u;return}if(u=l.return,u!==null&&(u.flags|=32768,u.subtreeFlags=0,u.deletions=null),!t&&(l=l.sibling,l!==null)){j=l;return}j=l=u}while(l!==null);vl=6,j=null}function av(l,t,u,a,e,n,f,c,i){l.cancelPendingCommit=null;do on();while(Ol!==0);if(($&6)!==0)throw Error(r(327));if(t!==null){if(t===l.current)throw Error(r(177));if(n=t.lanes|t.childLanes,n|=df,my(l,u,n,f,c,i),l===el&&(j=el=null,V=0),ia=t,uu=l,sa=u,Sc=n,gc=e,ws=a,(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?(l.callbackNode=null,l.callbackPriority=0,j1(ge,function(){return iv(),null})):(l.callbackNode=null,l.callbackPriority=0),a=(t.flags&13878)!==0,(t.subtreeFlags&13878)!==0||a){a=g.T,g.T=null,e=O.p,O.p=2,f=$,$|=4;try{H1(l,t,u)}finally{$=f,O.p=e,g.T=a}}Ol=1,ev(),nv(),fv()}}function ev(){if(Ol===1){Ol=0;var l=uu,t=ia,u=(t.flags&13878)!==0;if((t.subtreeFlags&13878)!==0||u){u=g.T,g.T=null;var a=O.p;O.p=2;var e=$;$|=4;try{Zs(t,l);var n=Bc,f=Ji(l.containerInfo),c=n.focusedElem,i=n.selectionRange;if(f!==c&&c&&c.ownerDocument&&Ki(c.ownerDocument.documentElement,c)){if(i!==null&&ff(c)){var h=i.start,S=i.end;if(S===void 0&&(S=h),"selectionStart"in c)c.selectionStart=h,c.selectionEnd=Math.min(S,c.value.length);else{var T=c.ownerDocument||document,o=T&&T.defaultView||window;if(o.getSelection){var m=o.getSelection(),p=c.textContent.length,q=Math.min(i.start,p),ll=i.end===void 0?q:Math.min(i.end,p);!m.extend&&q>ll&&(f=ll,ll=q,q=f);var y=Li(c,q),v=Li(c,ll);if(y&&v&&(m.rangeCount!==1||m.anchorNode!==y.node||m.anchorOffset!==y.offset||m.focusNode!==v.node||m.focusOffset!==v.offset)){var d=T.createRange();d.setStart(y.node,y.offset),m.removeAllRanges(),q>ll?(m.addRange(d),m.extend(v.node,v.offset)):(d.setEnd(v.node,v.offset),m.addRange(d))}}}}for(T=[],m=c;m=m.parentNode;)m.nodeType===1&&T.push({element:m,left:m.scrollLeft,top:m.scrollTop});for(typeof c.focus=="function"&&c.focus(),c=0;c<T.length;c++){var b=T[c];b.element.scrollLeft=b.left,b.element.scrollTop=b.top}}Mn=!!Yc,Bc=Yc=null}finally{$=e,O.p=a,g.T=u}}l.current=t,Ol=2}}function nv(){if(Ol===2){Ol=0;var l=uu,t=ia,u=(t.flags&8772)!==0;if((t.subtreeFlags&8772)!==0||u){u=g.T,g.T=null;var a=O.p;O.p=2;var e=$;$|=4;try{Gs(l,t.alternate,t)}finally{$=e,O.p=a,g.T=u}}Ol=3}}function fv(){if(Ol===4||Ol===3){Ol=0,fy();var l=uu,t=ia,u=sa,a=ws;(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?Ol=5:(Ol=0,ia=uu=null,cv(l,l.pendingLanes));var e=l.pendingLanes;if(e===0&&(tu=null),xn(u),t=t.stateNode,Jl&&typeof Jl.onCommitFiberRoot=="function")try{Jl.onCommitFiberRoot(Sa,t,void 0,(t.current.flags&128)===128)}catch{}if(a!==null){t=g.T,e=O.p,O.p=2,g.T=null;try{for(var n=l.onRecoverableError,f=0;f<a.length;f++){var c=a[f];n(c.value,{componentStack:c.stack})}}finally{g.T=t,O.p=e}}(sa&3)!==0&&on(),Et(l),e=l.pendingLanes,(u&4194090)!==0&&(e&42)!==0?l===bc?te++:(te=0,bc=l):te=0,ue(0)}}function cv(l,t){(l.pooledCacheLanes&=t)===0&&(t=l.pooledCache,t!=null&&(l.pooledCache=null,pa(t)))}function on(l){return ev(),nv(),fv(),iv()}function iv(){if(Ol!==5)return!1;var l=uu,t=Sc;Sc=0;var u=xn(sa),a=g.T,e=O.p;try{O.p=32>u?32:u,g.T=null,u=gc,gc=null;var n=uu,f=sa;if(Ol=0,ia=uu=null,sa=0,($&6)!==0)throw Error(r(331));var c=$;if($|=4,Ks(n.current),Cs(n,n.current,f,u),$=c,ue(0,!1),Jl&&typeof Jl.onPostCommitFiberRoot=="function")try{Jl.onPostCommitFiberRoot(Sa,n)}catch{}return!0}finally{O.p=e,g.T=a,cv(l,t)}}function sv(l,t,u){t=at(u,t),t=Ff(l.stateNode,t,2),l=Jt(l,t,2),l!==null&&(ba(l,2),Et(l))}function ul(l,t,u){if(l.tag===3)sv(l,l,u);else for(;t!==null;){if(t.tag===3){sv(t,l,u);break}else if(t.tag===1){var a=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof a.componentDidCatch=="function"&&(tu===null||!tu.has(a))){l=at(u,l),u=hs(2),a=Jt(t,u,2),a!==null&&(os(u,a,t,l),ba(a,2),Et(a));break}}t=t.return}}function zc(l,t,u){var a=l.pingCache;if(a===null){a=l.pingCache=new Y1;var e=new Set;a.set(t,e)}else e=a.get(t),e===void 0&&(e=new Set,a.set(t,e));e.has(u)||(hc=!0,e.add(u),l=Q1.bind(null,l,t,u),t.then(l,l))}function Q1(l,t,u){var a=l.pingCache;a!==null&&a.delete(t),l.pingedLanes|=l.suspendedLanes&u,l.warmLanes&=~u,el===l&&(V&u)===u&&(vl===4||vl===3&&(V&62914560)===V&&300>rt()-rc?($&2)===0&&va(l,0):oc|=u,ca===V&&(ca=0)),Et(l)}function vv(l,t){t===0&&(t=fi()),l=Ju(l,t),l!==null&&(ba(l,t),Et(l))}function x1(l){var t=l.memoizedState,u=0;t!==null&&(u=t.retryLane),vv(l,u)}function Z1(l,t){var u=0;switch(l.tag){case 13:var a=l.stateNode,e=l.memoizedState;e!==null&&(u=e.retryLane);break;case 19:a=l.stateNode;break;case 22:a=l.stateNode._retryCache;break;default:throw Error(r(314))}a!==null&&a.delete(t),vv(l,u)}function j1(l,t){return pn(l,t)}var mn=null,da=null,Oc=!1,rn=!1,_c=!1,Hu=0;function Et(l){l!==da&&l.next===null&&(da===null?mn=da=l:da=da.next=l),rn=!0,Oc||(Oc=!0,V1())}function ue(l,t){if(!_c&&rn){_c=!0;do for(var u=!1,a=mn;a!==null;){if(l!==0){var e=a.pendingLanes;if(e===0)var n=0;else{var f=a.suspendedLanes,c=a.pingedLanes;n=(1<<31-wl(42|l)+1)-1,n&=e&~(f&~c),n=n&201326741?n&201326741|1:n?n|2:0}n!==0&&(u=!0,ov(a,n))}else n=V,n=Ee(a,a===el?n:0,a.cancelPendingCommit!==null||a.timeoutHandle!==-1),(n&3)===0||ga(a,n)||(u=!0,ov(a,n));a=a.next}while(u);_c=!1}}function C1(){yv()}function yv(){rn=Oc=!1;var l=0;Hu!==0&&(F1()&&(l=Hu),Hu=0);for(var t=rt(),u=null,a=mn;a!==null;){var e=a.next,n=dv(a,t);n===0?(a.next=null,u===null?mn=e:u.next=e,e===null&&(da=u)):(u=a,(l!==0||(n&3)!==0)&&(rn=!0)),a=e}ue(l)}function dv(l,t){for(var u=l.suspendedLanes,a=l.pingedLanes,e=l.expirationTimes,n=l.pendingLanes&-62914561;0<n;){var f=31-wl(n),c=1<<f,i=e[f];i===-1?((c&u)===0||(c&a)!==0)&&(e[f]=oy(c,t)):i<=t&&(l.expiredLanes|=c),n&=~c}if(t=el,u=V,u=Ee(l,l===t?u:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),a=l.callbackNode,u===0||l===t&&(k===2||k===9)||l.cancelPendingCommit!==null)return a!==null&&a!==null&&Gn(a),l.callbackNode=null,l.callbackPriority=0;if((u&3)===0||ga(l,u)){if(t=u&-u,t===l.callbackPriority)return t;switch(a!==null&&Gn(a),xn(u)){case 2:case 8:u=ai;break;case 32:u=ge;break;case 268435456:u=ei;break;default:u=ge}return a=hv.bind(null,l),u=pn(u,a),l.callbackPriority=t,l.callbackNode=u,t}return a!==null&&a!==null&&Gn(a),l.callbackPriority=2,l.callbackNode=null,2}function hv(l,t){if(Ol!==0&&Ol!==5)return l.callbackNode=null,l.callbackPriority=0,null;var u=l.callbackNode;if(on()&&l.callbackNode!==u)return null;var a=V;return a=Ee(l,l===el?a:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),a===0?null:($s(l,a,t),dv(l,rt()),l.callbackNode!=null&&l.callbackNode===u?hv.bind(null,l):null)}function ov(l,t){if(on())return null;$s(l,t,!0)}function V1(){P1(function(){($&6)!==0?pn(ui,C1):yv()})}function Mc(){return Hu===0&&(Hu=ni()),Hu}function mv(l){return l==null||typeof l=="symbol"||typeof l=="boolean"?null:typeof l=="function"?l:Me(""+l)}function rv(l,t){var u=t.ownerDocument.createElement("input");return u.name=t.name,u.value=t.value,l.id&&u.setAttribute("form",l.id),t.parentNode.insertBefore(u,t),l=new FormData(l),u.parentNode.removeChild(u),l}function L1(l,t,u,a,e){if(t==="submit"&&u&&u.stateNode===e){var n=mv((e[Xl]||null).action),f=a.submitter;f&&(t=(t=f[Xl]||null)?mv(t.formAction):f.getAttribute("formAction"),t!==null&&(n=t,f=null));var c=new He("action","action",null,a,e);l.push({event:c,listeners:[{instance:null,listener:function(){if(a.defaultPrevented){if(Hu!==0){var i=f?rv(e,f):new FormData(e);Jf(u,{pending:!0,data:i,method:e.method,action:n},null,i)}}else typeof n=="function"&&(c.preventDefault(),i=f?rv(e,f):new FormData(e),Jf(u,{pending:!0,data:i,method:e.method,action:n},n,i))},currentTarget:e}]})}}for(var Dc=0;Dc<yf.length;Dc++){var Uc=yf[Dc],K1=Uc.toLowerCase(),J1=Uc[0].toUpperCase()+Uc.slice(1);dt(K1,"on"+J1)}dt($i,"onAnimationEnd"),dt(ki,"onAnimationIteration"),dt(Fi,"onAnimationStart"),dt("dblclick","onDoubleClick"),dt("focusin","onFocus"),dt("focusout","onBlur"),dt(s1,"onTransitionRun"),dt(v1,"onTransitionStart"),dt(y1,"onTransitionCancel"),dt(Ii,"onTransitionEnd"),Gu("onMouseEnter",["mouseout","mouseover"]),Gu("onMouseLeave",["mouseout","mouseover"]),Gu("onPointerEnter",["pointerout","pointerover"]),Gu("onPointerLeave",["pointerout","pointerover"]),ou("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),ou("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),ou("onBeforeInput",["compositionend","keypress","textInput","paste"]),ou("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),ou("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),ou("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var ae="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),w1=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(ae));function Sv(l,t){t=(t&4)!==0;for(var u=0;u<l.length;u++){var a=l[u],e=a.event;a=a.listeners;l:{var n=void 0;if(t)for(var f=a.length-1;0<=f;f--){var c=a[f],i=c.instance,h=c.currentTarget;if(c=c.listener,i!==n&&e.isPropagationStopped())break l;n=c,e.currentTarget=h;try{n(e)}catch(S){un(S)}e.currentTarget=null,n=i}else for(f=0;f<a.length;f++){if(c=a[f],i=c.instance,h=c.currentTarget,c=c.listener,i!==n&&e.isPropagationStopped())break l;n=c,e.currentTarget=h;try{n(e)}catch(S){un(S)}e.currentTarget=null,n=i}}}}function C(l,t){var u=t[Zn];u===void 0&&(u=t[Zn]=new Set);var a=l+"__bubble";u.has(a)||(gv(t,l,2,!1),u.add(a))}function Rc(l,t,u){var a=0;t&&(a|=4),gv(u,l,a,t)}var Sn="_reactListening"+Math.random().toString(36).slice(2);function Hc(l){if(!l[Sn]){l[Sn]=!0,yi.forEach(function(u){u!=="selectionchange"&&(w1.has(u)||Rc(u,!1,l),Rc(u,!0,l))});var t=l.nodeType===9?l:l.ownerDocument;t===null||t[Sn]||(t[Sn]=!0,Rc("selectionchange",!1,t))}}function gv(l,t,u,a){switch(Cv(t)){case 2:var e=Td;break;case 8:e=Ed;break;default:e=Lc}u=e.bind(null,t,u,l),e=void 0,!Fn||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(e=!0),a?e!==void 0?l.addEventListener(t,u,{capture:!0,passive:e}):l.addEventListener(t,u,!0):e!==void 0?l.addEventListener(t,u,{passive:e}):l.addEventListener(t,u,!1)}function Nc(l,t,u,a,e){var n=a;if((t&1)===0&&(t&2)===0&&a!==null)l:for(;;){if(a===null)return;var f=a.tag;if(f===3||f===4){var c=a.stateNode.containerInfo;if(c===e)break;if(f===4)for(f=a.return;f!==null;){var i=f.tag;if((i===3||i===4)&&f.stateNode.containerInfo===e)return;f=f.return}for(;c!==null;){if(f=Yu(c),f===null)return;if(i=f.tag,i===5||i===6||i===26||i===27){a=n=f;continue l}c=c.parentNode}}a=a.return}_i(function(){var h=n,S=$n(u),T=[];l:{var o=Pi.get(l);if(o!==void 0){var m=He,p=l;switch(l){case"keypress":if(Ue(u)===0)break l;case"keydown":case"keyup":m=jy;break;case"focusin":p="focus",m=tf;break;case"focusout":p="blur",m=tf;break;case"beforeblur":case"afterblur":m=tf;break;case"click":if(u.button===2)break l;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":m=Ui;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":m=Ry;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":m=Ly;break;case $i:case ki:case Fi:m=qy;break;case Ii:m=Jy;break;case"scroll":case"scrollend":m=Dy;break;case"wheel":m=Wy;break;case"copy":case"cut":case"paste":m=By;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":m=Hi;break;case"toggle":case"beforetoggle":m=ky}var q=(t&4)!==0,ll=!q&&(l==="scroll"||l==="scrollend"),y=q?o!==null?o+"Capture":null:o;q=[];for(var v=h,d;v!==null;){var b=v;if(d=b.stateNode,b=b.tag,b!==5&&b!==26&&b!==27||d===null||y===null||(b=Aa(v,y),b!=null&&q.push(ee(v,b,d))),ll)break;v=v.return}0<q.length&&(o=new m(o,p,null,u,S),T.push({event:o,listeners:q}))}}if((t&7)===0){l:{if(o=l==="mouseover"||l==="pointerover",m=l==="mouseout"||l==="pointerout",o&&u!==Wn&&(p=u.relatedTarget||u.fromElement)&&(Yu(p)||p[qu]))break l;if((m||o)&&(o=S.window===S?S:(o=S.ownerDocument)?o.defaultView||o.parentWindow:window,m?(p=u.relatedTarget||u.toElement,m=h,p=p?Yu(p):null,p!==null&&(ll=w(p),q=p.tag,p!==ll||q!==5&&q!==27&&q!==6)&&(p=null)):(m=null,p=h),m!==p)){if(q=Ui,b="onMouseLeave",y="onMouseEnter",v="mouse",(l==="pointerout"||l==="pointerover")&&(q=Hi,b="onPointerLeave",y="onPointerEnter",v="pointer"),ll=m==null?o:Ea(m),d=p==null?o:Ea(p),o=new q(b,v+"leave",m,u,S),o.target=ll,o.relatedTarget=d,b=null,Yu(S)===h&&(q=new q(y,v+"enter",p,u,S),q.target=d,q.relatedTarget=ll,b=q),ll=b,m&&p)t:{for(q=m,y=p,v=0,d=q;d;d=ha(d))v++;for(d=0,b=y;b;b=ha(b))d++;for(;0<v-d;)q=ha(q),v--;for(;0<d-v;)y=ha(y),d--;for(;v--;){if(q===y||y!==null&&q===y.alternate)break t;q=ha(q),y=ha(y)}q=null}else q=null;m!==null&&bv(T,o,m,q,!1),p!==null&&ll!==null&&bv(T,ll,p,q,!0)}}l:{if(o=h?Ea(h):window,m=o.nodeName&&o.nodeName.toLowerCase(),m==="select"||m==="input"&&o.type==="file")var D=Qi;else if(Gi(o))if(xi)D=f1;else{D=e1;var x=a1}else m=o.nodeName,!m||m.toLowerCase()!=="input"||o.type!=="checkbox"&&o.type!=="radio"?h&&wn(h.elementType)&&(D=Qi):D=n1;if(D&&(D=D(l,h))){Xi(T,D,u,S);break l}x&&x(l,o,h),l==="focusout"&&h&&o.type==="number"&&h.memoizedProps.value!=null&&Jn(o,"number",o.value)}switch(x=h?Ea(h):window,l){case"focusin":(Gi(x)||x.contentEditable==="true")&&(Vu=x,cf=h,Ha=null);break;case"focusout":Ha=cf=Vu=null;break;case"mousedown":sf=!0;break;case"contextmenu":case"mouseup":case"dragend":sf=!1,wi(T,u,S);break;case"selectionchange":if(i1)break;case"keydown":case"keyup":wi(T,u,S)}var U;if(af)l:{switch(l){case"compositionstart":var Y="onCompositionStart";break l;case"compositionend":Y="onCompositionEnd";break l;case"compositionupdate":Y="onCompositionUpdate";break l}Y=void 0}else Cu?Bi(l,u)&&(Y="onCompositionEnd"):l==="keydown"&&u.keyCode===229&&(Y="onCompositionStart");Y&&(Ni&&u.locale!=="ko"&&(Cu||Y!=="onCompositionStart"?Y==="onCompositionEnd"&&Cu&&(U=Mi()):(Ct=S,In="value"in Ct?Ct.value:Ct.textContent,Cu=!0)),x=gn(h,Y),0<x.length&&(Y=new Ri(Y,l,null,u,S),T.push({event:Y,listeners:x}),U?Y.data=U:(U=pi(u),U!==null&&(Y.data=U)))),(U=Iy?Py(l,u):l1(l,u))&&(Y=gn(h,"onBeforeInput"),0<Y.length&&(x=new Ri("onBeforeInput","beforeinput",null,u,S),T.push({event:x,listeners:Y}),x.data=U)),L1(T,l,h,u,S)}Sv(T,t)})}function ee(l,t,u){return{instance:l,listener:t,currentTarget:u}}function gn(l,t){for(var u=t+"Capture",a=[];l!==null;){var e=l,n=e.stateNode;if(e=e.tag,e!==5&&e!==26&&e!==27||n===null||(e=Aa(l,u),e!=null&&a.unshift(ee(l,e,n)),e=Aa(l,t),e!=null&&a.push(ee(l,e,n))),l.tag===3)return a;l=l.return}return[]}function ha(l){if(l===null)return null;do l=l.return;while(l&&l.tag!==5&&l.tag!==27);return l||null}function bv(l,t,u,a,e){for(var n=t._reactName,f=[];u!==null&&u!==a;){var c=u,i=c.alternate,h=c.stateNode;if(c=c.tag,i!==null&&i===a)break;c!==5&&c!==26&&c!==27||h===null||(i=h,e?(h=Aa(u,n),h!=null&&f.unshift(ee(u,h,i))):e||(h=Aa(u,n),h!=null&&f.push(ee(u,h,i)))),u=u.return}f.length!==0&&l.push({event:t,listeners:f})}var W1=/\r\n?/g,$1=/\u0000|\uFFFD/g;function Tv(l){return(typeof l=="string"?l:""+l).replace(W1,`
`).replace($1,"")}function Ev(l,t){return t=Tv(t),Tv(l)===t}function bn(){}function P(l,t,u,a,e,n){switch(u){case"children":typeof a=="string"?t==="body"||t==="textarea"&&a===""||xu(l,a):(typeof a=="number"||typeof a=="bigint")&&t!=="body"&&xu(l,""+a);break;case"className":ze(l,"class",a);break;case"tabIndex":ze(l,"tabindex",a);break;case"dir":case"role":case"viewBox":case"width":case"height":ze(l,u,a);break;case"style":zi(l,a,n);break;case"data":if(t!=="object"){ze(l,"data",a);break}case"src":case"href":if(a===""&&(t!=="a"||u!=="href")){l.removeAttribute(u);break}if(a==null||typeof a=="function"||typeof a=="symbol"||typeof a=="boolean"){l.removeAttribute(u);break}a=Me(""+a),l.setAttribute(u,a);break;case"action":case"formAction":if(typeof a=="function"){l.setAttribute(u,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof n=="function"&&(u==="formAction"?(t!=="input"&&P(l,t,"name",e.name,e,null),P(l,t,"formEncType",e.formEncType,e,null),P(l,t,"formMethod",e.formMethod,e,null),P(l,t,"formTarget",e.formTarget,e,null)):(P(l,t,"encType",e.encType,e,null),P(l,t,"method",e.method,e,null),P(l,t,"target",e.target,e,null)));if(a==null||typeof a=="symbol"||typeof a=="boolean"){l.removeAttribute(u);break}a=Me(""+a),l.setAttribute(u,a);break;case"onClick":a!=null&&(l.onclick=bn);break;case"onScroll":a!=null&&C("scroll",l);break;case"onScrollEnd":a!=null&&C("scrollend",l);break;case"dangerouslySetInnerHTML":if(a!=null){if(typeof a!="object"||!("__html"in a))throw Error(r(61));if(u=a.__html,u!=null){if(e.children!=null)throw Error(r(60));l.innerHTML=u}}break;case"multiple":l.multiple=a&&typeof a!="function"&&typeof a!="symbol";break;case"muted":l.muted=a&&typeof a!="function"&&typeof a!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(a==null||typeof a=="function"||typeof a=="boolean"||typeof a=="symbol"){l.removeAttribute("xlink:href");break}u=Me(""+a),l.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",u);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":a!=null&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,""+a):l.removeAttribute(u);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":a&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,""):l.removeAttribute(u);break;case"capture":case"download":a===!0?l.setAttribute(u,""):a!==!1&&a!=null&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,a):l.removeAttribute(u);break;case"cols":case"rows":case"size":case"span":a!=null&&typeof a!="function"&&typeof a!="symbol"&&!isNaN(a)&&1<=a?l.setAttribute(u,a):l.removeAttribute(u);break;case"rowSpan":case"start":a==null||typeof a=="function"||typeof a=="symbol"||isNaN(a)?l.removeAttribute(u):l.setAttribute(u,a);break;case"popover":C("beforetoggle",l),C("toggle",l),Ae(l,"popover",a);break;case"xlinkActuate":Ot(l,"http://www.w3.org/1999/xlink","xlink:actuate",a);break;case"xlinkArcrole":Ot(l,"http://www.w3.org/1999/xlink","xlink:arcrole",a);break;case"xlinkRole":Ot(l,"http://www.w3.org/1999/xlink","xlink:role",a);break;case"xlinkShow":Ot(l,"http://www.w3.org/1999/xlink","xlink:show",a);break;case"xlinkTitle":Ot(l,"http://www.w3.org/1999/xlink","xlink:title",a);break;case"xlinkType":Ot(l,"http://www.w3.org/1999/xlink","xlink:type",a);break;case"xmlBase":Ot(l,"http://www.w3.org/XML/1998/namespace","xml:base",a);break;case"xmlLang":Ot(l,"http://www.w3.org/XML/1998/namespace","xml:lang",a);break;case"xmlSpace":Ot(l,"http://www.w3.org/XML/1998/namespace","xml:space",a);break;case"is":Ae(l,"is",a);break;case"innerText":case"textContent":break;default:(!(2<u.length)||u[0]!=="o"&&u[0]!=="O"||u[1]!=="n"&&u[1]!=="N")&&(u=_y.get(u)||u,Ae(l,u,a))}}function qc(l,t,u,a,e,n){switch(u){case"style":zi(l,a,n);break;case"dangerouslySetInnerHTML":if(a!=null){if(typeof a!="object"||!("__html"in a))throw Error(r(61));if(u=a.__html,u!=null){if(e.children!=null)throw Error(r(60));l.innerHTML=u}}break;case"children":typeof a=="string"?xu(l,a):(typeof a=="number"||typeof a=="bigint")&&xu(l,""+a);break;case"onScroll":a!=null&&C("scroll",l);break;case"onScrollEnd":a!=null&&C("scrollend",l);break;case"onClick":a!=null&&(l.onclick=bn);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!di.hasOwnProperty(u))l:{if(u[0]==="o"&&u[1]==="n"&&(e=u.endsWith("Capture"),t=u.slice(2,e?u.length-7:void 0),n=l[Xl]||null,n=n!=null?n[u]:null,typeof n=="function"&&l.removeEventListener(t,n,e),typeof a=="function")){typeof n!="function"&&n!==null&&(u in l?l[u]=null:l.hasAttribute(u)&&l.removeAttribute(u)),l.addEventListener(t,a,e);break l}u in l?l[u]=a:a===!0?l.setAttribute(u,""):Ae(l,u,a)}}}function _l(l,t,u){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":C("error",l),C("load",l);var a=!1,e=!1,n;for(n in u)if(u.hasOwnProperty(n)){var f=u[n];if(f!=null)switch(n){case"src":a=!0;break;case"srcSet":e=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(r(137,t));default:P(l,t,n,f,u,null)}}e&&P(l,t,"srcSet",u.srcSet,u,null),a&&P(l,t,"src",u.src,u,null);return;case"input":C("invalid",l);var c=n=f=e=null,i=null,h=null;for(a in u)if(u.hasOwnProperty(a)){var S=u[a];if(S!=null)switch(a){case"name":e=S;break;case"type":f=S;break;case"checked":i=S;break;case"defaultChecked":h=S;break;case"value":n=S;break;case"defaultValue":c=S;break;case"children":case"dangerouslySetInnerHTML":if(S!=null)throw Error(r(137,t));break;default:P(l,t,a,S,u,null)}}bi(l,n,c,i,h,f,e,!1),Oe(l);return;case"select":C("invalid",l),a=f=n=null;for(e in u)if(u.hasOwnProperty(e)&&(c=u[e],c!=null))switch(e){case"value":n=c;break;case"defaultValue":f=c;break;case"multiple":a=c;default:P(l,t,e,c,u,null)}t=n,u=f,l.multiple=!!a,t!=null?Qu(l,!!a,t,!1):u!=null&&Qu(l,!!a,u,!0);return;case"textarea":C("invalid",l),n=e=a=null;for(f in u)if(u.hasOwnProperty(f)&&(c=u[f],c!=null))switch(f){case"value":a=c;break;case"defaultValue":e=c;break;case"children":n=c;break;case"dangerouslySetInnerHTML":if(c!=null)throw Error(r(91));break;default:P(l,t,f,c,u,null)}Ei(l,a,e,n),Oe(l);return;case"option":for(i in u)if(u.hasOwnProperty(i)&&(a=u[i],a!=null))switch(i){case"selected":l.selected=a&&typeof a!="function"&&typeof a!="symbol";break;default:P(l,t,i,a,u,null)}return;case"dialog":C("beforetoggle",l),C("toggle",l),C("cancel",l),C("close",l);break;case"iframe":case"object":C("load",l);break;case"video":case"audio":for(a=0;a<ae.length;a++)C(ae[a],l);break;case"image":C("error",l),C("load",l);break;case"details":C("toggle",l);break;case"embed":case"source":case"link":C("error",l),C("load",l);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(h in u)if(u.hasOwnProperty(h)&&(a=u[h],a!=null))switch(h){case"children":case"dangerouslySetInnerHTML":throw Error(r(137,t));default:P(l,t,h,a,u,null)}return;default:if(wn(t)){for(S in u)u.hasOwnProperty(S)&&(a=u[S],a!==void 0&&qc(l,t,S,a,u,void 0));return}}for(c in u)u.hasOwnProperty(c)&&(a=u[c],a!=null&&P(l,t,c,a,u,null))}function k1(l,t,u,a){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var e=null,n=null,f=null,c=null,i=null,h=null,S=null;for(m in u){var T=u[m];if(u.hasOwnProperty(m)&&T!=null)switch(m){case"checked":break;case"value":break;case"defaultValue":i=T;default:a.hasOwnProperty(m)||P(l,t,m,null,a,T)}}for(var o in a){var m=a[o];if(T=u[o],a.hasOwnProperty(o)&&(m!=null||T!=null))switch(o){case"type":n=m;break;case"name":e=m;break;case"checked":h=m;break;case"defaultChecked":S=m;break;case"value":f=m;break;case"defaultValue":c=m;break;case"children":case"dangerouslySetInnerHTML":if(m!=null)throw Error(r(137,t));break;default:m!==T&&P(l,t,o,m,a,T)}}Kn(l,f,c,i,h,S,n,e);return;case"select":m=f=c=o=null;for(n in u)if(i=u[n],u.hasOwnProperty(n)&&i!=null)switch(n){case"value":break;case"multiple":m=i;default:a.hasOwnProperty(n)||P(l,t,n,null,a,i)}for(e in a)if(n=a[e],i=u[e],a.hasOwnProperty(e)&&(n!=null||i!=null))switch(e){case"value":o=n;break;case"defaultValue":c=n;break;case"multiple":f=n;default:n!==i&&P(l,t,e,n,a,i)}t=c,u=f,a=m,o!=null?Qu(l,!!u,o,!1):!!a!=!!u&&(t!=null?Qu(l,!!u,t,!0):Qu(l,!!u,u?[]:"",!1));return;case"textarea":m=o=null;for(c in u)if(e=u[c],u.hasOwnProperty(c)&&e!=null&&!a.hasOwnProperty(c))switch(c){case"value":break;case"children":break;default:P(l,t,c,null,a,e)}for(f in a)if(e=a[f],n=u[f],a.hasOwnProperty(f)&&(e!=null||n!=null))switch(f){case"value":o=e;break;case"defaultValue":m=e;break;case"children":break;case"dangerouslySetInnerHTML":if(e!=null)throw Error(r(91));break;default:e!==n&&P(l,t,f,e,a,n)}Ti(l,o,m);return;case"option":for(var p in u)if(o=u[p],u.hasOwnProperty(p)&&o!=null&&!a.hasOwnProperty(p))switch(p){case"selected":l.selected=!1;break;default:P(l,t,p,null,a,o)}for(i in a)if(o=a[i],m=u[i],a.hasOwnProperty(i)&&o!==m&&(o!=null||m!=null))switch(i){case"selected":l.selected=o&&typeof o!="function"&&typeof o!="symbol";break;default:P(l,t,i,o,a,m)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var q in u)o=u[q],u.hasOwnProperty(q)&&o!=null&&!a.hasOwnProperty(q)&&P(l,t,q,null,a,o);for(h in a)if(o=a[h],m=u[h],a.hasOwnProperty(h)&&o!==m&&(o!=null||m!=null))switch(h){case"children":case"dangerouslySetInnerHTML":if(o!=null)throw Error(r(137,t));break;default:P(l,t,h,o,a,m)}return;default:if(wn(t)){for(var ll in u)o=u[ll],u.hasOwnProperty(ll)&&o!==void 0&&!a.hasOwnProperty(ll)&&qc(l,t,ll,void 0,a,o);for(S in a)o=a[S],m=u[S],!a.hasOwnProperty(S)||o===m||o===void 0&&m===void 0||qc(l,t,S,o,a,m);return}}for(var y in u)o=u[y],u.hasOwnProperty(y)&&o!=null&&!a.hasOwnProperty(y)&&P(l,t,y,null,a,o);for(T in a)o=a[T],m=u[T],!a.hasOwnProperty(T)||o===m||o==null&&m==null||P(l,t,T,o,a,m)}var Yc=null,Bc=null;function Tn(l){return l.nodeType===9?l:l.ownerDocument}function Av(l){switch(l){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function zv(l,t){if(l===0)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return l===1&&t==="foreignObject"?0:l}function pc(l,t){return l==="textarea"||l==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.children=="bigint"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Gc=null;function F1(){var l=window.event;return l&&l.type==="popstate"?l===Gc?!1:(Gc=l,!0):(Gc=null,!1)}var Ov=typeof setTimeout=="function"?setTimeout:void 0,I1=typeof clearTimeout=="function"?clearTimeout:void 0,_v=typeof Promise=="function"?Promise:void 0,P1=typeof queueMicrotask=="function"?queueMicrotask:typeof _v<"u"?function(l){return _v.resolve(null).then(l).catch(ld)}:Ov;function ld(l){setTimeout(function(){throw l})}function eu(l){return l==="head"}function Mv(l,t){var u=t,a=0,e=0;do{var n=u.nextSibling;if(l.removeChild(u),n&&n.nodeType===8)if(u=n.data,u==="/$"){if(0<a&&8>a){u=a;var f=l.ownerDocument;if(u&1&&ne(f.documentElement),u&2&&ne(f.body),u&4)for(u=f.head,ne(u),f=u.firstChild;f;){var c=f.nextSibling,i=f.nodeName;f[Ta]||i==="SCRIPT"||i==="STYLE"||i==="LINK"&&f.rel.toLowerCase()==="stylesheet"||u.removeChild(f),f=c}}if(e===0){l.removeChild(n),he(t);return}e--}else u==="$"||u==="$?"||u==="$!"?e++:a=u.charCodeAt(0)-48;else a=0;u=n}while(u);he(t)}function Xc(l){var t=l.firstChild;for(t&&t.nodeType===10&&(t=t.nextSibling);t;){var u=t;switch(t=t.nextSibling,u.nodeName){case"HTML":case"HEAD":case"BODY":Xc(u),jn(u);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(u.rel.toLowerCase()==="stylesheet")continue}l.removeChild(u)}}function td(l,t,u,a){for(;l.nodeType===1;){var e=u;if(l.nodeName.toLowerCase()!==t.toLowerCase()){if(!a&&(l.nodeName!=="INPUT"||l.type!=="hidden"))break}else if(a){if(!l[Ta])switch(t){case"meta":if(!l.hasAttribute("itemprop"))break;return l;case"link":if(n=l.getAttribute("rel"),n==="stylesheet"&&l.hasAttribute("data-precedence"))break;if(n!==e.rel||l.getAttribute("href")!==(e.href==null||e.href===""?null:e.href)||l.getAttribute("crossorigin")!==(e.crossOrigin==null?null:e.crossOrigin)||l.getAttribute("title")!==(e.title==null?null:e.title))break;return l;case"style":if(l.hasAttribute("data-precedence"))break;return l;case"script":if(n=l.getAttribute("src"),(n!==(e.src==null?null:e.src)||l.getAttribute("type")!==(e.type==null?null:e.type)||l.getAttribute("crossorigin")!==(e.crossOrigin==null?null:e.crossOrigin))&&n&&l.hasAttribute("async")&&!l.hasAttribute("itemprop"))break;return l;default:return l}}else if(t==="input"&&l.type==="hidden"){var n=e.name==null?null:""+e.name;if(e.type==="hidden"&&l.getAttribute("name")===n)return l}else return l;if(l=ot(l.nextSibling),l===null)break}return null}function ud(l,t,u){if(t==="")return null;for(;l.nodeType!==3;)if((l.nodeType!==1||l.nodeName!=="INPUT"||l.type!=="hidden")&&!u||(l=ot(l.nextSibling),l===null))return null;return l}function Qc(l){return l.data==="$!"||l.data==="$?"&&l.ownerDocument.readyState==="complete"}function ad(l,t){var u=l.ownerDocument;if(l.data!=="$?"||u.readyState==="complete")t();else{var a=function(){t(),u.removeEventListener("DOMContentLoaded",a)};u.addEventListener("DOMContentLoaded",a),l._reactRetry=a}}function ot(l){for(;l!=null;l=l.nextSibling){var t=l.nodeType;if(t===1||t===3)break;if(t===8){if(t=l.data,t==="$"||t==="$!"||t==="$?"||t==="F!"||t==="F")break;if(t==="/$")return null}}return l}var xc=null;function Dv(l){l=l.previousSibling;for(var t=0;l;){if(l.nodeType===8){var u=l.data;if(u==="$"||u==="$!"||u==="$?"){if(t===0)return l;t--}else u==="/$"&&t++}l=l.previousSibling}return null}function Uv(l,t,u){switch(t=Tn(u),l){case"html":if(l=t.documentElement,!l)throw Error(r(452));return l;case"head":if(l=t.head,!l)throw Error(r(453));return l;case"body":if(l=t.body,!l)throw Error(r(454));return l;default:throw Error(r(451))}}function ne(l){for(var t=l.attributes;t.length;)l.removeAttributeNode(t[0]);jn(l)}var st=new Map,Rv=new Set;function En(l){return typeof l.getRootNode=="function"?l.getRootNode():l.nodeType===9?l:l.ownerDocument}var Qt=O.d;O.d={f:ed,r:nd,D:fd,C:cd,L:id,m:sd,X:yd,S:vd,M:dd};function ed(){var l=Qt.f(),t=dn();return l||t}function nd(l){var t=Bu(l);t!==null&&t.tag===5&&t.type==="form"?$0(t):Qt.r(l)}var oa=typeof document>"u"?null:document;function Hv(l,t,u){var a=oa;if(a&&typeof t=="string"&&t){var e=ut(t);e='link[rel="'+l+'"][href="'+e+'"]',typeof u=="string"&&(e+='[crossorigin="'+u+'"]'),Rv.has(e)||(Rv.add(e),l={rel:l,crossOrigin:u,href:t},a.querySelector(e)===null&&(t=a.createElement("link"),_l(t,"link",l),bl(t),a.head.appendChild(t)))}}function fd(l){Qt.D(l),Hv("dns-prefetch",l,null)}function cd(l,t){Qt.C(l,t),Hv("preconnect",l,t)}function id(l,t,u){Qt.L(l,t,u);var a=oa;if(a&&l&&t){var e='link[rel="preload"][as="'+ut(t)+'"]';t==="image"&&u&&u.imageSrcSet?(e+='[imagesrcset="'+ut(u.imageSrcSet)+'"]',typeof u.imageSizes=="string"&&(e+='[imagesizes="'+ut(u.imageSizes)+'"]')):e+='[href="'+ut(l)+'"]';var n=e;switch(t){case"style":n=ma(l);break;case"script":n=ra(l)}st.has(n)||(l=R({rel:"preload",href:t==="image"&&u&&u.imageSrcSet?void 0:l,as:t},u),st.set(n,l),a.querySelector(e)!==null||t==="style"&&a.querySelector(fe(n))||t==="script"&&a.querySelector(ce(n))||(t=a.createElement("link"),_l(t,"link",l),bl(t),a.head.appendChild(t)))}}function sd(l,t){Qt.m(l,t);var u=oa;if(u&&l){var a=t&&typeof t.as=="string"?t.as:"script",e='link[rel="modulepreload"][as="'+ut(a)+'"][href="'+ut(l)+'"]',n=e;switch(a){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":n=ra(l)}if(!st.has(n)&&(l=R({rel:"modulepreload",href:l},t),st.set(n,l),u.querySelector(e)===null)){switch(a){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(u.querySelector(ce(n)))return}a=u.createElement("link"),_l(a,"link",l),bl(a),u.head.appendChild(a)}}}function vd(l,t,u){Qt.S(l,t,u);var a=oa;if(a&&l){var e=pu(a).hoistableStyles,n=ma(l);t=t||"default";var f=e.get(n);if(!f){var c={loading:0,preload:null};if(f=a.querySelector(fe(n)))c.loading=5;else{l=R({rel:"stylesheet",href:l,"data-precedence":t},u),(u=st.get(n))&&Zc(l,u);var i=f=a.createElement("link");bl(i),_l(i,"link",l),i._p=new Promise(function(h,S){i.onload=h,i.onerror=S}),i.addEventListener("load",function(){c.loading|=1}),i.addEventListener("error",function(){c.loading|=2}),c.loading|=4,An(f,t,a)}f={type:"stylesheet",instance:f,count:1,state:c},e.set(n,f)}}}function yd(l,t){Qt.X(l,t);var u=oa;if(u&&l){var a=pu(u).hoistableScripts,e=ra(l),n=a.get(e);n||(n=u.querySelector(ce(e)),n||(l=R({src:l,async:!0},t),(t=st.get(e))&&jc(l,t),n=u.createElement("script"),bl(n),_l(n,"link",l),u.head.appendChild(n)),n={type:"script",instance:n,count:1,state:null},a.set(e,n))}}function dd(l,t){Qt.M(l,t);var u=oa;if(u&&l){var a=pu(u).hoistableScripts,e=ra(l),n=a.get(e);n||(n=u.querySelector(ce(e)),n||(l=R({src:l,async:!0,type:"module"},t),(t=st.get(e))&&jc(l,t),n=u.createElement("script"),bl(n),_l(n,"link",l),u.head.appendChild(n)),n={type:"script",instance:n,count:1,state:null},a.set(e,n))}}function Nv(l,t,u,a){var e=(e=G.current)?En(e):null;if(!e)throw Error(r(446));switch(l){case"meta":case"title":return null;case"style":return typeof u.precedence=="string"&&typeof u.href=="string"?(t=ma(u.href),u=pu(e).hoistableStyles,a=u.get(t),a||(a={type:"style",instance:null,count:0,state:null},u.set(t,a)),a):{type:"void",instance:null,count:0,state:null};case"link":if(u.rel==="stylesheet"&&typeof u.href=="string"&&typeof u.precedence=="string"){l=ma(u.href);var n=pu(e).hoistableStyles,f=n.get(l);if(f||(e=e.ownerDocument||e,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},n.set(l,f),(n=e.querySelector(fe(l)))&&!n._p&&(f.instance=n,f.state.loading=5),st.has(l)||(u={rel:"preload",as:"style",href:u.href,crossOrigin:u.crossOrigin,integrity:u.integrity,media:u.media,hrefLang:u.hrefLang,referrerPolicy:u.referrerPolicy},st.set(l,u),n||hd(e,l,u,f.state))),t&&a===null)throw Error(r(528,""));return f}if(t&&a!==null)throw Error(r(529,""));return null;case"script":return t=u.async,u=u.src,typeof u=="string"&&t&&typeof t!="function"&&typeof t!="symbol"?(t=ra(u),u=pu(e).hoistableScripts,a=u.get(t),a||(a={type:"script",instance:null,count:0,state:null},u.set(t,a)),a):{type:"void",instance:null,count:0,state:null};default:throw Error(r(444,l))}}function ma(l){return'href="'+ut(l)+'"'}function fe(l){return'link[rel="stylesheet"]['+l+"]"}function qv(l){return R({},l,{"data-precedence":l.precedence,precedence:null})}function hd(l,t,u,a){l.querySelector('link[rel="preload"][as="style"]['+t+"]")?a.loading=1:(t=l.createElement("link"),a.preload=t,t.addEventListener("load",function(){return a.loading|=1}),t.addEventListener("error",function(){return a.loading|=2}),_l(t,"link",u),bl(t),l.head.appendChild(t))}function ra(l){return'[src="'+ut(l)+'"]'}function ce(l){return"script[async]"+l}function Yv(l,t,u){if(t.count++,t.instance===null)switch(t.type){case"style":var a=l.querySelector('style[data-href~="'+ut(u.href)+'"]');if(a)return t.instance=a,bl(a),a;var e=R({},u,{"data-href":u.href,"data-precedence":u.precedence,href:null,precedence:null});return a=(l.ownerDocument||l).createElement("style"),bl(a),_l(a,"style",e),An(a,u.precedence,l),t.instance=a;case"stylesheet":e=ma(u.href);var n=l.querySelector(fe(e));if(n)return t.state.loading|=4,t.instance=n,bl(n),n;a=qv(u),(e=st.get(e))&&Zc(a,e),n=(l.ownerDocument||l).createElement("link"),bl(n);var f=n;return f._p=new Promise(function(c,i){f.onload=c,f.onerror=i}),_l(n,"link",a),t.state.loading|=4,An(n,u.precedence,l),t.instance=n;case"script":return n=ra(u.src),(e=l.querySelector(ce(n)))?(t.instance=e,bl(e),e):(a=u,(e=st.get(n))&&(a=R({},u),jc(a,e)),l=l.ownerDocument||l,e=l.createElement("script"),bl(e),_l(e,"link",a),l.head.appendChild(e),t.instance=e);case"void":return null;default:throw Error(r(443,t.type))}else t.type==="stylesheet"&&(t.state.loading&4)===0&&(a=t.instance,t.state.loading|=4,An(a,u.precedence,l));return t.instance}function An(l,t,u){for(var a=u.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),e=a.length?a[a.length-1]:null,n=e,f=0;f<a.length;f++){var c=a[f];if(c.dataset.precedence===t)n=c;else if(n!==e)break}n?n.parentNode.insertBefore(l,n.nextSibling):(t=u.nodeType===9?u.head:u,t.insertBefore(l,t.firstChild))}function Zc(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.title==null&&(l.title=t.title)}function jc(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.integrity==null&&(l.integrity=t.integrity)}var zn=null;function Bv(l,t,u){if(zn===null){var a=new Map,e=zn=new Map;e.set(u,a)}else e=zn,a=e.get(u),a||(a=new Map,e.set(u,a));if(a.has(l))return a;for(a.set(l,null),u=u.getElementsByTagName(l),e=0;e<u.length;e++){var n=u[e];if(!(n[Ta]||n[Rl]||l==="link"&&n.getAttribute("rel")==="stylesheet")&&n.namespaceURI!=="http://www.w3.org/2000/svg"){var f=n.getAttribute(t)||"";f=l+f;var c=a.get(f);c?c.push(n):a.set(f,[n])}}return a}function pv(l,t,u){l=l.ownerDocument||l,l.head.insertBefore(u,t==="title"?l.querySelector("head > title"):null)}function od(l,t,u){if(u===1||t.itemProp!=null)return!1;switch(l){case"meta":case"title":return!0;case"style":if(typeof t.precedence!="string"||typeof t.href!="string"||t.href==="")break;return!0;case"link":if(typeof t.rel!="string"||typeof t.href!="string"||t.href===""||t.onLoad||t.onError)break;switch(t.rel){case"stylesheet":return l=t.disabled,typeof t.precedence=="string"&&l==null;default:return!0}case"script":if(t.async&&typeof t.async!="function"&&typeof t.async!="symbol"&&!t.onLoad&&!t.onError&&t.src&&typeof t.src=="string")return!0}return!1}function Gv(l){return!(l.type==="stylesheet"&&(l.state.loading&3)===0)}var ie=null;function md(){}function rd(l,t,u){if(ie===null)throw Error(r(475));var a=ie;if(t.type==="stylesheet"&&(typeof u.media!="string"||matchMedia(u.media).matches!==!1)&&(t.state.loading&4)===0){if(t.instance===null){var e=ma(u.href),n=l.querySelector(fe(e));if(n){l=n._p,l!==null&&typeof l=="object"&&typeof l.then=="function"&&(a.count++,a=On.bind(a),l.then(a,a)),t.state.loading|=4,t.instance=n,bl(n);return}n=l.ownerDocument||l,u=qv(u),(e=st.get(e))&&Zc(u,e),n=n.createElement("link"),bl(n);var f=n;f._p=new Promise(function(c,i){f.onload=c,f.onerror=i}),_l(n,"link",u),t.instance=n}a.stylesheets===null&&(a.stylesheets=new Map),a.stylesheets.set(t,l),(l=t.state.preload)&&(t.state.loading&3)===0&&(a.count++,t=On.bind(a),l.addEventListener("load",t),l.addEventListener("error",t))}}function Sd(){if(ie===null)throw Error(r(475));var l=ie;return l.stylesheets&&l.count===0&&Cc(l,l.stylesheets),0<l.count?function(t){var u=setTimeout(function(){if(l.stylesheets&&Cc(l,l.stylesheets),l.unsuspend){var a=l.unsuspend;l.unsuspend=null,a()}},6e4);return l.unsuspend=t,function(){l.unsuspend=null,clearTimeout(u)}}:null}function On(){if(this.count--,this.count===0){if(this.stylesheets)Cc(this,this.stylesheets);else if(this.unsuspend){var l=this.unsuspend;this.unsuspend=null,l()}}}var _n=null;function Cc(l,t){l.stylesheets=null,l.unsuspend!==null&&(l.count++,_n=new Map,t.forEach(gd,l),_n=null,On.call(l))}function gd(l,t){if(!(t.state.loading&4)){var u=_n.get(l);if(u)var a=u.get(null);else{u=new Map,_n.set(l,u);for(var e=l.querySelectorAll("link[data-precedence],style[data-precedence]"),n=0;n<e.length;n++){var f=e[n];(f.nodeName==="LINK"||f.getAttribute("media")!=="not all")&&(u.set(f.dataset.precedence,f),a=f)}a&&u.set(null,a)}e=t.instance,f=e.getAttribute("data-precedence"),n=u.get(f)||a,n===a&&u.set(null,e),u.set(f,e),this.count++,a=On.bind(this),e.addEventListener("load",a),e.addEventListener("error",a),n?n.parentNode.insertBefore(e,n.nextSibling):(l=l.nodeType===9?l.head:l,l.insertBefore(e,l.firstChild)),t.state.loading|=4}}var se={$$typeof:Ml,Provider:null,Consumer:null,_currentValue:B,_currentValue2:B,_threadCount:0};function bd(l,t,u,a,e,n,f,c){this.tag=1,this.containerInfo=l,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Xn(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Xn(0),this.hiddenUpdates=Xn(null),this.identifierPrefix=a,this.onUncaughtError=e,this.onCaughtError=n,this.onRecoverableError=f,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=c,this.incompleteTransitions=new Map}function Xv(l,t,u,a,e,n,f,c,i,h,S,T){return l=new bd(l,t,u,f,c,i,h,T),t=1,n===!0&&(t|=24),n=$l(3,null,null,t),l.current=n,n.stateNode=l,t=zf(),t.refCount++,l.pooledCache=t,t.refCount++,n.memoizedState={element:a,isDehydrated:u,cache:t},Df(n),l}function Qv(l){return l?(l=wu,l):wu}function xv(l,t,u,a,e,n){e=Qv(e),a.context===null?a.context=e:a.pendingContext=e,a=Kt(t),a.payload={element:u},n=n===void 0?null:n,n!==null&&(a.callback=n),u=Jt(l,a,t),u!==null&&(lt(u,l,t),xa(u,l,t))}function Zv(l,t){if(l=l.memoizedState,l!==null&&l.dehydrated!==null){var u=l.retryLane;l.retryLane=u!==0&&u<t?u:t}}function Vc(l,t){Zv(l,t),(l=l.alternate)&&Zv(l,t)}function jv(l){if(l.tag===13){var t=Ju(l,67108864);t!==null&&lt(t,l,67108864),Vc(l,67108864)}}var Mn=!0;function Td(l,t,u,a){var e=g.T;g.T=null;var n=O.p;try{O.p=2,Lc(l,t,u,a)}finally{O.p=n,g.T=e}}function Ed(l,t,u,a){var e=g.T;g.T=null;var n=O.p;try{O.p=8,Lc(l,t,u,a)}finally{O.p=n,g.T=e}}function Lc(l,t,u,a){if(Mn){var e=Kc(a);if(e===null)Nc(l,t,a,Dn,u),Vv(l,a);else if(zd(e,l,t,u,a))a.stopPropagation();else if(Vv(l,a),t&4&&-1<Ad.indexOf(l)){for(;e!==null;){var n=Bu(e);if(n!==null)switch(n.tag){case 3:if(n=n.stateNode,n.current.memoizedState.isDehydrated){var f=hu(n.pendingLanes);if(f!==0){var c=n;for(c.pendingLanes|=2,c.entangledLanes|=2;f;){var i=1<<31-wl(f);c.entanglements[1]|=i,f&=~i}Et(n),($&6)===0&&(vn=rt()+500,ue(0))}}break;case 13:c=Ju(n,2),c!==null&&lt(c,n,2),dn(),Vc(n,2)}if(n=Kc(a),n===null&&Nc(l,t,a,Dn,u),n===e)break;e=n}e!==null&&a.stopPropagation()}else Nc(l,t,a,null,u)}}function Kc(l){return l=$n(l),Jc(l)}var Dn=null;function Jc(l){if(Dn=null,l=Yu(l),l!==null){var t=w(l);if(t===null)l=null;else{var u=t.tag;if(u===13){if(l=dl(t),l!==null)return l;l=null}else if(u===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;l=null}else t!==l&&(l=null)}}return Dn=l,null}function Cv(l){switch(l){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(cy()){case ui:return 2;case ai:return 8;case ge:case iy:return 32;case ei:return 268435456;default:return 32}default:return 32}}var wc=!1,nu=null,fu=null,cu=null,ve=new Map,ye=new Map,iu=[],Ad="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function Vv(l,t){switch(l){case"focusin":case"focusout":nu=null;break;case"dragenter":case"dragleave":fu=null;break;case"mouseover":case"mouseout":cu=null;break;case"pointerover":case"pointerout":ve.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ye.delete(t.pointerId)}}function de(l,t,u,a,e,n){return l===null||l.nativeEvent!==n?(l={blockedOn:t,domEventName:u,eventSystemFlags:a,nativeEvent:n,targetContainers:[e]},t!==null&&(t=Bu(t),t!==null&&jv(t)),l):(l.eventSystemFlags|=a,t=l.targetContainers,e!==null&&t.indexOf(e)===-1&&t.push(e),l)}function zd(l,t,u,a,e){switch(t){case"focusin":return nu=de(nu,l,t,u,a,e),!0;case"dragenter":return fu=de(fu,l,t,u,a,e),!0;case"mouseover":return cu=de(cu,l,t,u,a,e),!0;case"pointerover":var n=e.pointerId;return ve.set(n,de(ve.get(n)||null,l,t,u,a,e)),!0;case"gotpointercapture":return n=e.pointerId,ye.set(n,de(ye.get(n)||null,l,t,u,a,e)),!0}return!1}function Lv(l){var t=Yu(l.target);if(t!==null){var u=w(t);if(u!==null){if(t=u.tag,t===13){if(t=dl(u),t!==null){l.blockedOn=t,ry(l.priority,function(){if(u.tag===13){var a=Pl();a=Qn(a);var e=Ju(u,a);e!==null&&lt(e,u,a),Vc(u,a)}});return}}else if(t===3&&u.stateNode.current.memoizedState.isDehydrated){l.blockedOn=u.tag===3?u.stateNode.containerInfo:null;return}}}l.blockedOn=null}function Un(l){if(l.blockedOn!==null)return!1;for(var t=l.targetContainers;0<t.length;){var u=Kc(l.nativeEvent);if(u===null){u=l.nativeEvent;var a=new u.constructor(u.type,u);Wn=a,u.target.dispatchEvent(a),Wn=null}else return t=Bu(u),t!==null&&jv(t),l.blockedOn=u,!1;t.shift()}return!0}function Kv(l,t,u){Un(l)&&u.delete(t)}function Od(){wc=!1,nu!==null&&Un(nu)&&(nu=null),fu!==null&&Un(fu)&&(fu=null),cu!==null&&Un(cu)&&(cu=null),ve.forEach(Kv),ye.forEach(Kv)}function Rn(l,t){l.blockedOn===t&&(l.blockedOn=null,wc||(wc=!0,M.unstable_scheduleCallback(M.unstable_NormalPriority,Od)))}var Hn=null;function Jv(l){Hn!==l&&(Hn=l,M.unstable_scheduleCallback(M.unstable_NormalPriority,function(){Hn===l&&(Hn=null);for(var t=0;t<l.length;t+=3){var u=l[t],a=l[t+1],e=l[t+2];if(typeof a!="function"){if(Jc(a||u)===null)continue;break}var n=Bu(u);n!==null&&(l.splice(t,3),t-=3,Jf(n,{pending:!0,data:e,method:u.method,action:a},a,e))}}))}function he(l){function t(i){return Rn(i,l)}nu!==null&&Rn(nu,l),fu!==null&&Rn(fu,l),cu!==null&&Rn(cu,l),ve.forEach(t),ye.forEach(t);for(var u=0;u<iu.length;u++){var a=iu[u];a.blockedOn===l&&(a.blockedOn=null)}for(;0<iu.length&&(u=iu[0],u.blockedOn===null);)Lv(u),u.blockedOn===null&&iu.shift();if(u=(l.ownerDocument||l).$$reactFormReplay,u!=null)for(a=0;a<u.length;a+=3){var e=u[a],n=u[a+1],f=e[Xl]||null;if(typeof n=="function")f||Jv(u);else if(f){var c=null;if(n&&n.hasAttribute("formAction")){if(e=n,f=n[Xl]||null)c=f.formAction;else if(Jc(e)!==null)continue}else c=f.action;typeof c=="function"?u[a+1]=c:(u.splice(a,3),a-=3),Jv(u)}}}function Wc(l){this._internalRoot=l}Nn.prototype.render=Wc.prototype.render=function(l){var t=this._internalRoot;if(t===null)throw Error(r(409));var u=t.current,a=Pl();xv(u,a,l,t,null,null)},Nn.prototype.unmount=Wc.prototype.unmount=function(){var l=this._internalRoot;if(l!==null){this._internalRoot=null;var t=l.containerInfo;xv(l.current,2,null,l,null,null),dn(),t[qu]=null}};function Nn(l){this._internalRoot=l}Nn.prototype.unstable_scheduleHydration=function(l){if(l){var t=si();l={blockedOn:null,target:l,priority:t};for(var u=0;u<iu.length&&t!==0&&t<iu[u].priority;u++);iu.splice(u,0,l),u===0&&Lv(l)}};var wv=yl.version;if(wv!=="19.1.1")throw Error(r(527,wv,"19.1.1"));O.findDOMNode=function(l){var t=l._reactInternals;if(t===void 0)throw typeof l.render=="function"?Error(r(188)):(l=Object.keys(l).join(","),Error(r(268,l)));return l=H(t),l=l!==null?A(l):null,l=l===null?null:l.stateNode,l};var _d={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:g,reconcilerVersion:"19.1.1"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var qn=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!qn.isDisabled&&qn.supportsFiber)try{Sa=qn.inject(_d),Jl=qn}catch{}}return me.createRoot=function(l,t){if(!Z(l))throw Error(r(299));var u=!1,a="",e=ss,n=vs,f=ys,c=null;return t!=null&&(t.unstable_strictMode===!0&&(u=!0),t.identifierPrefix!==void 0&&(a=t.identifierPrefix),t.onUncaughtError!==void 0&&(e=t.onUncaughtError),t.onCaughtError!==void 0&&(n=t.onCaughtError),t.onRecoverableError!==void 0&&(f=t.onRecoverableError),t.unstable_transitionCallbacks!==void 0&&(c=t.unstable_transitionCallbacks)),t=Xv(l,1,!1,null,null,u,a,e,n,f,c,null),l[qu]=t.current,Hc(l),new Wc(t)},me.hydrateRoot=function(l,t,u){if(!Z(l))throw Error(r(299));var a=!1,e="",n=ss,f=vs,c=ys,i=null,h=null;return u!=null&&(u.unstable_strictMode===!0&&(a=!0),u.identifierPrefix!==void 0&&(e=u.identifierPrefix),u.onUncaughtError!==void 0&&(n=u.onUncaughtError),u.onCaughtError!==void 0&&(f=u.onCaughtError),u.onRecoverableError!==void 0&&(c=u.onRecoverableError),u.unstable_transitionCallbacks!==void 0&&(i=u.unstable_transitionCallbacks),u.formState!==void 0&&(h=u.formState)),t=Xv(l,1,!0,t,u??null,a,e,n,f,c,i,h),t.context=Qv(null),u=t.current,a=Pl(),a=Qn(a),e=Kt(a),e.callback=null,Jt(u,e,a),u=a,t.current.lanes=u,ba(t,u),Et(t),l[qu]=t.current,Hc(l),new Nn(t)},me.version="19.1.1",me}var ay;function Xd(){if(ay)return Fc.exports;ay=1;function M(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(M)}catch(yl){console.error(yl)}}return M(),Fc.exports=Gd(),Fc.exports}var Qd=Xd();const xd=ey(Qd);function Zd(){return re.jsxs("div",{className:"min-h-screen bg-gray-100 p-6",children:[re.jsx("h1",{className:"text-3xl font-bold text-blue-600",children:"🏃‍♂️ Marathon Coach Planner"}),re.jsx("button",{className:"mt-4 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 shadow",children:"Open Modal"})]})}xd.createRoot(document.getElementById("root")).render(re.jsx(Nd.StrictMode,{children:re.jsx(Zd,{})}));

--- FILE: ./dist/assets/index-CvjmrJox.css ---
/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */@layer properties{@supports ((-webkit-hyphens:none) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-scale-x:1;--tw-scale-y:1;--tw-scale-z:1;--tw-border-style:solid;--tw-font-weight:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-duration:initial;--tw-ease:initial}}}@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-red-100:oklch(93.6% .032 17.717);--color-red-200:oklch(88.5% .062 18.334);--color-red-600:oklch(57.7% .245 27.325);--color-yellow-100:oklch(97.3% .071 103.193);--color-yellow-500:oklch(79.5% .184 86.047);--color-green-500:oklch(72.3% .219 149.579);--color-green-600:oklch(62.7% .194 149.214);--color-blue-400:oklch(70.7% .165 254.624);--color-blue-500:oklch(62.3% .214 259.815);--color-blue-600:oklch(54.6% .245 262.881);--color-blue-700:oklch(48.8% .243 264.376);--color-gray-100:oklch(96.7% .003 264.542);--color-gray-200:oklch(92.8% .006 264.531);--color-gray-300:oklch(87.2% .01 258.338);--color-gray-400:oklch(70.7% .022 261.325);--color-gray-500:oklch(55.1% .027 264.364);--color-gray-600:oklch(44.6% .03 256.802);--color-gray-700:oklch(37.3% .034 259.733);--color-gray-800:oklch(27.8% .033 256.848);--color-black:#000;--color-white:#fff;--spacing:.25rem;--container-md:28rem;--container-7xl:80rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--text-xl:1.25rem;--text-xl--line-height:calc(1.75/1.25);--text-2xl:1.5rem;--text-2xl--line-height:calc(2/1.5);--text-3xl:1.875rem;--text-3xl--line-height: 1.2 ;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--radius-lg:.5rem;--radius-2xl:1rem;--ease-in:cubic-bezier(.4,0,1,1);--ease-out:cubic-bezier(0,0,.2,1);--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::-moz-placeholder{opacity:1}::placeholder{opacity:1}@supports (not (-webkit-appearance:-apple-pay-button)) or (contain-intrinsic-size:1px){::-moz-placeholder{color:currentColor}::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::-moz-placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.visible{visibility:visible}.absolute{position:absolute}.fixed{position:fixed}.relative{position:relative}.inset-0{inset:calc(var(--spacing)*0)}.z-10{z-index:10}.z-50{z-index:50}.z-\[999\]{z-index:999}.z-\[9999\]{z-index:9999}.container{width:100%}@media (min-width:40rem){.container{max-width:40rem}}@media (min-width:48rem){.container{max-width:48rem}}@media (min-width:64rem){.container{max-width:64rem}}@media (min-width:80rem){.container{max-width:80rem}}@media (min-width:96rem){.container{max-width:96rem}}.mx-auto{margin-inline:auto}.mt-2{margin-top:calc(var(--spacing)*2)}.mt-4{margin-top:calc(var(--spacing)*4)}.mt-6{margin-top:calc(var(--spacing)*6)}.mt-auto{margin-top:auto}.mb-1{margin-bottom:calc(var(--spacing)*1)}.mb-4{margin-bottom:calc(var(--spacing)*4)}.mb-6{margin-bottom:calc(var(--spacing)*6)}.ml-auto{margin-left:auto}.flex{display:flex}.grid{display:grid}.min-h-\[110px\]{min-height:110px}.min-h-screen{min-height:100vh}.w-full{width:100%}.max-w-7xl{max-width:var(--container-7xl)}.max-w-md{max-width:var(--container-md)}.scale-95{--tw-scale-x:95%;--tw-scale-y:95%;--tw-scale-z:95%;scale:var(--tw-scale-x)var(--tw-scale-y)}.scale-100{--tw-scale-x:100%;--tw-scale-y:100%;--tw-scale-z:100%;scale:var(--tw-scale-x)var(--tw-scale-y)}.cursor-move{cursor:move}.grid-cols-7{grid-template-columns:repeat(7,minmax(0,1fr))}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-between{justify-content:space-between}.justify-center{justify-content:center}.gap-1{gap:calc(var(--spacing)*1)}.gap-2{gap:calc(var(--spacing)*2)}.gap-3{gap:calc(var(--spacing)*3)}.self-end{align-self:flex-end}.overflow-hidden{overflow:hidden}.rounded{border-radius:.25rem}.rounded-2xl{border-radius:var(--radius-2xl)}.rounded-lg{border-radius:var(--radius-lg)}.border{border-style:var(--tw-border-style);border-width:1px}.border-gray-300{border-color:var(--color-gray-300)}.bg-black{background-color:var(--color-black)}.bg-blue-600{background-color:var(--color-blue-600)}.bg-gray-100{background-color:var(--color-gray-100)}.bg-gray-200{background-color:var(--color-gray-200)}.bg-red-100{background-color:var(--color-red-100)}.bg-white{background-color:var(--color-white)}.bg-yellow-100{background-color:var(--color-yellow-100)}.p-3{padding:calc(var(--spacing)*3)}.p-4{padding:calc(var(--spacing)*4)}.p-6{padding:calc(var(--spacing)*6)}.px-3{padding-inline:calc(var(--spacing)*3)}.px-4{padding-inline:calc(var(--spacing)*4)}.py-2{padding-block:calc(var(--spacing)*2)}.text-center{text-align:center}.text-2xl{font-size:var(--text-2xl);line-height:var(--tw-leading,var(--text-2xl--line-height))}.text-3xl{font-size:var(--text-3xl);line-height:var(--tw-leading,var(--text-3xl--line-height))}.text-lg{font-size:var(--text-lg);line-height:var(--tw-leading,var(--text-lg--line-height))}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.text-xl{font-size:var(--text-xl);line-height:var(--tw-leading,var(--text-xl--line-height))}.text-xs{font-size:var(--text-xs);line-height:var(--tw-leading,var(--text-xs--line-height))}.font-bold{--tw-font-weight:var(--font-weight-bold);font-weight:var(--font-weight-bold)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.font-semibold{--tw-font-weight:var(--font-weight-semibold);font-weight:var(--font-weight-semibold)}.text-blue-500{color:var(--color-blue-500)}.text-blue-600{color:var(--color-blue-600)}.text-gray-400{color:var(--color-gray-400)}.text-gray-500{color:var(--color-gray-500)}.text-gray-600{color:var(--color-gray-600)}.text-gray-700{color:var(--color-gray-700)}.text-gray-800{color:var(--color-gray-800)}.text-green-500{color:var(--color-green-500)}.text-green-600{color:var(--color-green-600)}.text-red-600{color:var(--color-red-600)}.text-white{color:var(--color-white)}.opacity-0{opacity:0}.opacity-100{opacity:1}.shadow{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-md{--tw-shadow:0 4px 6px -1px var(--tw-shadow-color,#0000001a),0 2px 4px -2px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-xl{--tw-shadow:0 20px 25px -5px var(--tw-shadow-color,#0000001a),0 8px 10px -6px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.ring-2{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.ring-yellow-500{--tw-ring-color:var(--color-yellow-500)}.transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,visibility,content-visibility,overlay,pointer-events;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.duration-150{--tw-duration:.15s;transition-duration:.15s}.duration-200{--tw-duration:.2s;transition-duration:.2s}.ease-in{--tw-ease:var(--ease-in);transition-timing-function:var(--ease-in)}.ease-out{--tw-ease:var(--ease-out);transition-timing-function:var(--ease-out)}@media (hover:hover){.hover\:bg-blue-700:hover{background-color:var(--color-blue-700)}.hover\:bg-gray-300:hover{background-color:var(--color-gray-300)}.hover\:bg-red-200:hover{background-color:var(--color-red-200)}.hover\:text-blue-500:hover{color:var(--color-blue-500)}.hover\:ring-2:hover{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.hover\:ring-blue-400:hover{--tw-ring-color:var(--color-blue-400)}}}@property --tw-scale-x{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-y{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-z{syntax:"*";inherits:false;initial-value:1}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-duration{syntax:"*";inherits:false}@property --tw-ease{syntax:"*";inherits:false}#root{max-width:1280px;margin:0 auto;padding:2rem;text-align:center}.logo{height:6em;padding:1.5em;will-change:filter;transition:filter .3s}.logo:hover{filter:drop-shadow(0 0 2em #646cffaa)}.logo.react:hover{filter:drop-shadow(0 0 2em #61dafbaa)}@keyframes logo-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@media (prefers-reduced-motion: no-preference){a:nth-of-type(2) .logo{animation:logo-spin infinite 20s linear}}.card{padding:2em}.read-the-docs{color:#888}

--- FILE: ./dist/tailwind.css ---
/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */
@layer properties{@supports (((-webkit-hyphens:none)) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-scale-x:1;--tw-scale-y:1;--tw-scale-z:1;--tw-border-style:solid;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-duration:initial}}}.visible{visibility:visible}.absolute{position:absolute}.fixed{position:fixed}.relative{position:relative}.z-10{z-index:10}.z-50{z-index:50}.z-\[999\]{z-index:999}.z-\[9999\]{z-index:9999}.container{width:100%}.mx-auto{margin-inline:auto}.mt-auto{margin-top:auto}.ml-auto{margin-left:auto}.flex{display:flex}.grid{display:grid}.min-h-\[110px\]{min-height:110px}.min-h-screen{min-height:100vh}.w-full{width:100%}.scale-95{--tw-scale-x:95%;--tw-scale-y:95%;--tw-scale-z:95%;scale:var(--tw-scale-x)var(--tw-scale-y)}.scale-100{--tw-scale-x:100%;--tw-scale-y:100%;--tw-scale-z:100%;scale:var(--tw-scale-x)var(--tw-scale-y)}.cursor-move{cursor:move}.grid-cols-7{grid-template-columns:repeat(7,minmax(0,1fr))}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-between{justify-content:space-between}.justify-center{justify-content:center}.self-end{align-self:flex-end}.overflow-hidden{overflow:hidden}.border{border-style:var(--tw-border-style);border-width:1px}.text-center{text-align:center}.opacity-0{opacity:0}.opacity-100{opacity:1}.ring-2{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,visibility,content-visibility,overlay,pointer-events;transition-timing-function:var(--tw-ease,ease);transition-duration:var(--tw-duration,0s)}.duration-150{--tw-duration:.15s;transition-duration:.15s}.duration-200{--tw-duration:.2s;transition-duration:.2s}@media (hover:hover){.hover\:ring-2:hover{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}}@property --tw-scale-x{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-y{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-z{syntax:"*";inherits:false;initial-value:1}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-duration{syntax:"*";inherits:false}
--- FILE: ./eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

--- FILE: ./node_modules/.package-lock.json ---
{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@apidevtools/json-schema-ref-parser": {
      "version": "11.9.3",
      "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-11.9.3.tgz",
      "integrity": "sha512-60vepv88RwcJtSHrD6MjIL6Ta3SOYbgfnkHb+ppAVK+o9mXprRtulx7VlRl3lN3bbvysAfCS7WMVfhUYemB0IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jsdevtools/ono": "^7.1.3",
        "@types/json-schema": "^7.0.15",
        "js-yaml": "^4.1.0"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/philsturgeon"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@csstools/selector-resolve-nested": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@csstools/selector-resolve-nested/-/selector-resolve-nested-3.1.0.tgz",
      "integrity": "sha512-mf1LEW0tJLKfWyvn5KdDrhpxHyuxpbNwTIwOYLIvsTffeyOf85j5oIzfG0yosxDgx/sswlqBnESYUcQH0vgZ0g==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "postcss-selector-parser": "^7.0.0"
      }
    },
    "node_modules/@csstools/selector-specificity": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/selector-specificity/-/selector-specificity-5.0.0.tgz",
      "integrity": "sha512-PCqQV3c4CoVm3kdPhyeZ07VmBRdH2EpMFA/pd9OASpOEC3aXNGoqPDAZ80D0cLpMBxnmk0+yNhGsEx31hq7Gtw==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "postcss-selector-parser": "^7.0.0"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.8.tgz",
      "integrity": "sha512-ASFQhgY4ElXh3nDcOMTkQero4b1lgubskNlhIfJrsH5OKZXDpUAKBlNS0Kx81jwOBp+HCeZqmoJuihTv57/jvQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.8.tgz",
      "integrity": "sha512-cn3Yr7+OaaZq1c+2pe+8yxC8E144SReCQjN6/2ynubzYjvyqZjTXfQJpAcQpsdJq3My7XADANiYGHoFC69pLQw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.32.0.tgz",
      "integrity": "sha512-BBpRFZK3eX6uMLKz8WxFOBIFFcGFJ/g8XuwjTHCqHROSIsopI+ddn/d5Cfh36+7+e5edVS8dbSHnBNhrLEX0zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@floating-ui/core": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.3.tgz",
      "integrity": "sha512-sGnvb5dmrJaKEZ+LDIpguvdX3bDlEllmv4/ClQ9awcmCZrlx5jQyyMWFM5kBI+EyNOCDDiKk8il0zeuX3Zlg/w==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.3.tgz",
      "integrity": "sha512-uZA413QEpNuhtb3/iIKoYMSK07keHPYeXF02Zhd6e213j+d1NamLix/mCLxBUDW/Gx52sPH2m+chlUsyaBs/Ag==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.7.3",
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/react": {
      "version": "0.26.28",
      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.26.28.tgz",
      "integrity": "sha512-yORQuuAtVpiRjpMhdc0wJj06b9JFjrYF4qp96j++v2NBpbi6SEGF7donUJ3TMieerQ6qVkAv1tgr7L4r5roTqw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.2",
        "@floating-ui/utils": "^0.2.8",
        "tabbable": "^6.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }

--- FILE: ./node_modules/acorn-jsx/index.d.ts ---
import { Parser } from 'acorn' 

declare const jsx: (options?: jsx.Options) => (BaseParser: typeof Parser) => typeof Parser;

declare namespace jsx {
  interface Options {
    allowNamespacedObjects?: boolean;
    allowNamespaces?: boolean;
  }
}

export = jsx;

--- FILE: ./node_modules/acorn-jsx/index.js ---
'use strict';

const XHTMLEntities = require('./xhtml');

const hexNumber = /^[\da-fA-F]+$/;
const decimalNumber = /^\d+$/;

// The map to `acorn-jsx` tokens from `acorn` namespace objects.
const acornJsxMap = new WeakMap();

// Get the original tokens for the given `acorn` namespace object.
function getJsxTokens(acorn) {
  acorn = acorn.Parser.acorn || acorn;
  let acornJsx = acornJsxMap.get(acorn);
  if (!acornJsx) {
    const tt = acorn.tokTypes;
    const TokContext = acorn.TokContext;
    const TokenType = acorn.TokenType;
    const tc_oTag = new TokContext('<tag', false);
    const tc_cTag = new TokContext('</tag', false);
    const tc_expr = new TokContext('<tag>...</tag>', true, true);
    const tokContexts = {
      tc_oTag: tc_oTag,
      tc_cTag: tc_cTag,
      tc_expr: tc_expr
    };
    const tokTypes = {
      jsxName: new TokenType('jsxName'),
      jsxText: new TokenType('jsxText', {beforeExpr: true}),
      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),
      jsxTagEnd: new TokenType('jsxTagEnd')
    };

    tokTypes.jsxTagStart.updateContext = function() {
      this.context.push(tc_expr); // treat as beginning of JSX expression
      this.context.push(tc_oTag); // start opening tag context
      this.exprAllowed = false;
    };
    tokTypes.jsxTagEnd.updateContext = function(prevType) {
      let out = this.context.pop();
      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
        this.context.pop();
        this.exprAllowed = this.curContext() === tc_expr;
      } else {
        this.exprAllowed = true;
      }
    };

    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };
    acornJsxMap.set(acorn, acornJsx);
  }

  return acornJsx;
}

// Transforms JSX element name to string.

function getQualifiedJSXName(object) {
  if (!object)
    return object;

  if (object.type === 'JSXIdentifier')
    return object.name;

  if (object.type === 'JSXNamespacedName')
    return object.namespace.name + ':' + object.name.name;

  if (object.type === 'JSXMemberExpression')
    return getQualifiedJSXName(object.object) + '.' +
    getQualifiedJSXName(object.property);
}

module.exports = function(options) {
  options = options || {};
  return function(Parser) {
    return plugin({
      allowNamespaces: options.allowNamespaces !== false,
      allowNamespacedObjects: !!options.allowNamespacedObjects
    }, Parser);
  };
};

// This is `tokTypes` of the peer dep.
// This can be different instances from the actual `tokTypes` this plugin uses.
Object.defineProperty(module.exports, "tokTypes", {
  get: function get_tokTypes() {
    return getJsxTokens(require("acorn")).tokTypes;
  },
  configurable: true,
  enumerable: true
});

function plugin(options, Parser) {
  const acorn = Parser.acorn || require("acorn");
  const acornJsx = getJsxTokens(acorn);
  const tt = acorn.tokTypes;
  const tok = acornJsx.tokTypes;
  const tokContexts = acorn.tokContexts;
  const tc_oTag = acornJsx.tokContexts.tc_oTag;
  const tc_cTag = acornJsx.tokContexts.tc_cTag;
  const tc_expr = acornJsx.tokContexts.tc_expr;
  const isNewLine = acorn.isNewLine;
  const isIdentifierStart = acorn.isIdentifierStart;
  const isIdentifierChar = acorn.isIdentifierChar;

  return class extends Parser {
    // Expose actual `tokTypes` and `tokContexts` to other plugins.
    static get acornJsx() {
      return acornJsx;
    }

    // Reads inline JSX contents token.
    jsx_readToken() {
      let out = '', chunkStart = this.pos;
      for (;;) {
        if (this.pos >= this.input.length)
          this.raise(this.start, 'Unterminated JSX contents');
        let ch = this.input.charCodeAt(this.pos);

        switch (ch) {
        case 60: // '<'
        case 123: // '{'
          if (this.pos === this.start) {
            if (ch === 60 && this.exprAllowed) {
              ++this.pos;
              return this.finishToken(tok.jsxTagStart);
            }
            return this.getTokenFromCode(ch);
          }
          out += this.input.slice(chunkStart, this.pos);
          return this.finishToken(tok.jsxText, out);

        case 38: // '&'
          out += this.input.slice(chunkStart, this.pos);
          out += this.jsx_readEntity();
          chunkStart = this.pos;
          break;

        case 62: // '>'
        case 125: // '}'
          this.raise(
            this.pos,
            "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" +
              (ch === 62 ? "&gt;" : "&rbrace;") + "` or " + "`{\"" + this.input[this.pos] + "\"}" + "`?"
          );

        default:
          if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.jsx_readNewLine(true);
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      }
    }

    jsx_readNewLine(normalizeCRLF) {
      let ch = this.input.charCodeAt(this.pos);
      let out;
      ++this.pos;
      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
        ++this.pos;
        out = normalizeCRLF ? '\n' : '\r\n';
      } else {
        out = String.fromCharCode(ch);
      }
      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }

      return out;
    }

    jsx_readString(quote) {
      let out = '', chunkStart = ++this.pos;
      for (;;) {
        if (this.pos >= this.input.length)
          this.raise(this.start, 'Unterminated string constant');
        let ch = this.input.charCodeAt(this.pos);
        if (ch === quote) break;
        if (ch === 38) { // '&'
          out += this.input.slice(chunkStart, this.pos);
          out += this.jsx_readEntity();
          chunkStart = this.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.pos);
          out += this.jsx_readNewLine(false);
          chunkStart = this.pos;
        } else {
          ++this.pos;
        }
      }
      out += this.input.slice(chunkStart, this.pos++);
      return this.finishToken(tt.string, out);
    }

    jsx_readEntity() {
      let str = '', count = 0, entity;
      let ch = this.input[this.pos];
      if (ch !== '&')
        this.raise(this.pos, 'Entity must start with an ampersand');
      let startPos = ++this.pos;
      while (this.pos < this.input.length && count++ < 10) {
        ch = this.input[this.pos++];
        if (ch === ';') {
          if (str[0] === '#') {
            if (str[1] === 'x') {
              str = str.substr(2);
              if (hexNumber.test(str))
                entity = String.fromCharCode(parseInt(str, 16));
            } else {
              str = str.substr(1);
              if (decimalNumber.test(str))
                entity = String.fromCharCode(parseInt(str, 10));
            }
          } else {
            entity = XHTMLEntities[str];
          }
          break;
        }
        str += ch;
      }
      if (!entity) {
        this.pos = startPos;
        return '&';
      }
      return entity;
    }

    // Read a JSX identifier (valid tag or attribute name).
    //
    // Optimized version since JSX identifiers can't contain
    // escape characters and so can be read as single slice.
    // Also assumes that first character was already checked
    // by isIdentifierStart in readToken.

    jsx_readWord() {
      let ch, start = this.pos;
      do {
        ch = this.input.charCodeAt(++this.pos);
      } while (isIdentifierChar(ch) || ch === 45); // '-'
      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
    }

    // Parse next token as JSX identifier

    jsx_parseIdentifier() {
      let node = this.startNode();
      if (this.type === tok.jsxName)
        node.name = this.value;
      else if (this.type.keyword)
        node.name = this.type.keyword;
      else
        this.unexpected();
      this.next();
      return this.finishNode(node, 'JSXIdentifier');
    }

    // Parse namespaced identifier.

    jsx_parseNamespacedName() {
      let startPos = this.start, startLoc = this.startLoc;
      let name = this.jsx_parseIdentifier();
      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;
      var node = this.startNodeAt(startPos, startLoc);
      node.namespace = name;
      node.name = this.jsx_parseIdentifier();
      return this.finishNode(node, 'JSXNamespacedName');
    }

    // Parses element name in any form - namespaced, member
    // or single identifier.

    jsx_parseElementName() {
      if (this.type === tok.jsxTagEnd) return '';
      let startPos = this.start, startLoc = this.startLoc;
      let node = this.jsx_parseNamespacedName();
      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {
        this.unexpected();
      }
      while (this.eat(tt.dot)) {
        let newNode = this.startNodeAt(startPos, startLoc);
        newNode.object = node;
        newNode.property = this.jsx_parseIdentifier();
        node = this.finishNode(newNode, 'JSXMemberExpression');
      }
      return node;
    }

    // Parses any type of JSX attribute value.

    jsx_parseAttributeValue() {
      switch (this.type) {
      case tt.braceL:
        let node = this.jsx_parseExpressionContainer();
        if (node.expression.type === 'JSXEmptyExpression')
          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');
        return node;

      case tok.jsxTagStart:
      case tt.string:
        return this.parseExprAtom();

      default:
        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');
      }
    }

    // JSXEmptyExpression is unique type since it doesn't actually parse anything,
    // and so it should start at the end of last read token (left brace) and finish
    // at the beginning of the next one (right brace).

    jsx_parseEmptyExpression() {
      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);
    }

    // Parses JSX expression enclosed into curly brackets.

    jsx_parseExpressionContainer() {
      let node = this.startNode();
      this.next();
      node.expression = this.type === tt.braceR
        ? this.jsx_parseEmptyExpression()
        : this.parseExpression();
      this.expect(tt.braceR);
      return this.finishNode(node, 'JSXExpressionContainer');
    }

    // Parses following JSX attribute name-value pair.

    jsx_parseAttribute() {
      let node = this.startNode();
      if (this.eat(tt.braceL)) {
        this.expect(tt.ellipsis);
        node.argument = this.parseMaybeAssign();
        this.expect(tt.braceR);
        return this.finishNode(node, 'JSXSpreadAttribute');
      }
      node.name = this.jsx_parseNamespacedName();
      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
      return this.finishNode(node, 'JSXAttribute');
    }

    // Parses JSX opening tag starting after '<'.

    jsx_parseOpeningElementAt(startPos, startLoc) {
      let node = this.startNodeAt(startPos, startLoc);
      node.attributes = [];
      let nodeName = this.jsx_parseElementName();
      if (nodeName) node.name = nodeName;
      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)
        node.attributes.push(this.jsx_parseAttribute());
      node.selfClosing = this.eat(tt.slash);
      this.expect(tok.jsxTagEnd);
      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');
    }

    // Parses JSX closing tag starting after '</'.

    jsx_parseClosingElementAt(startPos, startLoc) {
      let node = this.startNodeAt(startPos, startLoc);
      let nodeName = this.jsx_parseElementName();
      if (nodeName) node.name = nodeName;
      this.expect(tok.jsxTagEnd);
      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');
    }

    // Parses entire JSX element, including it's opening tag
    // (starting after '<'), attributes, contents and closing tag.

    jsx_parseElementAt(startPos, startLoc) {
      let node = this.startNodeAt(startPos, startLoc);
      let children = [];
      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
      let closingElement = null;

      if (!openingElement.selfClosing) {
        contents: for (;;) {
          switch (this.type) {
          case tok.jsxTagStart:
            startPos = this.start; startLoc = this.startLoc;
            this.next();
            if (this.eat(tt.slash)) {
              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
              break contents;
            }
            children.push(this.jsx_parseElementAt(startPos, startLoc));
            break;

          case tok.jsxText:
            children.push(this.parseExprAtom());
            break;

          case tt.braceL:
            children.push(this.jsx_parseExpressionContainer());
            break;

          default:
            this.unexpected();
          }
        }
        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
          this.raise(
            closingElement.start,
            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');
        }
      }
      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';

      node['opening' + fragmentOrElement] = openingElement;
      node['closing' + fragmentOrElement] = closingElement;
      node.children = children;
      if (this.type === tt.relational && this.value === "<") {
        this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
      }
      return this.finishNode(node, 'JSX' + fragmentOrElement);
    }

    // Parse JSX text

    jsx_parseText() {
      let node = this.parseLiteral(this.value);
      node.type = "JSXText";
      return node;
    }

    // Parses entire JSX element from current position.

    jsx_parseElement() {
      let startPos = this.start, startLoc = this.startLoc;
      this.next();
      return this.jsx_parseElementAt(startPos, startLoc);
    }

    parseExprAtom(refShortHandDefaultPos) {
      if (this.type === tok.jsxText)
        return this.jsx_parseText();
      else if (this.type === tok.jsxTagStart)
        return this.jsx_parseElement();
      else
        return super.parseExprAtom(refShortHandDefaultPos);
    }

    readToken(code) {
      let context = this.curContext();

      if (context === tc_expr) return this.jsx_readToken();

      if (context === tc_oTag || context === tc_cTag) {
        if (isIdentifierStart(code)) return this.jsx_readWord();

        if (code == 62) {
          ++this.pos;
          return this.finishToken(tok.jsxTagEnd);
        }

        if ((code === 34 || code === 39) && context == tc_oTag)
          return this.jsx_readString(code);
      }

      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
        ++this.pos;
        return this.finishToken(tok.jsxTagStart);
      }
      return super.readToken(code);
    }

    updateContext(prevType) {
      if (this.type == tt.braceL) {
        var curContext = this.curContext();
        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);
        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);
        else super.updateContext(prevType);
        this.exprAllowed = true;
      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
        this.context.push(tc_cTag); // reconsider as closing tag context
        this.exprAllowed = false;
      } else {
        return super.updateContext(prevType);
      }
    }
  };
}

--- FILE: ./node_modules/acorn-jsx/package.json ---
{
  "name": "acorn-jsx",
  "description": "Modern, fast React.js JSX parser",
  "homepage": "https://github.com/acornjs/acorn-jsx",
  "version": "5.3.2",
  "maintainers": [
    {
      "name": "Ingvar Stepanyan",
      "email": "me@rreverser.com",
      "web": "http://rreverser.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/acornjs/acorn-jsx"
  },
  "license": "MIT",
  "scripts": {
    "test": "node test/run.js"
  },
  "peerDependencies": {
    "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
  },
  "devDependencies": {
    "acorn": "^8.0.1"
  }
}

--- FILE: ./node_modules/acorn-jsx/xhtml.js ---
module.exports = {
  quot: '\u0022',
  amp: '&',
  apos: '\u0027',
  lt: '<',
  gt: '>',
  nbsp: '\u00A0',
  iexcl: '\u00A1',
  cent: '\u00A2',
  pound: '\u00A3',
  curren: '\u00A4',
  yen: '\u00A5',
  brvbar: '\u00A6',
  sect: '\u00A7',
  uml: '\u00A8',
  copy: '\u00A9',
  ordf: '\u00AA',
  laquo: '\u00AB',
  not: '\u00AC',
  shy: '\u00AD',
  reg: '\u00AE',
  macr: '\u00AF',
  deg: '\u00B0',
  plusmn: '\u00B1',
  sup2: '\u00B2',
  sup3: '\u00B3',
  acute: '\u00B4',
  micro: '\u00B5',
  para: '\u00B6',
  middot: '\u00B7',
  cedil: '\u00B8',
  sup1: '\u00B9',
  ordm: '\u00BA',
  raquo: '\u00BB',
  frac14: '\u00BC',
  frac12: '\u00BD',
  frac34: '\u00BE',
  iquest: '\u00BF',
  Agrave: '\u00C0',
  Aacute: '\u00C1',
  Acirc: '\u00C2',
  Atilde: '\u00C3',
  Auml: '\u00C4',
  Aring: '\u00C5',
  AElig: '\u00C6',
  Ccedil: '\u00C7',
  Egrave: '\u00C8',
  Eacute: '\u00C9',
  Ecirc: '\u00CA',
  Euml: '\u00CB',
  Igrave: '\u00CC',
  Iacute: '\u00CD',
  Icirc: '\u00CE',
  Iuml: '\u00CF',
  ETH: '\u00D0',
  Ntilde: '\u00D1',
  Ograve: '\u00D2',
  Oacute: '\u00D3',
  Ocirc: '\u00D4',
  Otilde: '\u00D5',
  Ouml: '\u00D6',
  times: '\u00D7',
  Oslash: '\u00D8',
  Ugrave: '\u00D9',
  Uacute: '\u00DA',
  Ucirc: '\u00DB',
  Uuml: '\u00DC',
  Yacute: '\u00DD',
  THORN: '\u00DE',
  szlig: '\u00DF',
  agrave: '\u00E0',
  aacute: '\u00E1',
  acirc: '\u00E2',
  atilde: '\u00E3',
  auml: '\u00E4',
  aring: '\u00E5',
  aelig: '\u00E6',
  ccedil: '\u00E7',
  egrave: '\u00E8',
  eacute: '\u00E9',
  ecirc: '\u00EA',
  euml: '\u00EB',
  igrave: '\u00EC',
  iacute: '\u00ED',
  icirc: '\u00EE',
  iuml: '\u00EF',
  eth: '\u00F0',
  ntilde: '\u00F1',
  ograve: '\u00F2',
  oacute: '\u00F3',
  ocirc: '\u00F4',
  otilde: '\u00F5',
  ouml: '\u00F6',
  divide: '\u00F7',
  oslash: '\u00F8',
  ugrave: '\u00F9',
  uacute: '\u00FA',
  ucirc: '\u00FB',
  uuml: '\u00FC',
  yacute: '\u00FD',
  thorn: '\u00FE',
  yuml: '\u00FF',
  OElig: '\u0152',
  oelig: '\u0153',
  Scaron: '\u0160',
  scaron: '\u0161',
  Yuml: '\u0178',
  fnof: '\u0192',
  circ: '\u02C6',
  tilde: '\u02DC',
  Alpha: '\u0391',
  Beta: '\u0392',
  Gamma: '\u0393',
  Delta: '\u0394',
  Epsilon: '\u0395',
  Zeta: '\u0396',
  Eta: '\u0397',
  Theta: '\u0398',
  Iota: '\u0399',
  Kappa: '\u039A',
  Lambda: '\u039B',
  Mu: '\u039C',
  Nu: '\u039D',
  Xi: '\u039E',
  Omicron: '\u039F',
  Pi: '\u03A0',
  Rho: '\u03A1',
  Sigma: '\u03A3',
  Tau: '\u03A4',
  Upsilon: '\u03A5',
  Phi: '\u03A6',
  Chi: '\u03A7',
  Psi: '\u03A8',
  Omega: '\u03A9',
  alpha: '\u03B1',
  beta: '\u03B2',
  gamma: '\u03B3',
  delta: '\u03B4',
  epsilon: '\u03B5',
  zeta: '\u03B6',
  eta: '\u03B7',
  theta: '\u03B8',
  iota: '\u03B9',
  kappa: '\u03BA',
  lambda: '\u03BB',
  mu: '\u03BC',
  nu: '\u03BD',
  xi: '\u03BE',
  omicron: '\u03BF',
  pi: '\u03C0',
  rho: '\u03C1',
  sigmaf: '\u03C2',
  sigma: '\u03C3',
  tau: '\u03C4',
  upsilon: '\u03C5',
  phi: '\u03C6',
  chi: '\u03C7',
  psi: '\u03C8',
  omega: '\u03C9',
  thetasym: '\u03D1',
  upsih: '\u03D2',
  piv: '\u03D6',
  ensp: '\u2002',
  emsp: '\u2003',
  thinsp: '\u2009',
  zwnj: '\u200C',
  zwj: '\u200D',
  lrm: '\u200E',
  rlm: '\u200F',
  ndash: '\u2013',
  mdash: '\u2014',
  lsquo: '\u2018',
  rsquo: '\u2019',
  sbquo: '\u201A',
  ldquo: '\u201C',
  rdquo: '\u201D',
  bdquo: '\u201E',
  dagger: '\u2020',
  Dagger: '\u2021',
  bull: '\u2022',
  hellip: '\u2026',
  permil: '\u2030',
  prime: '\u2032',
  Prime: '\u2033',
  lsaquo: '\u2039',
  rsaquo: '\u203A',
  oline: '\u203E',
  frasl: '\u2044',
  euro: '\u20AC',
  image: '\u2111',
  weierp: '\u2118',
  real: '\u211C',
  trade: '\u2122',
  alefsym: '\u2135',
  larr: '\u2190',
  uarr: '\u2191',
  rarr: '\u2192',
  darr: '\u2193',
  harr: '\u2194',
  crarr: '\u21B5',
  lArr: '\u21D0',
  uArr: '\u21D1',
  rArr: '\u21D2',
  dArr: '\u21D3',
  hArr: '\u21D4',
  forall: '\u2200',
  part: '\u2202',
  exist: '\u2203',
  empty: '\u2205',
  nabla: '\u2207',
  isin: '\u2208',
  notin: '\u2209',
  ni: '\u220B',
  prod: '\u220F',
  sum: '\u2211',
  minus: '\u2212',
  lowast: '\u2217',
  radic: '\u221A',
  prop: '\u221D',
  infin: '\u221E',
  ang: '\u2220',
  and: '\u2227',
  or: '\u2228',
  cap: '\u2229',
  cup: '\u222A',
  'int': '\u222B',
  there4: '\u2234',
  sim: '\u223C',
  cong: '\u2245',
  asymp: '\u2248',
  ne: '\u2260',
  equiv: '\u2261',
  le: '\u2264',
  ge: '\u2265',
  sub: '\u2282',
  sup: '\u2283',
  nsub: '\u2284',
  sube: '\u2286',
  supe: '\u2287',
  oplus: '\u2295',
  otimes: '\u2297',
  perp: '\u22A5',
  sdot: '\u22C5',
  lceil: '\u2308',
  rceil: '\u2309',
  lfloor: '\u230A',
  rfloor: '\u230B',
  lang: '\u2329',
  rang: '\u232A',
  loz: '\u25CA',
  spades: '\u2660',
  clubs: '\u2663',
  hearts: '\u2665',
  diams: '\u2666'
};

--- FILE: ./node_modules/acorn/package.json ---
{
  "name": "acorn",
  "description": "ECMAScript parser",
  "homepage": "https://github.com/acornjs/acorn",
  "main": "dist/acorn.js",
  "types": "dist/acorn.d.ts",
  "module": "dist/acorn.mjs",
  "exports": {
    ".": [
      {
        "import": "./dist/acorn.mjs",
        "require": "./dist/acorn.js",
        "default": "./dist/acorn.js"
      },
      "./dist/acorn.js"
    ],
    "./package.json": "./package.json"
  },
  "version": "8.15.0",
  "engines": {
    "node": ">=0.4.0"
  },
  "maintainers": [
    {
      "name": "Marijn Haverbeke",
      "email": "marijnh@gmail.com",
      "web": "https://marijnhaverbeke.nl"
    },
    {
      "name": "Ingvar Stepanyan",
      "email": "me@rreverser.com",
      "web": "https://rreverser.com/"
    },
    {
      "name": "Adrian Heine",
      "web": "http://adrianheine.de"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/acornjs/acorn.git"
  },
  "license": "MIT",
  "scripts": {
    "prepare": "cd ..; npm run build:main"
  },
  "bin": {
    "acorn": "bin/acorn"
  }
}

--- FILE: ./node_modules/agent-base/package.json ---
{
  "name": "agent-base",
  "version": "7.1.4",
  "description": "Turn a function into an `http.Agent` instance",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/TooTallNate/proxy-agents.git",
    "directory": "packages/agent-base"
  },
  "keywords": [
    "http",
    "agent",
    "base",
    "barebones",
    "https"
  ],
  "author": "Nathan Rajlich <nathan@tootallnate.net> (http://n8.io/)",
  "license": "MIT",
  "devDependencies": {
    "@types/debug": "^4.1.7",
    "@types/jest": "^29.5.1",
    "@types/node": "^14.18.45",
    "@types/semver": "^7.3.13",
    "@types/ws": "^6.0.4",
    "async-listen": "^3.0.0",
    "jest": "^29.5.0",
    "ts-jest": "^29.1.0",
    "typescript": "^5.0.4",
    "ws": "^5.2.4",
    "tsconfig": "0.0.0"
  },
  "engines": {
    "node": ">= 14"
  },
  "scripts": {
    "build": "tsc",
    "test": "jest --env node --verbose --bail",
    "lint": "eslint . --ext .ts",
    "pack": "node ../../scripts/pack.mjs"
  }
}
--- FILE: ./node_modules/ajv/.tonic_example.js ---
var Ajv = require('ajv');
var ajv = new Ajv({allErrors: true});

var schema = {
  "properties": {
    "foo": { "type": "string" },
    "bar": { "type": "number", "maximum": 3 }
  }
};

var validate = ajv.compile(schema);

test({"foo": "abc", "bar": 2});
test({"foo": 2, "bar": 4});

function test(data) {
  var valid = validate(data);
  if (valid) console.log('Valid!');
  else console.log('Invalid: ' + ajv.errorsText(validate.errors));
}
--- FILE: ./node_modules/ajv/package.json ---
{
  "name": "ajv",
  "version": "6.12.6",
  "description": "Another JSON Schema Validator",
  "main": "lib/ajv.js",
  "typings": "lib/ajv.d.ts",
  "files": [
    "lib/",
    "dist/",
    "scripts/",
    "LICENSE",
    ".tonic_example.js"
  ],
  "scripts": {
    "eslint": "eslint lib/{compile/,}*.js spec/{**/,}*.js scripts --ignore-pattern spec/JSON-Schema-Test-Suite",
    "jshint": "jshint lib/{compile/,}*.js",
    "lint": "npm run jshint && npm run eslint",
    "test-spec": "mocha spec/{**/,}*.spec.js -R spec",
    "test-fast": "AJV_FAST_TEST=true npm run test-spec",
    "test-debug": "npm run test-spec -- --inspect-brk",
    "test-cov": "nyc npm run test-spec",
    "test-ts": "tsc --target ES5 --noImplicitAny --noEmit spec/typescript/index.ts",
    "bundle": "del-cli dist && node ./scripts/bundle.js . Ajv pure_getters",
    "bundle-beautify": "node ./scripts/bundle.js js-beautify",
    "build": "del-cli lib/dotjs/*.js \"!lib/dotjs/index.js\" && node scripts/compile-dots.js",
    "test-karma": "karma start",
    "test-browser": "del-cli .browser && npm run bundle && scripts/prepare-tests && npm run test-karma",
    "test-all": "npm run test-cov && if-node-version 10 npm run test-browser",
    "test": "npm run lint && npm run build && npm run test-all",
    "prepublish": "npm run build && npm run bundle",
    "watch": "watch \"npm run build\" ./lib/dot"
  },
  "nyc": {
    "exclude": [
      "**/spec/**",
      "node_modules"
    ],
    "reporter": [
      "lcov",
      "text-summary"
    ]
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ajv-validator/ajv.git"
  },
  "keywords": [
    "JSON",
    "schema",
    "validator",
    "validation",
    "jsonschema",
    "json-schema",
    "json-schema-validator",
    "json-schema-validation"
  ],
  "author": "Evgeny Poberezkin",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ajv-validator/ajv/issues"
  },
  "homepage": "https://github.com/ajv-validator/ajv",
  "tonicExampleFilename": ".tonic_example.js",
  "dependencies": {
    "fast-deep-equal": "^3.1.1",
    "fast-json-stable-stringify": "^2.0.0",
    "json-schema-traverse": "^0.4.1",
    "uri-js": "^4.2.2"
  },
  "devDependencies": {
    "ajv-async": "^1.0.0",
    "bluebird": "^3.5.3",
    "brfs": "^2.0.0",
    "browserify": "^16.2.0",
    "chai": "^4.0.1",
    "coveralls": "^3.0.1",
    "del-cli": "^3.0.0",
    "dot": "^1.0.3",
    "eslint": "^7.3.1",
    "gh-pages-generator": "^0.2.3",
    "glob": "^7.0.0",
    "if-node-version": "^1.0.0",
    "js-beautify": "^1.7.3",
    "jshint": "^2.10.2",
    "json-schema-test": "^2.0.0",
    "karma": "^5.0.0",
    "karma-chrome-launcher": "^3.0.0",
    "karma-mocha": "^2.0.0",
    "karma-sauce-launcher": "^4.1.3",
    "mocha": "^8.0.1",
    "nyc": "^15.0.0",
    "pre-commit": "^1.1.1",
    "require-globify": "^1.3.0",
    "typescript": "^3.9.5",
    "uglify-js": "^3.6.9",
    "watch": "^1.0.0"
  },
  "collective": {
    "type": "opencollective",
    "url": "https://opencollective.com/ajv"
  },
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/epoberezkin"
  }
}

--- FILE: ./node_modules/ansi-colors/index.js ---
'use strict';

const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

/* eslint-disable no-control-regex */
// this is a modified version of https://github.com/chalk/ansi-regex (MIT License)
const ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;

const hasColor = () => {
  if (typeof process !== 'undefined') {
    return process.env.FORCE_COLOR !== '0';
  }
  return false;
};

const create = () => {
  const colors = {
    enabled: hasColor(),
    visible: true,
    styles: {},
    keys: {}
  };

  const ansi = style => {
    let open = style.open = `\u001b[${style.codes[0]}m`;
    let close = style.close = `\u001b[${style.codes[1]}m`;
    let regex = style.regex = new RegExp(`\\u001b\\[${style.codes[1]}m`, 'g');
    style.wrap = (input, newline) => {
      if (input.includes(close)) input = input.replace(regex, close + open);
      let output = open + input + close;
      // see https://github.com/chalk/chalk/pull/92, thanks to the
      // chalk contributors for this fix. However, we've confirmed that
      // this issue is also present in Windows terminals
      return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
    };
    return style;
  };

  const wrap = (style, input, newline) => {
    return typeof style === 'function' ? style(input) : style.wrap(input, newline);
  };

  const style = (input, stack) => {
    if (input === '' || input == null) return '';
    if (colors.enabled === false) return input;
    if (colors.visible === false) return '';
    let str = '' + input;
    let nl = str.includes('\n');
    let n = stack.length;
    if (n > 0 && stack.includes('unstyle')) {
      stack = [...new Set(['unstyle', ...stack])].reverse();
    }
    while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);
    return str;
  };

  const define = (name, codes, type) => {
    colors.styles[name] = ansi({ name, codes });
    let keys = colors.keys[type] || (colors.keys[type] = []);
    keys.push(name);

    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias(name, value);
      },
      get() {
        let color = input => style(input, color.stack);
        Reflect.setPrototypeOf(color, colors);
        color.stack = this.stack ? this.stack.concat(name) : [name];
        return color;
      }
    });
  };

  define('reset', [0, 0], 'modifier');
  define('bold', [1, 22], 'modifier');
  define('dim', [2, 22], 'modifier');
  define('italic', [3, 23], 'modifier');
  define('underline', [4, 24], 'modifier');
  define('inverse', [7, 27], 'modifier');
  define('hidden', [8, 28], 'modifier');
  define('strikethrough', [9, 29], 'modifier');

  define('black', [30, 39], 'color');
  define('red', [31, 39], 'color');
  define('green', [32, 39], 'color');
  define('yellow', [33, 39], 'color');
  define('blue', [34, 39], 'color');
  define('magenta', [35, 39], 'color');
  define('cyan', [36, 39], 'color');
  define('white', [37, 39], 'color');
  define('gray', [90, 39], 'color');
  define('grey', [90, 39], 'color');

  define('bgBlack', [40, 49], 'bg');
  define('bgRed', [41, 49], 'bg');
  define('bgGreen', [42, 49], 'bg');
  define('bgYellow', [43, 49], 'bg');
  define('bgBlue', [44, 49], 'bg');
  define('bgMagenta', [45, 49], 'bg');
  define('bgCyan', [46, 49], 'bg');
  define('bgWhite', [47, 49], 'bg');

  define('blackBright', [90, 39], 'bright');
  define('redBright', [91, 39], 'bright');
  define('greenBright', [92, 39], 'bright');
  define('yellowBright', [93, 39], 'bright');
  define('blueBright', [94, 39], 'bright');
  define('magentaBright', [95, 39], 'bright');
  define('cyanBright', [96, 39], 'bright');
  define('whiteBright', [97, 39], 'bright');

  define('bgBlackBright', [100, 49], 'bgBright');
  define('bgRedBright', [101, 49], 'bgBright');
  define('bgGreenBright', [102, 49], 'bgBright');
  define('bgYellowBright', [103, 49], 'bgBright');
  define('bgBlueBright', [104, 49], 'bgBright');
  define('bgMagentaBright', [105, 49], 'bgBright');
  define('bgCyanBright', [106, 49], 'bgBright');
  define('bgWhiteBright', [107, 49], 'bgBright');

  colors.ansiRegex = ANSI_REGEX;
  colors.hasColor = colors.hasAnsi = str => {
    colors.ansiRegex.lastIndex = 0;
    return typeof str === 'string' && str !== '' && colors.ansiRegex.test(str);
  };

  colors.alias = (name, color) => {
    let fn = typeof color === 'string' ? colors[color] : color;

    if (typeof fn !== 'function') {
      throw new TypeError('Expected alias to be the name of an existing color (string) or a function');
    }

    if (!fn.stack) {
      Reflect.defineProperty(fn, 'name', { value: name });
      colors.styles[name] = fn;
      fn.stack = [name];
    }

    Reflect.defineProperty(colors, name, {
      configurable: true,
      enumerable: true,
      set(value) {
        colors.alias(name, value);
      },
      get() {
        let color = input => style(input, color.stack);
        Reflect.setPrototypeOf(color, colors);
        color.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
        return color;
      }
    });
  };

  colors.theme = custom => {
    if (!isObject(custom)) throw new TypeError('Expected theme to be an object');
    for (let name of Object.keys(custom)) {
      colors.alias(name, custom[name]);
    }
    return colors;
  };

  colors.alias('unstyle', str => {
    if (typeof str === 'string' && str !== '') {
      colors.ansiRegex.lastIndex = 0;
      return str.replace(colors.ansiRegex, '');
    }
    return '';
  });

  colors.alias('noop', str => str);
  colors.none = colors.clear = colors.noop;

  colors.stripColor = colors.unstyle;
  colors.symbols = require('./symbols');
  colors.define = define;
  return colors;
};

module.exports = create();
module.exports.create = create;

--- FILE: ./node_modules/ansi-colors/package.json ---
{
  "name": "ansi-colors",
  "description": "Easily add ANSI colors to your text and symbols in the terminal. A faster drop-in replacement for chalk, kleur and turbocolor (without the dependencies and rendering bugs).",
  "version": "4.1.3",
  "homepage": "https://github.com/doowb/ansi-colors",
  "author": "Brian Woodward (https://github.com/doowb)",
  "contributors": [
    "Brian Woodward (https://twitter.com/doowb)",
    "Jason Schilling (https://sourecode.de)",
    "Jon Schlinkert (http://twitter.com/jonschlinkert)",
    "Jordan (https://github.com/Silic0nS0ldier)"
  ],
  "repository": "doowb/ansi-colors",
  "bugs": {
    "url": "https://github.com/doowb/ansi-colors/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "symbols.js",
    "types/index.d.ts"
  ],
  "main": "index.js",
  "types": "./types/index.d.ts",
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "decache": "^4.5.1",
    "gulp-format-md": "^2.0.0",
    "justified": "^1.0.1",
    "mocha": "^6.1.4",
    "text-table": "^0.2.0"
  },
  "keywords": [
    "256",
    "ansi",
    "bgblack",
    "bgBlack",
    "bgblue",
    "bgBlue",
    "bgcyan",
    "bgCyan",
    "bggreen",
    "bgGreen",
    "bgmagenta",
    "bgMagenta",
    "bgred",
    "bgRed",
    "bgwhite",
    "bgWhite",
    "bgyellow",
    "bgYellow",
    "black",
    "blue",
    "bold",
    "cli",
    "clorox",
    "color",
    "colors",
    "colour",
    "command line",
    "command-line",
    "console",
    "cyan",
    "dim",
    "formatting",
    "gray",
    "green",
    "grey",
    "hidden",
    "inverse",
    "italic",
    "kleur",
    "log",
    "logging",
    "magenta",
    "red",
    "reset",
    "rgb",
    "shell",
    "str",
    "strikethrough",
    "string",
    "style",
    "styles",
    "terminal",
    "text",
    "tty",
    "underline",
    "white",
    "xterm",
    "yellow"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "data": {
      "author": {
        "linkedin": "woodwardbrian",
        "twitter": "doowb"
      }
    },
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    },
    "related": {
      "list": [
        "ansi-wrap",
        "strip-color"
      ]
    },
    "reflinks": [
      "chalk",
      "colorette",
      "colors",
      "kleur"
    ]
  }
}

--- FILE: ./node_modules/ansi-colors/symbols.js ---
'use strict';

const isHyper = typeof process !== 'undefined' && process.env.TERM_PROGRAM === 'Hyper';
const isWindows = typeof process !== 'undefined' && process.platform === 'win32';
const isLinux = typeof process !== 'undefined' && process.platform === 'linux';

const common = {
  ballotDisabled: '☒',
  ballotOff: '☐',
  ballotOn: '☑',
  bullet: '•',
  bulletWhite: '◦',
  fullBlock: '█',
  heart: '❤',
  identicalTo: '≡',
  line: '─',
  mark: '※',
  middot: '·',
  minus: '－',
  multiplication: '×',
  obelus: '÷',
  pencilDownRight: '✎',
  pencilRight: '✏',
  pencilUpRight: '✐',
  percent: '%',
  pilcrow2: '❡',
  pilcrow: '¶',
  plusMinus: '±',
  question: '?',
  section: '§',
  starsOff: '☆',
  starsOn: '★',
  upDownArrow: '↕'
};

const windows = Object.assign({}, common, {
  check: '√',
  cross: '×',
  ellipsisLarge: '...',
  ellipsis: '...',
  info: 'i',
  questionSmall: '?',
  pointer: '>',
  pointerSmall: '»',
  radioOff: '( )',
  radioOn: '(*)',
  warning: '‼'
});

const other = Object.assign({}, common, {
  ballotCross: '✘',
  check: '✔',
  cross: '✖',
  ellipsisLarge: '⋯',
  ellipsis: '…',
  info: 'ℹ',
  questionFull: '？',
  questionSmall: '﹖',
  pointer: isLinux ? '▸' : '❯',
  pointerSmall: isLinux ? '‣' : '›',
  radioOff: '◯',
  radioOn: '◉',
  warning: '⚠'
});

module.exports = (isWindows && !isHyper) ? windows : other;
Reflect.defineProperty(module.exports, 'common', { enumerable: false, value: common });
Reflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });
Reflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });

--- FILE: ./node_modules/ansi-regex/index.d.ts ---
declare namespace ansiRegex {
	interface Options {
		/**
		Match only the first ANSI escape.

		@default false
		*/
		onlyFirst: boolean;
	}
}

/**
Regular expression for matching ANSI escape codes.

@example
```
import ansiRegex = require('ansi-regex');

ansiRegex().test('\u001B[4mcake\u001B[0m');
//=> true

ansiRegex().test('cake');
//=> false

'\u001B[4mcake\u001B[0m'.match(ansiRegex());
//=> ['\u001B[4m', '\u001B[0m']

'\u001B[4mcake\u001B[0m'.match(ansiRegex({onlyFirst: true}));
//=> ['\u001B[4m']

'\u001B]8;;https://github.com\u0007click\u001B]8;;\u0007'.match(ansiRegex());
//=> ['\u001B]8;;https://github.com\u0007', '\u001B]8;;\u0007']
```
*/
declare function ansiRegex(options?: ansiRegex.Options): RegExp;

export = ansiRegex;

--- FILE: ./node_modules/ansi-regex/index.js ---
'use strict';

module.exports = ({onlyFirst = false} = {}) => {
	const pattern = [
		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
};

--- FILE: ./node_modules/ansi-regex/package.json ---
{
	"name": "ansi-regex",
	"version": "5.0.1",
	"description": "Regular expression for matching ANSI escape codes",
	"license": "MIT",
	"repository": "chalk/ansi-regex",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd",
		"view-supported": "node fixtures/view-codes.js"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"ansi",
		"styles",
		"color",
		"colour",
		"colors",
		"terminal",
		"console",
		"cli",
		"string",
		"tty",
		"escape",
		"formatting",
		"rgb",
		"256",
		"shell",
		"xterm",
		"command-line",
		"text",
		"regex",
		"regexp",
		"re",
		"match",
		"test",
		"find",
		"pattern"
	],
	"devDependencies": {
		"ava": "^2.4.0",
		"tsd": "^0.9.0",
		"xo": "^0.25.3"
	}
}

--- FILE: ./node_modules/ansi-styles/index.d.ts ---
declare type CSSColor =
	| 'aliceblue'
	| 'antiquewhite'
	| 'aqua'
	| 'aquamarine'
	| 'azure'
	| 'beige'
	| 'bisque'
	| 'black'
	| 'blanchedalmond'
	| 'blue'
	| 'blueviolet'
	| 'brown'
	| 'burlywood'
	| 'cadetblue'
	| 'chartreuse'
	| 'chocolate'
	| 'coral'
	| 'cornflowerblue'
	| 'cornsilk'
	| 'crimson'
	| 'cyan'
	| 'darkblue'
	| 'darkcyan'
	| 'darkgoldenrod'
	| 'darkgray'
	| 'darkgreen'
	| 'darkgrey'
	| 'darkkhaki'
	| 'darkmagenta'
	| 'darkolivegreen'
	| 'darkorange'
	| 'darkorchid'
	| 'darkred'
	| 'darksalmon'
	| 'darkseagreen'
	| 'darkslateblue'
	| 'darkslategray'
	| 'darkslategrey'
	| 'darkturquoise'
	| 'darkviolet'
	| 'deeppink'
	| 'deepskyblue'
	| 'dimgray'
	| 'dimgrey'
	| 'dodgerblue'
	| 'firebrick'
	| 'floralwhite'
	| 'forestgreen'
	| 'fuchsia'
	| 'gainsboro'
	| 'ghostwhite'
	| 'gold'
	| 'goldenrod'
	| 'gray'
	| 'green'
	| 'greenyellow'
	| 'grey'
	| 'honeydew'
	| 'hotpink'
	| 'indianred'
	| 'indigo'
	| 'ivory'
	| 'khaki'
	| 'lavender'
	| 'lavenderblush'
	| 'lawngreen'
	| 'lemonchiffon'
	| 'lightblue'
	| 'lightcoral'
	| 'lightcyan'
	| 'lightgoldenrodyellow'
	| 'lightgray'
	| 'lightgreen'
	| 'lightgrey'
	| 'lightpink'
	| 'lightsalmon'
	| 'lightseagreen'
	| 'lightskyblue'
	| 'lightslategray'
	| 'lightslategrey'
	| 'lightsteelblue'
	| 'lightyellow'
	| 'lime'
	| 'limegreen'
	| 'linen'
	| 'magenta'
	| 'maroon'
	| 'mediumaquamarine'
	| 'mediumblue'
	| 'mediumorchid'
	| 'mediumpurple'
	| 'mediumseagreen'
	| 'mediumslateblue'
	| 'mediumspringgreen'
	| 'mediumturquoise'
	| 'mediumvioletred'
	| 'midnightblue'
	| 'mintcream'
	| 'mistyrose'
	| 'moccasin'
	| 'navajowhite'
	| 'navy'
	| 'oldlace'
	| 'olive'
	| 'olivedrab'
	| 'orange'
	| 'orangered'
	| 'orchid'
	| 'palegoldenrod'
	| 'palegreen'
	| 'paleturquoise'
	| 'palevioletred'
	| 'papayawhip'
	| 'peachpuff'
	| 'peru'
	| 'pink'
	| 'plum'
	| 'powderblue'
	| 'purple'
	| 'rebeccapurple'
	| 'red'
	| 'rosybrown'
	| 'royalblue'
	| 'saddlebrown'
	| 'salmon'
	| 'sandybrown'
	| 'seagreen'
	| 'seashell'
	| 'sienna'
	| 'silver'
	| 'skyblue'
	| 'slateblue'
	| 'slategray'
	| 'slategrey'
	| 'snow'
	| 'springgreen'
	| 'steelblue'
	| 'tan'
	| 'teal'
	| 'thistle'
	| 'tomato'
	| 'turquoise'
	| 'violet'
	| 'wheat'
	| 'white'
	| 'whitesmoke'
	| 'yellow'
	| 'yellowgreen';

declare namespace ansiStyles {
	interface ColorConvert {
		/**
		The RGB color space.

		@param red - (`0`-`255`)
		@param green - (`0`-`255`)
		@param blue - (`0`-`255`)
		*/
		rgb(red: number, green: number, blue: number): string;

		/**
		The RGB HEX color space.

		@param hex - A hexadecimal string containing RGB data.
		*/
		hex(hex: string): string;

		/**
		@param keyword - A CSS color name.
		*/
		keyword(keyword: CSSColor): string;

		/**
		The HSL color space.

		@param hue - (`0`-`360`)
		@param saturation - (`0`-`100`)
		@param lightness - (`0`-`100`)
		*/
		hsl(hue: number, saturation: number, lightness: number): string;

		/**
		The HSV color space.

		@param hue - (`0`-`360`)
		@param saturation - (`0`-`100`)
		@param value - (`0`-`100`)
		*/
		hsv(hue: number, saturation: number, value: number): string;

		/**
		The HSV color space.

		@param hue - (`0`-`360`)
		@param whiteness - (`0`-`100`)
		@param blackness - (`0`-`100`)
		*/
		hwb(hue: number, whiteness: number, blackness: number): string;

		/**
		Use a [4-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4-bit) to set text color.
		*/
		ansi(ansi: number): string;

		/**
		Use an [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set text color.
		*/
		ansi256(ansi: number): string;
	}

	interface CSPair {
		/**
		The ANSI terminal control sequence for starting this style.
		*/
		readonly open: string;

		/**
		The ANSI terminal control sequence for ending this style.
		*/
		readonly close: string;
	}

	interface ColorBase {
		readonly ansi: ColorConvert;
		readonly ansi256: ColorConvert;
		readonly ansi16m: ColorConvert;

		/**
		The ANSI terminal control sequence for ending this color.
		*/
		readonly close: string;
	}

	interface Modifier {
		/**
		Resets the current color chain.
		*/
		readonly reset: CSPair;

		/**
		Make text bold.
		*/
		readonly bold: CSPair;

		/**
		Emitting only a small amount of light.
		*/
		readonly dim: CSPair;

		/**
		Make text italic. (Not widely supported)
		*/
		readonly italic: CSPair;

		/**
		Make text underline. (Not widely supported)
		*/
		readonly underline: CSPair;

		/**
		Inverse background and foreground colors.
		*/
		readonly inverse: CSPair;

		/**
		Prints the text, but makes it invisible.
		*/
		readonly hidden: CSPair;

		/**
		Puts a horizontal line through the center of the text. (Not widely supported)
		*/
		readonly strikethrough: CSPair;
	}

	interface ForegroundColor {
		readonly black: CSPair;
		readonly red: CSPair;
		readonly green: CSPair;
		readonly yellow: CSPair;
		readonly blue: CSPair;
		readonly cyan: CSPair;
		readonly magenta: CSPair;
		readonly white: CSPair;

		/**
		Alias for `blackBright`.
		*/
		readonly gray: CSPair;

		/**
		Alias for `blackBright`.
		*/
		readonly grey: CSPair;

		readonly blackBright: CSPair;
		readonly redBright: CSPair;
		readonly greenBright: CSPair;
		readonly yellowBright: CSPair;
		readonly blueBright: CSPair;
		readonly cyanBright: CSPair;
		readonly magentaBright: CSPair;
		readonly whiteBright: CSPair;
	}

	interface BackgroundColor {
		readonly bgBlack: CSPair;
		readonly bgRed: CSPair;
		readonly bgGreen: CSPair;
		readonly bgYellow: CSPair;
		readonly bgBlue: CSPair;
		readonly bgCyan: CSPair;
		readonly bgMagenta: CSPair;
		readonly bgWhite: CSPair;

		/**
		Alias for `bgBlackBright`.
		*/
		readonly bgGray: CSPair;

		/**
		Alias for `bgBlackBright`.
		*/
		readonly bgGrey: CSPair;

		readonly bgBlackBright: CSPair;
		readonly bgRedBright: CSPair;
		readonly bgGreenBright: CSPair;
		readonly bgYellowBright: CSPair;
		readonly bgBlueBright: CSPair;
		readonly bgCyanBright: CSPair;
		readonly bgMagentaBright: CSPair;
		readonly bgWhiteBright: CSPair;
	}
}

declare const ansiStyles: {
	readonly modifier: ansiStyles.Modifier;
	readonly color: ansiStyles.ForegroundColor & ansiStyles.ColorBase;
	readonly bgColor: ansiStyles.BackgroundColor & ansiStyles.ColorBase;
	readonly codes: ReadonlyMap<number, number>;
} & ansiStyles.BackgroundColor & ansiStyles.ForegroundColor & ansiStyles.Modifier;

export = ansiStyles;

--- FILE: ./node_modules/ansi-styles/index.js ---
'use strict';

const wrapAnsi16 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => (...args) => {
	const rgb = fn(...args);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

const ansi2ansi = n => n;
const rgb2rgb = (r, g, b) => [r, g, b];

const setLazyProperty = (object, property, get) => {
	Object.defineProperty(object, property, {
		get: () => {
			const value = get();

			Object.defineProperty(object, property, {
				value,
				enumerable: true,
				configurable: true
			});

			return value;
		},
		enumerable: true,
		configurable: true
	});
};

/** @type {typeof import('color-convert')} */
let colorConvert;
const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
	if (colorConvert === undefined) {
		colorConvert = require('color-convert');
	}

	const offset = isBackground ? 10 : 0;
	const styles = {};

	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
		if (sourceSpace === targetSpace) {
			styles[name] = wrap(identity, offset);
		} else if (typeof suite === 'object') {
			styles[name] = wrap(suite[targetSpace], offset);
		}
	}

	return styles;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],

			// Bright color
			blackBright: [90, 39],
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Alias bright black as gray (and grey)
	styles.color.gray = styles.color.blackBright;
	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	styles.color.grey = styles.color.blackBright;
	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});

--- FILE: ./node_modules/ansi-styles/package.json ---
{
	"name": "ansi-styles",
	"version": "4.3.0",
	"description": "ANSI escape codes for styling strings in the terminal",
	"license": "MIT",
	"repository": "chalk/ansi-styles",
	"funding": "https://github.com/chalk/ansi-styles?sponsor=1",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd",
		"screenshot": "svg-term --command='node screenshot' --out=screenshot.svg --padding=3 --width=55 --height=3 --at=1000 --no-cursor"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"ansi",
		"styles",
		"color",
		"colour",
		"colors",
		"terminal",
		"console",
		"cli",
		"string",
		"tty",
		"escape",
		"formatting",
		"rgb",
		"256",
		"shell",
		"xterm",
		"log",
		"logging",
		"command-line",
		"text"
	],
	"dependencies": {
		"color-convert": "^2.0.1"
	},
	"devDependencies": {
		"@types/color-convert": "^1.9.0",
		"ava": "^2.3.0",
		"svg-term-cli": "^2.1.1",
		"tsd": "^0.11.0",
		"xo": "^0.25.3"
	}
}

--- FILE: ./node_modules/anymatch/index.d.ts ---
type AnymatchFn = (testString: string) => boolean;
type AnymatchPattern = string|RegExp|AnymatchFn;
type AnymatchMatcher = AnymatchPattern|AnymatchPattern[]
type AnymatchTester = {
  (testString: string|any[], returnIndex: true): number;
  (testString: string|any[]): boolean;
}

type PicomatchOptions = {dot: boolean};

declare const anymatch: {
  (matchers: AnymatchMatcher): AnymatchTester;
  (matchers: AnymatchMatcher, testString: null, returnIndex: true | PicomatchOptions): AnymatchTester;
  (matchers: AnymatchMatcher, testString: string|any[], returnIndex: true | PicomatchOptions): number;
  (matchers: AnymatchMatcher, testString: string|any[]): boolean;
}

export {AnymatchMatcher as Matcher}
export {AnymatchTester as Tester}
export default anymatch

--- FILE: ./node_modules/anymatch/index.js ---
'use strict';

Object.defineProperty(exports, "__esModule", { value: true });

const picomatch = require('picomatch');
const normalizePath = require('normalize-path');

/**
 * @typedef {(testString: string) => boolean} AnymatchFn
 * @typedef {string|RegExp|AnymatchFn} AnymatchPattern
 * @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher
 */
const BANG = '!';
const DEFAULT_OPTIONS = {returnIndex: false};
const arrify = (item) => Array.isArray(item) ? item : [item];

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */
const createPattern = (matcher, options) => {
  if (typeof matcher === 'function') {
    return matcher;
  }
  if (typeof matcher === 'string') {
    const glob = picomatch(matcher, options);
    return (string) => matcher === string || glob(string);
  }
  if (matcher instanceof RegExp) {
    return (string) => matcher.test(string);
  }
  return (string) => false;
};

/**
 * @param {Array<Function>} patterns
 * @param {Array<Function>} negPatterns
 * @param {String|Array} args
 * @param {Boolean} returnIndex
 * @returns {boolean|number}
 */
const matchPatterns = (patterns, negPatterns, args, returnIndex) => {
  const isList = Array.isArray(args);
  const _path = isList ? args[0] : args;
  if (!isList && typeof _path !== 'string') {
    throw new TypeError('anymatch: second argument must be a string: got ' +
      Object.prototype.toString.call(_path))
  }
  const path = normalizePath(_path, false);

  for (let index = 0; index < negPatterns.length; index++) {
    const nglob = negPatterns[index];
    if (nglob(path)) {
      return returnIndex ? -1 : false;
    }
  }

  const applied = isList && [path].concat(args.slice(1));
  for (let index = 0; index < patterns.length; index++) {
    const pattern = patterns[index];
    if (isList ? pattern(...applied) : pattern(path)) {
      return returnIndex ? index : true;
    }
  }

  return returnIndex ? -1 : false;
};

/**
 * @param {AnymatchMatcher} matchers
 * @param {Array|string} testString
 * @param {object} options
 * @returns {boolean|number|Function}
 */
const anymatch = (matchers, testString, options = DEFAULT_OPTIONS) => {
  if (matchers == null) {
    throw new TypeError('anymatch: specify first argument');
  }
  const opts = typeof options === 'boolean' ? {returnIndex: options} : options;
  const returnIndex = opts.returnIndex || false;

  // Early cache for matchers.
  const mtchers = arrify(matchers);
  const negatedGlobs = mtchers
    .filter(item => typeof item === 'string' && item.charAt(0) === BANG)
    .map(item => item.slice(1))
    .map(item => picomatch(item, opts));
  const patterns = mtchers
    .filter(item => typeof item !== 'string' || (typeof item === 'string' && item.charAt(0) !== BANG))
    .map(matcher => createPattern(matcher, opts));

  if (testString == null) {
    return (testString, ri = false) => {
      const returnIndex = typeof ri === 'boolean' ? ri : false;
      return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
    }
  }

  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
};

anymatch.default = anymatch;
module.exports = anymatch;

--- FILE: ./node_modules/anymatch/package.json ---
{
  "name": "anymatch",
  "version": "3.1.3",
  "description": "Matches strings against configurable strings, globs, regular expressions, and/or functions",
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "dependencies": {
    "normalize-path": "^3.0.0",
    "picomatch": "^2.0.4"
  },
  "author": {
    "name": "Elan Shanker",
    "url": "https://github.com/es128"
  },
  "license": "ISC",
  "homepage": "https://github.com/micromatch/anymatch",
  "repository": {
    "type": "git",
    "url": "https://github.com/micromatch/anymatch"
  },
  "keywords": [
    "match",
    "any",
    "string",
    "file",
    "fs",
    "list",
    "glob",
    "regex",
    "regexp",
    "regular",
    "expression",
    "function"
  ],
  "scripts": {
    "test": "nyc mocha",
    "mocha": "mocha"
  },
  "devDependencies": {
    "mocha": "^6.1.3",
    "nyc": "^14.0.0"
  },
  "engines": {
    "node": ">= 8"
  }
}

--- FILE: ./node_modules/argparse/argparse.js ---
// Port of python's argparse module, version 3.9.0:
// https://github.com/python/cpython/blob/v3.9.0rc1/Lib/argparse.py

'use strict'

// Copyright (C) 2010-2020 Python Software Foundation.
// Copyright (C) 2020 argparse.js authors

/*
 * Command-line parsing library
 *
 * This module is an optparse-inspired command-line parsing library that:
 *
 *     - handles both optional and positional arguments
 *     - produces highly informative usage messages
 *     - supports parsers that dispatch to sub-parsers
 *
 * The following is a simple usage example that sums integers from the
 * command-line and writes the result to a file::
 *
 *     parser = argparse.ArgumentParser(
 *         description='sum the integers at the command line')
 *     parser.add_argument(
 *         'integers', metavar='int', nargs='+', type=int,
 *         help='an integer to be summed')
 *     parser.add_argument(
 *         '--log', default=sys.stdout, type=argparse.FileType('w'),
 *         help='the file where the sum should be written')
 *     args = parser.parse_args()
 *     args.log.write('%s' % sum(args.integers))
 *     args.log.close()
 *
 * The module contains the following public classes:
 *
 *     - ArgumentParser -- The main entry point for command-line parsing. As the
 *         example above shows, the add_argument() method is used to populate
 *         the parser with actions for optional and positional arguments. Then
 *         the parse_args() method is invoked to convert the args at the
 *         command-line into an object with attributes.
 *
 *     - ArgumentError -- The exception raised by ArgumentParser objects when
 *         there are errors with the parser's actions. Errors raised while
 *         parsing the command-line are caught by ArgumentParser and emitted
 *         as command-line messages.
 *
 *     - FileType -- A factory for defining types of files to be created. As the
 *         example above shows, instances of FileType are typically passed as
 *         the type= argument of add_argument() calls.
 *
 *     - Action -- The base class for parser actions. Typically actions are
 *         selected by passing strings like 'store_true' or 'append_const' to
 *         the action= argument of add_argument(). However, for greater
 *         customization of ArgumentParser actions, subclasses of Action may
 *         be defined and passed as the action= argument.
 *
 *     - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
 *         ArgumentDefaultsHelpFormatter -- Formatter classes which
 *         may be passed as the formatter_class= argument to the
 *         ArgumentParser constructor. HelpFormatter is the default,
 *         RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
 *         not to change the formatting for help text, and
 *         ArgumentDefaultsHelpFormatter adds information about argument defaults
 *         to the help.
 *
 * All other classes in this module are considered implementation details.
 * (Also note that HelpFormatter and RawDescriptionHelpFormatter are only
 * considered public as object names -- the API of the formatter objects is
 * still considered an implementation detail.)
 */

const SUPPRESS = '==SUPPRESS=='

const OPTIONAL = '?'
const ZERO_OR_MORE = '*'
const ONE_OR_MORE = '+'
const PARSER = 'A...'
const REMAINDER = '...'
const _UNRECOGNIZED_ARGS_ATTR = '_unrecognized_args'


// ==================================
// Utility functions used for porting
// ==================================
const assert = require('assert')
const util = require('util')
const fs = require('fs')
const sub = require('./lib/sub')
const path = require('path')
const repr = util.inspect

function get_argv() {
    // omit first argument (which is assumed to be interpreter - `node`, `coffee`, `ts-node`, etc.)
    return process.argv.slice(1)
}

function get_terminal_size() {
    return {
        columns: +process.env.COLUMNS || process.stdout.columns || 80
    }
}

function hasattr(object, name) {
    return Object.prototype.hasOwnProperty.call(object, name)
}

function getattr(object, name, value) {
    return hasattr(object, name) ? object[name] : value
}

function setattr(object, name, value) {
    object[name] = value
}

function setdefault(object, name, value) {
    if (!hasattr(object, name)) object[name] = value
    return object[name]
}

function delattr(object, name) {
    delete object[name]
}

function range(from, to, step=1) {
    // range(10) is equivalent to range(0, 10)
    if (arguments.length === 1) [ to, from ] = [ from, 0 ]
    if (typeof from !== 'number' || typeof to !== 'number' || typeof step !== 'number') {
        throw new TypeError('argument cannot be interpreted as an integer')
    }
    if (step === 0) throw new TypeError('range() arg 3 must not be zero')

    let result = []
    if (step > 0) {
        for (let i = from; i < to; i += step) result.push(i)
    } else {
        for (let i = from; i > to; i += step) result.push(i)
    }
    return result
}

function splitlines(str, keepends = false) {
    let result
    if (!keepends) {
        result = str.split(/\r\n|[\n\r\v\f\x1c\x1d\x1e\x85\u2028\u2029]/)
    } else {
        result = []
        let parts = str.split(/(\r\n|[\n\r\v\f\x1c\x1d\x1e\x85\u2028\u2029])/)
        for (let i = 0; i < parts.length; i += 2) {
            result.push(parts[i] + (i + 1 < parts.length ? parts[i + 1] : ''))
        }
    }
    if (!result[result.length - 1]) result.pop()
    return result
}

function _string_lstrip(string, prefix_chars) {
    let idx = 0
    while (idx < string.length && prefix_chars.includes(string[idx])) idx++
    return idx ? string.slice(idx) : string
}

function _string_split(string, sep, maxsplit) {
    let result = string.split(sep)
    if (result.length > maxsplit) {
        result = result.slice(0, maxsplit).concat([ result.slice(maxsplit).join(sep) ])
    }
    return result
}

function _array_equal(array1, array2) {
    if (array1.length !== array2.length) return false
    for (let i = 0; i < array1.length; i++) {
        if (array1[i] !== array2[i]) return false
    }
    return true
}

function _array_remove(array, item) {
    let idx = array.indexOf(item)
    if (idx === -1) throw new TypeError(sub('%r not in list', item))
    array.splice(idx, 1)
}

// normalize choices to array;
// this isn't required in python because `in` and `map` operators work with anything,
// but in js dealing with multiple types here is too clunky
function _choices_to_array(choices) {
    if (choices === undefined) {
        return []
    } else if (Array.isArray(choices)) {
        return choices
    } else if (choices !== null && typeof choices[Symbol.iterator] === 'function') {
        return Array.from(choices)
    } else if (typeof choices === 'object' && choices !== null) {
        return Object.keys(choices)
    } else {
        throw new Error(sub('invalid choices value: %r', choices))
    }
}

// decorator that allows a class to be called without new
function _callable(cls) {
    let result = { // object is needed for inferred class name
        [cls.name]: function (...args) {
            let this_class = new.target === result || !new.target
            return Reflect.construct(cls, args, this_class ? cls : new.target)
        }
    }
    result[cls.name].prototype = cls.prototype
    // fix default tag for toString, e.g. [object Action] instead of [object Object]
    cls.prototype[Symbol.toStringTag] = cls.name
    return result[cls.name]
}

function _alias(object, from, to) {
    try {
        let name = object.constructor.name
        Object.defineProperty(object, from, {
            value: util.deprecate(object[to], sub('%s.%s() is renamed to %s.%s()',
                name, from, name, to)),
            enumerable: false
        })
    } catch {}
}

// decorator that allows snake_case class methods to be called with camelCase and vice versa
function _camelcase_alias(_class) {
    for (let name of Object.getOwnPropertyNames(_class.prototype)) {
        let camelcase = name.replace(/\w_[a-z]/g, s => s[0] + s[2].toUpperCase())
        if (camelcase !== name) _alias(_class.prototype, camelcase, name)
    }
    return _class
}

function _to_legacy_name(key) {
    key = key.replace(/\w_[a-z]/g, s => s[0] + s[2].toUpperCase())
    if (key === 'default') key = 'defaultValue'
    if (key === 'const') key = 'constant'
    return key
}

function _to_new_name(key) {
    if (key === 'defaultValue') key = 'default'
    if (key === 'constant') key = 'const'
    key = key.replace(/[A-Z]/g, c => '_' + c.toLowerCase())
    return key
}

// parse options
let no_default = Symbol('no_default_value')
function _parse_opts(args, descriptor) {
    function get_name() {
        let stack = new Error().stack.split('\n')
            .map(x => x.match(/^    at (.*) \(.*\)$/))
            .filter(Boolean)
            .map(m => m[1])
            .map(fn => fn.match(/[^ .]*$/)[0])

        if (stack.length && stack[0] === get_name.name) stack.shift()
        if (stack.length && stack[0] === _parse_opts.name) stack.shift()
        return stack.length ? stack[0] : ''
    }

    args = Array.from(args)
    let kwargs = {}
    let result = []
    let last_opt = args.length && args[args.length - 1]

    if (typeof last_opt === 'object' && last_opt !== null && !Array.isArray(last_opt) &&
        (!last_opt.constructor || last_opt.constructor.name === 'Object')) {
        kwargs = Object.assign({}, args.pop())
    }

    // LEGACY (v1 compatibility): camelcase
    let renames = []
    for (let key of Object.keys(descriptor)) {
        let old_name = _to_legacy_name(key)
        if (old_name !== key && (old_name in kwargs)) {
            if (key in kwargs) {
                // default and defaultValue specified at the same time, happens often in old tests
                //throw new TypeError(sub('%s() got multiple values for argument %r', get_name(), key))
            } else {
                kwargs[key] = kwargs[old_name]
            }
            renames.push([ old_name, key ])
            delete kwargs[old_name]
        }
    }
    if (renames.length) {
        let name = get_name()
        deprecate('camelcase_' + name, sub('%s(): following options are renamed: %s',
            name, renames.map(([ a, b ]) => sub('%r -> %r', a, b))))
    }
    // end

    let missing_positionals = []
    let positional_count = args.length

    for (let [ key, def ] of Object.entries(descriptor)) {
        if (key[0] === '*') {
            if (key.length > 0 && key[1] === '*') {
                // LEGACY (v1 compatibility): camelcase
                let renames = []
                for (let key of Object.keys(kwargs)) {
                    let new_name = _to_new_name(key)
                    if (new_name !== key && (key in kwargs)) {
                        if (new_name in kwargs) {
                            // default and defaultValue specified at the same time, happens often in old tests
                            //throw new TypeError(sub('%s() got multiple values for argument %r', get_name(), new_name))
                        } else {
                            kwargs[new_name] = kwargs[key]
                        }
                        renames.push([ key, new_name ])
                        delete kwargs[key]
                    }
                }
                if (renames.length) {
                    let name = get_name()
                    deprecate('camelcase_' + name, sub('%s(): following options are renamed: %s',
                        name, renames.map(([ a, b ]) => sub('%r -> %r', a, b))))
                }
                // end
                result.push(kwargs)
                kwargs = {}
            } else {
                result.push(args)
                args = []
            }
        } else if (key in kwargs && args.length > 0) {
            throw new TypeError(sub('%s() got multiple values for argument %r', get_name(), key))
        } else if (key in kwargs) {
            result.push(kwargs[key])
            delete kwargs[key]
        } else if (args.length > 0) {
            result.push(args.shift())
        } else if (def !== no_default) {
            result.push(def)
        } else {
            missing_positionals.push(key)
        }
    }

    if (Object.keys(kwargs).length) {
        throw new TypeError(sub('%s() got an unexpected keyword argument %r',
            get_name(), Object.keys(kwargs)[0]))
    }

    if (args.length) {
        let from = Object.entries(descriptor).filter(([ k, v ]) => k[0] !== '*' && v !== no_default).length
        let to = Object.entries(descriptor).filter(([ k ]) => k[0] !== '*').length
        throw new TypeError(sub('%s() takes %s positional argument%s but %s %s given',
            get_name(),
            from === to ? sub('from %s to %s', from, to) : to,
            from === to && to === 1 ? '' : 's',
            positional_count,
            positional_count === 1 ? 'was' : 'were'))
    }

    if (missing_positionals.length) {
        let strs = missing_positionals.map(repr)
        if (strs.length > 1) strs[strs.length - 1] = 'and ' + strs[strs.length - 1]
        let str_joined = strs.join(strs.length === 2 ? '' : ', ')
        throw new TypeError(sub('%s() missing %i required positional argument%s: %s',
            get_name(), strs.length, strs.length === 1 ? '' : 's', str_joined))
    }

    return result
}

let _deprecations = {}
function deprecate(id, string) {
    _deprecations[id] = _deprecations[id] || util.deprecate(() => {}, string)
    _deprecations[id]()
}


// =============================
// Utility functions and classes
// =============================
function _AttributeHolder(cls = Object) {
    /*
     *  Abstract base class that provides __repr__.
     *
     *  The __repr__ method returns a string in the format::
     *      ClassName(attr=name, attr=name, ...)
     *  The attributes are determined either by a class-level attribute,
     *  '_kwarg_names', or by inspecting the instance __dict__.
     */

    return class _AttributeHolder extends cls {
        [util.inspect.custom]() {
            let type_name = this.constructor.name
            let arg_strings = []
            let star_args = {}
            for (let arg of this._get_args()) {
                arg_strings.push(repr(arg))
            }
            for (let [ name, value ] of this._get_kwargs()) {
                if (/^[a-z_][a-z0-9_$]*$/i.test(name)) {
                    arg_strings.push(sub('%s=%r', name, value))
                } else {
                    star_args[name] = value
                }
            }
            if (Object.keys(star_args).length) {
                arg_strings.push(sub('**%s', repr(star_args)))
            }
            return sub('%s(%s)', type_name, arg_strings.join(', '))
        }

        toString() {
            return this[util.inspect.custom]()
        }

        _get_kwargs() {
            return Object.entries(this)
        }

        _get_args() {
            return []
        }
    }
}


function _copy_items(items) {
    if (items === undefined) {
        return []
    }
    return items.slice(0)
}


// ===============
// Formatting Help
// ===============
const HelpFormatter = _camelcase_alias(_callable(class HelpFormatter {
    /*
     *  Formatter for generating usage messages and argument help strings.
     *
     *  Only the name of this class is considered a public API. All the methods
     *  provided by the class are considered an implementation detail.
     */

    constructor() {
        let [
            prog,
            indent_increment,
            max_help_position,
            width
        ] = _parse_opts(arguments, {
            prog: no_default,
            indent_increment: 2,
            max_help_position: 24,
            width: undefined
        })

        // default setting for width
        if (width === undefined) {
            width = get_terminal_size().columns
            width -= 2
        }

        this._prog = prog
        this._indent_increment = indent_increment
        this._max_help_position = Math.min(max_help_position,
                                      Math.max(width - 20, indent_increment * 2))
        this._width = width

        this._current_indent = 0
        this._level = 0
        this._action_max_length = 0

        this._root_section = this._Section(this, undefined)
        this._current_section = this._root_section

        this._whitespace_matcher = /[ \t\n\r\f\v]+/g // equivalent to python /\s+/ with ASCII flag
        this._long_break_matcher = /\n\n\n+/g
    }

    // ===============================
    // Section and indentation methods
    // ===============================
    _indent() {
        this._current_indent += this._indent_increment
        this._level += 1
    }

    _dedent() {
        this._current_indent -= this._indent_increment
        assert(this._current_indent >= 0, 'Indent decreased below 0.')
        this._level -= 1
    }

    _add_item(func, args) {
        this._current_section.items.push([ func, args ])
    }

    // ========================
    // Message building methods
    // ========================
    start_section(heading) {
        this._indent()
        let section = this._Section(this, this._current_section, heading)
        this._add_item(section.format_help.bind(section), [])
        this._current_section = section
    }

    end_section() {
        this._current_section = this._current_section.parent
        this._dedent()
    }

    add_text(text) {
        if (text !== SUPPRESS && text !== undefined) {
            this._add_item(this._format_text.bind(this), [text])
        }
    }

    add_usage(usage, actions, groups, prefix = undefined) {
        if (usage !== SUPPRESS) {
            let args = [ usage, actions, groups, prefix ]
            this._add_item(this._format_usage.bind(this), args)
        }
    }

    add_argument(action) {
        if (action.help !== SUPPRESS) {

            // find all invocations
            let invocations = [this._format_action_invocation(action)]
            for (let subaction of this._iter_indented_subactions(action)) {
                invocations.push(this._format_action_invocation(subaction))
            }

            // update the maximum item length
            let invocation_length = Math.max(...invocations.map(invocation => invocation.length))
            let action_length = invocation_length + this._current_indent
            this._action_max_length = Math.max(this._action_max_length,
                                               action_length)

            // add the item to the list
            this._add_item(this._format_action.bind(this), [action])
        }
    }

    add_arguments(actions) {
        for (let action of actions) {
            this.add_argument(action)
        }
    }

    // =======================
    // Help-formatting methods
    // =======================
    format_help() {
        let help = this._root_section.format_help()
        if (help) {
            help = help.replace(this._long_break_matcher, '\n\n')
            help = help.replace(/^\n+|\n+$/g, '') + '\n'
        }
        return help
    }

    _join_parts(part_strings) {
        return part_strings.filter(part => part && part !== SUPPRESS).join('')
    }

    _format_usage(usage, actions, groups, prefix) {
        if (prefix === undefined) {
            prefix = 'usage: '
        }

        // if usage is specified, use that
        if (usage !== undefined) {
            usage = sub(usage, { prog: this._prog })

        // if no optionals or positionals are available, usage is just prog
        } else if (usage === undefined && !actions.length) {
            usage = sub('%(prog)s', { prog: this._prog })

        // if optionals and positionals are available, calculate usage
        } else if (usage === undefined) {
            let prog = sub('%(prog)s', { prog: this._prog })

            // split optionals from positionals
            let optionals = []
            let positionals = []
            for (let action of actions) {
                if (action.option_strings.length) {
                    optionals.push(action)
                } else {
                    positionals.push(action)
                }
            }

            // build full usage string
            let action_usage = this._format_actions_usage([].concat(optionals).concat(positionals), groups)
            usage = [ prog, action_usage ].map(String).join(' ')

            // wrap the usage parts if it's too long

--- FILE: ./node_modules/argparse/package.json ---
{
  "name": "argparse",
  "description": "CLI arguments parser. Native port of python's argparse.",
  "version": "2.0.1",
  "keywords": [
    "cli",
    "parser",
    "argparse",
    "option",
    "args"
  ],
  "main": "argparse.js",
  "files": [
    "argparse.js",
    "lib/"
  ],
  "license": "Python-2.0",
  "repository": "nodeca/argparse",
  "scripts": {
    "lint": "eslint .",
    "test": "npm run lint && nyc mocha",
    "coverage": "npm run test && nyc report --reporter html"
  },
  "devDependencies": {
    "@babel/eslint-parser": "^7.11.0",
    "@babel/plugin-syntax-class-properties": "^7.10.4",
    "eslint": "^7.5.0",
    "mocha": "^8.0.1",
    "nyc": "^15.1.0"
  }
}

--- FILE: ./node_modules/autoprefixer/package.json ---
{
  "name": "autoprefixer",
  "version": "10.4.21",
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "engines": {
    "node": "^10 || ^12 || >=14"
  },
  "keywords": [
    "autoprefixer",
    "css",
    "prefix",
    "postcss",
    "postcss-plugin"
  ],
  "main": "lib/autoprefixer.js",
  "bin": "bin/autoprefixer",
  "types": "lib/autoprefixer.d.ts",
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/postcss/"
    },
    {
      "type": "tidelift",
      "url": "https://tidelift.com/funding/github/npm/autoprefixer"
    },
    {
      "type": "github",
      "url": "https://github.com/sponsors/ai"
    }
  ],
  "author": "Andrey Sitnik <andrey@sitnik.ru>",
  "license": "MIT",
  "repository": "postcss/autoprefixer",
  "bugs": {
    "url": "https://github.com/postcss/autoprefixer/issues"
  },
  "peerDependencies": {
    "postcss": "^8.1.0"
  },
  "dependencies": {
    "browserslist": "^4.24.4",
    "caniuse-lite": "^1.0.30001702",
    "fraction.js": "^4.3.7",
    "normalize-range": "^0.1.2",
    "picocolors": "^1.1.1",
    "postcss-value-parser": "^4.2.0"
  }
}

--- FILE: ./node_modules/bail/index.d.ts ---
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
export function bail(
  error?: Error | null | undefined
): asserts error is null | undefined

--- FILE: ./node_modules/bail/index.js ---
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
export function bail(error) {
  if (error) {
    throw error
  }
}

--- FILE: ./node_modules/bail/package.json ---
{
  "name": "bail",
  "version": "2.0.2",
  "description": "Throw a given error",
  "license": "MIT",
  "keywords": [
    "fail",
    "bail",
    "throw",
    "callback",
    "error"
  ],
  "repository": "wooorm/bail",
  "bugs": "https://github.com/wooorm/bail/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "c8": "^7.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "tsd": "^0.18.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.46.0"
  },
  "scripts": {
    "prepublishOnly": "npm run build && npm run format",
    "build": "rimraf \"*.d.ts\" && tsc && tsd && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true
  }
}

--- FILE: ./node_modules/balanced-match/index.js ---
'use strict';
module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}

--- FILE: ./node_modules/balanced-match/package.json ---
{
  "name": "balanced-match",
  "description": "Match balanced character pairs, like \"{\" and \"}\"",
  "version": "1.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/juliangruber/balanced-match.git"
  },
  "homepage": "https://github.com/juliangruber/balanced-match",
  "main": "index.js",
  "scripts": {
    "test": "tape test/test.js",
    "bench": "matcha test/bench.js"
  },
  "devDependencies": {
    "matcha": "^0.7.0",
    "tape": "^4.6.0"
  },
  "keywords": [
    "match",
    "regexp",
    "test",
    "balanced",
    "parse"
  ],
  "author": {
    "name": "Julian Gruber",
    "email": "mail@juliangruber.com",
    "url": "http://juliangruber.com"
  },
  "license": "MIT",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/20..latest",
      "firefox/nightly",
      "chrome/25..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  }
}

--- FILE: ./node_modules/binary-extensions/binary-extensions.json ---
[
	"3dm",
	"3ds",
	"3g2",
	"3gp",
	"7z",
	"a",
	"aac",
	"adp",
	"afdesign",
	"afphoto",
	"afpub",
	"ai",
	"aif",
	"aiff",
	"alz",
	"ape",
	"apk",
	"appimage",
	"ar",
	"arj",
	"asf",
	"au",
	"avi",
	"bak",
	"baml",
	"bh",
	"bin",
	"bk",
	"bmp",
	"btif",
	"bz2",
	"bzip2",
	"cab",
	"caf",
	"cgm",
	"class",
	"cmx",
	"cpio",
	"cr2",
	"cur",
	"dat",
	"dcm",
	"deb",
	"dex",
	"djvu",
	"dll",
	"dmg",
	"dng",
	"doc",
	"docm",
	"docx",
	"dot",
	"dotm",
	"dra",
	"DS_Store",
	"dsk",
	"dts",
	"dtshd",
	"dvb",
	"dwg",
	"dxf",
	"ecelp4800",
	"ecelp7470",
	"ecelp9600",
	"egg",
	"eol",
	"eot",
	"epub",
	"exe",
	"f4v",
	"fbs",
	"fh",
	"fla",
	"flac",
	"flatpak",
	"fli",
	"flv",
	"fpx",
	"fst",
	"fvt",
	"g3",
	"gh",
	"gif",
	"graffle",
	"gz",
	"gzip",
	"h261",
	"h263",
	"h264",
	"icns",
	"ico",
	"ief",
	"img",
	"ipa",
	"iso",
	"jar",
	"jpeg",
	"jpg",
	"jpgv",
	"jpm",
	"jxr",
	"key",
	"ktx",
	"lha",
	"lib",
	"lvp",
	"lz",
	"lzh",
	"lzma",
	"lzo",
	"m3u",
	"m4a",
	"m4v",
	"mar",
	"mdi",
	"mht",
	"mid",
	"midi",
	"mj2",
	"mka",
	"mkv",
	"mmr",
	"mng",
	"mobi",
	"mov",
	"movie",
	"mp3",
	"mp4",
	"mp4a",
	"mpeg",
	"mpg",
	"mpga",
	"mxu",
	"nef",
	"npx",
	"numbers",
	"nupkg",
	"o",
	"odp",
	"ods",
	"odt",
	"oga",
	"ogg",
	"ogv",
	"otf",
	"ott",
	"pages",
	"pbm",
	"pcx",
	"pdb",
	"pdf",
	"pea",
	"pgm",
	"pic",
	"png",
	"pnm",
	"pot",
	"potm",
	"potx",
	"ppa",
	"ppam",
	"ppm",
	"pps",
	"ppsm",
	"ppsx",
	"ppt",
	"pptm",
	"pptx",
	"psd",
	"pya",
	"pyc",
	"pyo",
	"pyv",
	"qt",
	"rar",
	"ras",
	"raw",
	"resources",
	"rgb",
	"rip",
	"rlc",
	"rmf",
	"rmvb",
	"rpm",
	"rtf",
	"rz",
	"s3m",
	"s7z",
	"scpt",
	"sgi",
	"shar",
	"snap",
	"sil",
	"sketch",
	"slk",
	"smv",
	"snk",
	"so",
	"stl",
	"suo",
	"sub",
	"swf",
	"tar",
	"tbz",
	"tbz2",
	"tga",
	"tgz",
	"thmx",
	"tif",
	"tiff",
	"tlz",
	"ttc",
	"ttf",
	"txz",
	"udf",
	"uvh",
	"uvi",
	"uvm",
	"uvp",
	"uvs",
	"uvu",
	"viv",
	"vob",
	"war",
	"wav",
	"wax",
	"wbmp",
	"wdp",
	"weba",
	"webm",
	"webp",
	"whl",
	"wim",
	"wm",
	"wma",
	"wmv",
	"wmx",
	"woff",
	"woff2",
	"wrm",
	"wvx",
	"xbm",
	"xif",
	"xla",
	"xlam",
	"xls",
	"xlsb",
	"xlsm",
	"xlsx",
	"xlt",
	"xltm",
	"xltx",
	"xm",
	"xmind",
	"xpi",
	"xpm",
	"xwd",
	"xz",
	"z",
	"zip",
	"zipx"
]

--- FILE: ./node_modules/binary-extensions/binary-extensions.json.d.ts ---
declare const binaryExtensionsJson: readonly string[];

export = binaryExtensionsJson;

--- FILE: ./node_modules/binary-extensions/index.d.ts ---
/**
List of binary file extensions.

@example
```
import binaryExtensions = require('binary-extensions');

console.log(binaryExtensions);
//=> ['3ds', '3g2', …]
```
*/
declare const binaryExtensions: readonly string[];

export = binaryExtensions;

--- FILE: ./node_modules/binary-extensions/index.js ---
module.exports = require('./binary-extensions.json');

--- FILE: ./node_modules/binary-extensions/package.json ---
{
	"name": "binary-extensions",
	"version": "2.3.0",
	"description": "List of binary file extensions",
	"license": "MIT",
	"repository": "sindresorhus/binary-extensions",
	"funding": "https://github.com/sponsors/sindresorhus",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "https://sindresorhus.com"
	},
	"sideEffects": false,
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts",
		"binary-extensions.json",
		"binary-extensions.json.d.ts"
	],
	"keywords": [
		"binary",
		"extensions",
		"extension",
		"file",
		"json",
		"list",
		"array"
	],
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.7.2",
		"xo": "^0.24.0"
	}
}

--- FILE: ./node_modules/brace-expansion/index.js ---
var concatMap = require('concat-map');
var balanced = require('balanced-match');

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,(?!,).*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}


--- FILE: ./node_modules/brace-expansion/package.json ---
{
  "name": "brace-expansion",
  "description": "Brace expansion as known from sh/bash",
  "version": "1.1.12",
  "repository": {
    "type": "git",
    "url": "git://github.com/juliangruber/brace-expansion.git"
  },
  "homepage": "https://github.com/juliangruber/brace-expansion",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js",
    "gentest": "bash test/generate.sh",
    "bench": "matcha test/perf/bench.js"
  },
  "dependencies": {
    "balanced-match": "^1.0.0",
    "concat-map": "0.0.1"
  },
  "devDependencies": {
    "matcha": "^0.7.0",
    "tape": "^4.6.0"
  },
  "keywords": [],
  "author": {
    "name": "Julian Gruber",
    "email": "mail@juliangruber.com",
    "url": "http://juliangruber.com"
  },
  "license": "MIT",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/20..latest",
      "firefox/nightly",
      "chrome/25..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "publishConfig": {
    "tag": "1.x"
  }
}

--- FILE: ./node_modules/braces/index.js ---
'use strict';

const stringify = require('./lib/stringify');
const compile = require('./lib/compile');
const expand = require('./lib/expand');
const parse = require('./lib/parse');

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = [];

  if (Array.isArray(input)) {
    for (const pattern of input) {
      const result = braces.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces.create(input, options));
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse(input, options);

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options);
  }
  return stringify(input, options);
};

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }
  return compile(input, options);
};

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }

  let result = expand(input, options);

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }

  return result;
};

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input];
  }

  return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options);
};

/**
 * Expose "braces"
 */

module.exports = braces;

--- FILE: ./node_modules/braces/package.json ---
{
  "name": "braces",
  "description": "Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.",
  "version": "3.0.3",
  "homepage": "https://github.com/micromatch/braces",
  "author": "Jon Schlinkert (https://github.com/jonschlinkert)",
  "contributors": [
    "Brian Woodward (https://twitter.com/doowb)",
    "Elan Shanker (https://github.com/es128)",
    "Eugene Sharygin (https://github.com/eush77)",
    "hemanth.hm (http://h3manth.com)",
    "Jon Schlinkert (http://twitter.com/jonschlinkert)"
  ],
  "repository": "micromatch/braces",
  "bugs": {
    "url": "https://github.com/micromatch/braces/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=8"
  },
  "scripts": {
    "test": "mocha",
    "benchmark": "node benchmark"
  },
  "dependencies": {
    "fill-range": "^7.1.1"
  },
  "devDependencies": {
    "ansi-colors": "^3.2.4",
    "bash-path": "^2.0.1",
    "gulp-format-md": "^2.0.0",
    "mocha": "^6.1.1"
  },
  "keywords": [
    "alpha",
    "alphabetical",
    "bash",
    "brace",
    "braces",
    "expand",
    "expansion",
    "filepath",
    "fill",
    "fs",
    "glob",
    "globbing",
    "letter",
    "match",
    "matches",
    "matching",
    "number",
    "numerical",
    "path",
    "range",
    "ranges",
    "sh"
  ],
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "lint": {
      "reflinks": true
    },
    "plugins": [
      "gulp-format-md"
    ]
  }
}

--- FILE: ./node_modules/browserslist/browser.js ---
var BrowserslistError = require('./error')

function noop() {}

module.exports = {
  loadQueries: function loadQueries() {
    throw new BrowserslistError(
      'Sharable configs are not supported in client-side build of Browserslist'
    )
  },

  getStat: function getStat(opts) {
    return opts.stats
  },

  loadConfig: function loadConfig(opts) {
    if (opts.config) {
      throw new BrowserslistError(
        'Browserslist config are not supported in client-side build'
      )
    }
  },

  loadCountry: function loadCountry() {
    throw new BrowserslistError(
      'Country statistics are not supported ' +
        'in client-side build of Browserslist'
    )
  },

  loadFeature: function loadFeature() {
    throw new BrowserslistError(
      'Supports queries are not available in client-side build of Browserslist'
    )
  },

  currentNode: function currentNode(resolve, context) {
    return resolve(['maintained node versions'], context)[0]
  },

  parseConfig: noop,

  readConfig: noop,

  findConfig: noop,

  findConfigFile: noop,

  clearCaches: noop,

  oldDataWarning: noop,

  env: {}
}

--- FILE: ./node_modules/browserslist/cli.js ---
#!/usr/bin/env node

var fs = require('fs')
var updateDb = require('update-browserslist-db')

var browserslist = require('./')
var pkg = require('./package.json')

var args = process.argv.slice(2)

var USAGE =
  'Usage:\n' +
  '  npx browserslist\n' +
  '  npx browserslist "QUERIES"\n' +
  '  npx browserslist --json "QUERIES"\n' +
  '  npx browserslist --config="path/to/browserlist/file"\n' +
  '  npx browserslist --coverage "QUERIES"\n' +
  '  npx browserslist --coverage=US "QUERIES"\n' +
  '  npx browserslist --coverage=US,RU,global "QUERIES"\n' +
  '  npx browserslist --env="environment name defined in config"\n' +
  '  npx browserslist --stats="path/to/browserlist/stats/file"\n' +
  '  npx browserslist --mobile-to-desktop\n' +
  '  npx browserslist --ignore-unknown-versions\n'

function isArg(arg) {
  return args.some(function (str) {
    return str === arg || str.indexOf(arg + '=') === 0
  })
}

function error(msg) {
  process.stderr.write('browserslist: ' + msg + '\n')
  process.exit(1)
}

if (isArg('--help') || isArg('-h')) {
  process.stdout.write(pkg.description + '.\n\n' + USAGE + '\n')
} else if (isArg('--version') || isArg('-v')) {
  process.stdout.write('browserslist ' + pkg.version + '\n')
} else if (isArg('--update-db')) {
  /* c8 ignore next 8 */
  process.stdout.write(
    'The --update-db command is deprecated.\n' +
      'Please use npx update-browserslist-db@latest instead.\n'
  )
  process.stdout.write('Browserslist DB update will still be made.\n')
  updateDb(function (str) {
    process.stdout.write(str)
  })
} else {
  var mode = 'browsers'
  var opts = {}
  var queries
  var areas

  for (var i = 0; i < args.length; i++) {
    if (args[i][0] !== '-') {
      queries = args[i].replace(/^["']|["']$/g, '')
      continue
    }

    var arg = args[i].split('=')
    var name = arg[0]
    var value = arg[1]

    if (value) value = value.replace(/^["']|["']$/g, '')

    if (name === '--config' || name === '-b') {
      opts.config = value
    } else if (name === '--env' || name === '-e') {
      opts.env = value
    } else if (name === '--stats' || name === '-s') {
      opts.stats = value
    } else if (name === '--coverage' || name === '-c') {
      if (mode !== 'json') mode = 'coverage'
      if (value) {
        areas = value.split(',')
      } else {
        areas = ['global']
      }
    } else if (name === '--json') {
      mode = 'json'
    } else if (name === '--mobile-to-desktop') {
      /* c8 ignore next */
      opts.mobileToDesktop = true
    } else if (name === '--ignore-unknown-versions') {
      /* c8 ignore next */
      opts.ignoreUnknownVersions = true
    } else {
      error('Unknown arguments ' + args[i] + '.\n\n' + USAGE)
    }
  }

  var browsers
  try {
    browsers = browserslist(queries, opts)
  } catch (e) {
    if (e.name === 'BrowserslistError') {
      error(e.message)
    } /* c8 ignore start */ else {
      throw e
    } /* c8 ignore end */
  }

  var coverage
  if (mode === 'browsers') {
    browsers.forEach(function (browser) {
      process.stdout.write(browser + '\n')
    })
  } else if (areas) {
    coverage = areas.map(function (area) {
      var stats
      if (area !== 'global') {
        stats = area
      } else if (opts.stats) {
        stats = JSON.parse(fs.readFileSync(opts.stats))
      }
      var result = browserslist.coverage(browsers, stats)
      var round = Math.round(result * 100) / 100.0

      return [area, round]
    })

    if (mode === 'coverage') {
      var prefix = 'These browsers account for '
      process.stdout.write(prefix)
      coverage.forEach(function (data, index) {
        var area = data[0]
        var round = data[1]
        var end = 'globally'
        if (area && area !== 'global') {
          end = 'in the ' + area.toUpperCase()
        } else if (opts.stats) {
          end = 'in custom statistics'
        }

        if (index !== 0) {
          process.stdout.write(prefix.replace(/./g, ' '))
        }

        process.stdout.write(round + '% of all users ' + end + '\n')
      })
    }
  }

  if (mode === 'json') {
    var data = { browsers: browsers }
    if (coverage) {
      data.coverage = coverage.reduce(function (object, j) {
        object[j[0]] = j[1]
        return object
      }, {})
    }
    process.stdout.write(JSON.stringify(data, null, '  ') + '\n')
  }
}

--- FILE: ./node_modules/browserslist/error.d.ts ---
declare class BrowserslistError extends Error {
  constructor(message: any)
  name: 'BrowserslistError'
  browserslist: true
}

export = BrowserslistError

--- FILE: ./node_modules/browserslist/error.js ---
function BrowserslistError(message) {
  this.name = 'BrowserslistError'
  this.message = message
  this.browserslist = true
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, BrowserslistError)
  }
}

BrowserslistError.prototype = Error.prototype

module.exports = BrowserslistError

--- FILE: ./node_modules/browserslist/index.d.ts ---
/**
 * Return array of browsers by selection queries.
 *
 * ```js
 * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']
 * ```
 *
 * @param queries Browser queries.
 * @param opts Options.
 * @returns Array with browser names in Can I Use.
 */
declare function browserslist(
  queries?: string | readonly string[] | null,
  opts?: browserslist.Options
): string[]

declare namespace browserslist {
  interface Query {
    compose: 'or' | 'and'
    type: string
    query: string
    not?: true
  }

  interface Options {
    /**
     * Path to processed file. It will be used to find config files.
     */
    path?: string | false
    /**
     * Processing environment. It will be used to take right queries
     * from config file.
     */
    env?: string
    /**
     * Custom browser usage statistics for "> 1% in my stats" query.
     */
    stats?: Stats | string
    /**
     * Path to config file with queries.
     */
    config?: string
    /**
     * Do not throw on unknown version in direct query.
     */
    ignoreUnknownVersions?: boolean
    /**
     * Throw an error if env is not found.
     */
    throwOnMissing?: boolean
    /**
     * Disable security checks for extend query.
     */
    dangerousExtend?: boolean
    /**
     * Alias mobile browsers to the desktop version when Can I Use
     * doesn’t have data about the specified version.
     */
    mobileToDesktop?: boolean
  }

  type Config = {
    defaults: string[]
    [section: string]: string[] | undefined
  }

  interface Stats {
    [browser: string]: {
      [version: string]: number
    }
  }

  /**
   * Browser names aliases.
   */
  let aliases: {
    [alias: string]: string | undefined
  }

  /**
   * Aliases to work with joined versions like `ios_saf 7.0-7.1`.
   */
  let versionAliases: {
    [browser: string]:
      | {
          [version: string]: string | undefined
        }
      | undefined
  }

  /**
   * Can I Use only provides a few versions for some browsers (e.g. `and_chr`).
   *
   * Fallback to a similar browser for unknown versions.
   */
  let desktopNames: {
    [browser: string]: string | undefined
  }

  let data: {
    [browser: string]:
      | {
          name: string
          versions: string[]
          released: string[]
          releaseDate: {
            [version: string]: number | undefined | null
          }
        }
      | undefined
  }

  let nodeVersions: string[]

  interface Usage {
    [version: string]: number
  }

  let usage: {
    global?: Usage
    custom?: Usage | null
    [country: string]: Usage | undefined | null
  }

  let cache: {
    [feature: string]: {
      [name: string]: {
        [version: string]: string
      }
    }
  }

  /**
   * Default browsers query
   */
  let defaults: readonly string[]

  /**
   * Which statistics should be used. Country code or custom statistics.
   * Pass `"my stats"` to load statistics from `Browserslist` files.
   */
  type StatsOptions = string | 'my stats' | Stats | { dataByBrowser: Stats }

  /**
   * Return browsers market coverage.
   *
   * ```js
   * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1
   * ```
   *
   * @param browsers Browsers names in Can I Use.
   * @param stats Which statistics should be used.
   * @returns Total market coverage for all selected browsers.
   */
  function coverage(browsers: readonly string[], stats?: StatsOptions): number

  /**
   * Get queries AST to analyze the config content.
   *
   * @param queries Browser queries.
   * @param opts Options.
   * @returns An array of the data of each query in the config.
   */
  function parse(
    queries?: string | readonly string[] | null,
    opts?: browserslist.Options
  ): Query[]

  /**
   * Return queries for specific file inside the project.
   *
   * ```js
   * browserslist.loadConfig({
   *   file: process.cwd()
   * }) ?? browserslist.defaults
   * ```
   */
  function loadConfig(options: LoadConfigOptions): string[] | undefined

  function clearCaches(): void

  function parseConfig(string: string): Config

  function readConfig(file: string): Config

  function findConfig(...pathSegments: string[]): Config | undefined

  function findConfigFile(...pathSegments: string[]): string | undefined

  interface LoadConfigOptions {
    /**
     * Path to config file
     * */
    config?: string

    /**
     * Path to file inside the project to find Browserslist config
     * in closest folder
     */
    path?: string

    /**
     * Environment to choose part of config.
     */
    env?: string
  }
}

declare global {
  namespace NodeJS {
    interface ProcessEnv {
      BROWSERSLIST?: string
      BROWSERSLIST_CONFIG?: string
      BROWSERSLIST_DANGEROUS_EXTEND?: string
      BROWSERSLIST_DISABLE_CACHE?: string
      BROWSERSLIST_ENV?: string
      BROWSERSLIST_IGNORE_OLD_DATA?: string
      BROWSERSLIST_STATS?: string
      BROWSERSLIST_ROOT_PATH?: string
    }
  }
}

export = browserslist

--- FILE: ./node_modules/browserslist/index.js ---
var jsReleases = require('node-releases/data/processed/envs.json')
var agents = require('caniuse-lite/dist/unpacker/agents').agents
var e2c = require('electron-to-chromium/versions')
var jsEOL = require('node-releases/data/release-schedule/release-schedule.json')
var path = require('path')

var BrowserslistError = require('./error')
var env = require('./node')
var parseWithoutCache = require('./parse') // Will load browser.js in webpack

var YEAR = 365.259641 * 24 * 60 * 60 * 1000
var ANDROID_EVERGREEN_FIRST = '37'
var OP_MOB_BLINK_FIRST = 14

// Helpers

function isVersionsMatch(versionA, versionB) {
  return (versionA + '.').indexOf(versionB + '.') === 0
}

function isEolReleased(name) {
  var version = name.slice(1)
  return browserslist.nodeVersions.some(function (i) {
    return isVersionsMatch(i, version)
  })
}

function normalize(versions) {
  return versions.filter(function (version) {
    return typeof version === 'string'
  })
}

function normalizeElectron(version) {
  var versionToUse = version
  if (version.split('.').length === 3) {
    versionToUse = version.split('.').slice(0, -1).join('.')
  }
  return versionToUse
}

function nameMapper(name) {
  return function mapName(version) {
    return name + ' ' + version
  }
}

function getMajor(version) {
  return parseInt(version.split('.')[0])
}

function getMajorVersions(released, number) {
  if (released.length === 0) return []
  var majorVersions = uniq(released.map(getMajor))
  var minimum = majorVersions[majorVersions.length - number]
  if (!minimum) {
    return released
  }
  var selected = []
  for (var i = released.length - 1; i >= 0; i--) {
    if (minimum > getMajor(released[i])) break
    selected.unshift(released[i])
  }
  return selected
}

function uniq(array) {
  var filtered = []
  for (var i = 0; i < array.length; i++) {
    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i])
  }
  return filtered
}

function fillUsage(result, name, data) {
  for (var i in data) {
    result[name + ' ' + i] = data[i]
  }
}

function generateFilter(sign, version) {
  version = parseFloat(version)
  if (sign === '>') {
    return function (v) {
      return parseLatestFloat(v) > version
    }
  } else if (sign === '>=') {
    return function (v) {
      return parseLatestFloat(v) >= version
    }
  } else if (sign === '<') {
    return function (v) {
      return parseFloat(v) < version
    }
  } else {
    return function (v) {
      return parseFloat(v) <= version
    }
  }

  function parseLatestFloat(v) {
    return parseFloat(v.split('-')[1] || v)
  }
}

function generateSemverFilter(sign, version) {
  version = version.split('.').map(parseSimpleInt)
  version[1] = version[1] || 0
  version[2] = version[2] || 0
  if (sign === '>') {
    return function (v) {
      v = v.split('.').map(parseSimpleInt)
      return compareSemver(v, version) > 0
    }
  } else if (sign === '>=') {
    return function (v) {
      v = v.split('.').map(parseSimpleInt)
      return compareSemver(v, version) >= 0
    }
  } else if (sign === '<') {
    return function (v) {
      v = v.split('.').map(parseSimpleInt)
      return compareSemver(version, v) > 0
    }
  } else {
    return function (v) {
      v = v.split('.').map(parseSimpleInt)
      return compareSemver(version, v) >= 0
    }
  }
}

function parseSimpleInt(x) {
  return parseInt(x)
}

function compare(a, b) {
  if (a < b) return -1
  if (a > b) return +1
  return 0
}

function compareSemver(a, b) {
  return (
    compare(parseInt(a[0]), parseInt(b[0])) ||
    compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
    compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
  )
}

// this follows the npm-like semver behavior
function semverFilterLoose(operator, range) {
  range = range.split('.').map(parseSimpleInt)
  if (typeof range[1] === 'undefined') {
    range[1] = 'x'
  }
  // ignore any patch version because we only return minor versions
  // range[2] = 'x'
  switch (operator) {
    case '<=':
      return function (version) {
        version = version.split('.').map(parseSimpleInt)
        return compareSemverLoose(version, range) <= 0
      }
    case '>=':
    default:
      return function (version) {
        version = version.split('.').map(parseSimpleInt)
        return compareSemverLoose(version, range) >= 0
      }
  }
}

// this follows the npm-like semver behavior
function compareSemverLoose(version, range) {
  if (version[0] !== range[0]) {
    return version[0] < range[0] ? -1 : +1
  }
  if (range[1] === 'x') {
    return 0
  }
  if (version[1] !== range[1]) {
    return version[1] < range[1] ? -1 : +1
  }
  return 0
}

function resolveVersion(data, version) {
  if (data.versions.indexOf(version) !== -1) {
    return version
  } else if (browserslist.versionAliases[data.name][version]) {
    return browserslist.versionAliases[data.name][version]
  } else {
    return false
  }
}

function normalizeVersion(data, version) {
  var resolved = resolveVersion(data, version)
  if (resolved) {
    return resolved
  } else if (data.versions.length === 1) {
    return data.versions[0]
  } else {
    return false
  }
}

function filterByYear(since, context) {
  since = since / 1000
  return Object.keys(agents).reduce(function (selected, name) {
    var data = byName(name, context)
    if (!data) return selected
    var versions = Object.keys(data.releaseDate).filter(function (v) {
      var date = data.releaseDate[v]
      return date !== null && date >= since
    })
    return selected.concat(versions.map(nameMapper(data.name)))
  }, [])
}

function cloneData(data) {
  return {
    name: data.name,
    versions: data.versions,
    released: data.released,
    releaseDate: data.releaseDate
  }
}

function byName(name, context) {
  name = name.toLowerCase()
  name = browserslist.aliases[name] || name
  if (context.mobileToDesktop && browserslist.desktopNames[name]) {
    var desktop = browserslist.data[browserslist.desktopNames[name]]
    if (name === 'android') {
      return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)
    } else {
      var cloned = cloneData(desktop)
      cloned.name = name
      return cloned
    }
  }
  return browserslist.data[name]
}

function normalizeAndroidVersions(androidVersions, chromeVersions) {
  var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST)
  return androidVersions
    .filter(function (version) {
      return /^(?:[2-4]\.|[34]$)/.test(version)
    })
    .concat(chromeVersions.slice(iFirstEvergreen))
}

function copyObject(obj) {
  var copy = {}
  for (var key in obj) {
    copy[key] = obj[key]
  }
  return copy
}

function normalizeAndroidData(android, chrome) {
  android.released = normalizeAndroidVersions(android.released, chrome.released)
  android.versions = normalizeAndroidVersions(android.versions, chrome.versions)
  android.releaseDate = copyObject(android.releaseDate)
  android.released.forEach(function (v) {
    if (android.releaseDate[v] === undefined) {
      android.releaseDate[v] = chrome.releaseDate[v]
    }
  })
  return android
}

function checkName(name, context) {
  var data = byName(name, context)
  if (!data) throw new BrowserslistError('Unknown browser ' + name)
  return data
}

function unknownQuery(query) {
  return new BrowserslistError(
    'Unknown browser query `' +
      query +
      '`. ' +
      'Maybe you are using old Browserslist or made typo in query.'
  )
}

// Adjusts last X versions queries for some mobile browsers,
// where caniuse data jumps from a legacy version to the latest
function filterJumps(list, name, nVersions, context) {
  var jump = 1
  switch (name) {
    case 'android':
      if (context.mobileToDesktop) return list
      var released = browserslist.data.chrome.released
      jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST)
      break
    case 'op_mob':
      var latest = browserslist.data.op_mob.released.slice(-1)[0]
      jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1
      break
    default:
      return list
  }
  if (nVersions <= jump) {
    return list.slice(-1)
  }
  return list.slice(jump - 1 - nVersions)
}

function isSupported(flags, withPartial) {
  return (
    typeof flags === 'string' &&
    (flags.indexOf('y') >= 0 || (withPartial && flags.indexOf('a') >= 0))
  )
}

function resolve(queries, context) {
  return parseQueries(queries).reduce(function (result, node, index) {
    if (node.not && index === 0) {
      throw new BrowserslistError(
        'Write any browsers query (for instance, `defaults`) ' +
          'before `' +
          node.query +
          '`'
      )
    }
    var type = QUERIES[node.type]
    var array = type.select.call(browserslist, context, node).map(function (j) {
      var parts = j.split(' ')
      if (parts[1] === '0') {
        return parts[0] + ' ' + byName(parts[0], context).versions[0]
      } else {
        return j
      }
    })

    if (node.compose === 'and') {
      if (node.not) {
        return result.filter(function (j) {
          return array.indexOf(j) === -1
        })
      } else {
        return result.filter(function (j) {
          return array.indexOf(j) !== -1
        })
      }
    } else {
      if (node.not) {
        var filter = {}
        array.forEach(function (j) {
          filter[j] = true
        })
        return result.filter(function (j) {
          return !filter[j]
        })
      }
      return result.concat(array)
    }
  }, [])
}

function prepareOpts(opts) {
  if (typeof opts === 'undefined') opts = {}

  if (typeof opts.path === 'undefined') {
    opts.path = path.resolve ? path.resolve('.') : '.'
  }

  return opts
}

function prepareQueries(queries, opts) {
  if (typeof queries === 'undefined' || queries === null) {
    var config = browserslist.loadConfig(opts)
    if (config) {
      queries = config
    } else {
      queries = browserslist.defaults
    }
  }

  return queries
}

function checkQueries(queries) {
  if (!(typeof queries === 'string' || Array.isArray(queries))) {
    throw new BrowserslistError(
      'Browser queries must be an array or string. Got ' + typeof queries + '.'
    )
  }
}

var cache = {}
var parseCache = {}

function browserslist(queries, opts) {
  opts = prepareOpts(opts)
  queries = prepareQueries(queries, opts)
  checkQueries(queries)

  var needsPath = parseQueries(queries).some(function (node) {
    return QUERIES[node.type].needsPath
  })
  var context = {
    ignoreUnknownVersions: opts.ignoreUnknownVersions,
    dangerousExtend: opts.dangerousExtend,
    mobileToDesktop: opts.mobileToDesktop,
    env: opts.env
  }
  // Removing to avoid using context.path without marking query as needsPath
  if (needsPath) {
    context.path = opts.path
  }

  env.oldDataWarning(browserslist.data)
  var stats = env.getStat(opts, browserslist.data)
  if (stats) {
    context.customUsage = {}
    for (var browser in stats) {
      fillUsage(context.customUsage, browser, stats[browser])
    }
  }

  var cacheKey = JSON.stringify([queries, context])
  if (cache[cacheKey]) return cache[cacheKey]

  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {
    name1 = name1.split(' ')
    name2 = name2.split(' ')
    if (name1[0] === name2[0]) {
      // assumptions on caniuse data
      // 1) version ranges never overlaps
      // 2) if version is not a range, it never contains `-`
      var version1 = name1[1].split('-')[0]
      var version2 = name2[1].split('-')[0]
      return compareSemver(version2.split('.'), version1.split('.'))
    } else {
      return compare(name1[0], name2[0])
    }
  })
  if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
    cache[cacheKey] = result
  }
  return result
}

function parseQueries(queries) {
  var cacheKey = JSON.stringify(queries)
  if (cacheKey in parseCache) return parseCache[cacheKey]
  var result = parseWithoutCache(QUERIES, queries)
  if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
    parseCache[cacheKey] = result
  }
  return result
}

function loadCustomUsage(context, config) {
  var stats = env.loadStat(context, config, browserslist.data)
  if (stats) {
    context.customUsage = {}
    for (var browser in stats) {
      fillUsage(context.customUsage, browser, stats[browser])
    }
  }
  if (!context.customUsage) {
    throw new BrowserslistError('Custom usage statistics was not provided')
  }
  return context.customUsage
}

browserslist.parse = function (queries, opts) {
  opts = prepareOpts(opts)
  queries = prepareQueries(queries, opts)
  checkQueries(queries)
  return parseQueries(queries)
}

// Will be filled by Can I Use data below
browserslist.cache = {}
browserslist.data = {}
browserslist.usage = {
  global: {},
  custom: null
}

// Default browsers query
browserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead']

// Browser names aliases
browserslist.aliases = {
  fx: 'firefox',
  ff: 'firefox',
  ios: 'ios_saf',
  explorer: 'ie',
  blackberry: 'bb',
  explorermobile: 'ie_mob',
  operamini: 'op_mini',
  operamobile: 'op_mob',
  chromeandroid: 'and_chr',
  firefoxandroid: 'and_ff',
  ucandroid: 'and_uc',
  qqandroid: 'and_qq'
}

// Can I Use only provides a few versions for some browsers (e.g. and_chr).
// Fallback to a similar browser for unknown versions
// Note op_mob is not included as its chromium versions are not in sync with Opera desktop
browserslist.desktopNames = {
  and_chr: 'chrome',
  and_ff: 'firefox',
  ie_mob: 'ie',
  android: 'chrome' // has extra processing logic
}

// Aliases to work with joined versions like `ios_saf 7.0-7.1`
browserslist.versionAliases = {}

browserslist.clearCaches = env.clearCaches
browserslist.parseConfig = env.parseConfig
browserslist.readConfig = env.readConfig
browserslist.findConfigFile = env.findConfigFile
browserslist.findConfig = env.findConfig
browserslist.loadConfig = env.loadConfig

browserslist.coverage = function (browsers, stats) {
  var data
  if (typeof stats === 'undefined') {
    data = browserslist.usage.global
  } else if (stats === 'my stats') {
    var opts = {}
    opts.path = path.resolve ? path.resolve('.') : '.'
    var customStats = env.getStat(opts)
    if (!customStats) {
      throw new BrowserslistError('Custom usage statistics was not provided')
    }
    data = {}
    for (var browser in customStats) {
      fillUsage(data, browser, customStats[browser])
    }
  } else if (typeof stats === 'string') {
    if (stats.length > 2) {
      stats = stats.toLowerCase()
    } else {
      stats = stats.toUpperCase()
    }
    env.loadCountry(browserslist.usage, stats, browserslist.data)
    data = browserslist.usage[stats]
  } else {
    if ('dataByBrowser' in stats) {
      stats = stats.dataByBrowser
    }
    data = {}
    for (var name in stats) {
      for (var version in stats[name]) {
        data[name + ' ' + version] = stats[name][version]
      }
    }
  }

  return browsers.reduce(function (all, i) {
    var usage = data[i]
    if (usage === undefined) {
      usage = data[i.replace(/ \S+$/, ' 0')]
    }
    return all + (usage || 0)
  }, 0)
}

function nodeQuery(context, node) {
  var matched = browserslist.nodeVersions.filter(function (i) {
    return isVersionsMatch(i, node.version)
  })
  if (matched.length === 0) {
    if (context.ignoreUnknownVersions) {
      return []
    } else {
      throw new BrowserslistError(
        'Unknown version ' + node.version + ' of Node.js'
      )
    }
  }
  return ['node ' + matched[matched.length - 1]]
}

function sinceQuery(context, node) {
  var year = parseInt(node.year)
  var month = parseInt(node.month || '01') - 1
  var day = parseInt(node.day || '01')
  return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context)
}

function coverQuery(context, node) {
  var coverage = parseFloat(node.coverage)
  var usage = browserslist.usage.global
  if (node.place) {
    if (node.place.match(/^my\s+stats$/i)) {

--- FILE: ./node_modules/browserslist/node.js ---
var feature = require('caniuse-lite/dist/unpacker/feature').default
var region = require('caniuse-lite/dist/unpacker/region').default
var fs = require('fs')
var path = require('path')

var BrowserslistError = require('./error')

var IS_SECTION = /^\s*\[(.+)]\s*$/
var CONFIG_PATTERN = /^browserslist-config-/
var SCOPED_CONFIG__PATTERN = /@[^/]+(?:\/[^/]+)?\/browserslist-config(?:-|$|\/)/
var FORMAT =
  'Browserslist config should be a string or an array ' +
  'of strings with browser queries'

var dataTimeChecked = false
var statCache = {}
var configPathCache = {}
var parseConfigCache = {}

function checkExtend(name) {
  var use = ' Use `dangerousExtend` option to disable.'
  if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {
    throw new BrowserslistError(
      'Browserslist config needs `browserslist-config-` prefix. ' + use
    )
  }
  if (name.replace(/^@[^/]+\//, '').indexOf('.') !== -1) {
    throw new BrowserslistError(
      '`.` not allowed in Browserslist config name. ' + use
    )
  }
  if (name.indexOf('node_modules') !== -1) {
    throw new BrowserslistError(
      '`node_modules` not allowed in Browserslist config.' + use
    )
  }
}

function isFile(file) {
  return fs.existsSync(file) && fs.statSync(file).isFile()
}
function isDirectory(dir) {
  return fs.existsSync(dir) && fs.statSync(dir).isDirectory()
}

function eachParent(file, callback, cache) {
  var loc = path.resolve(file)
  var pathsForCacheResult = []
  var result
  do {
    if (!pathInRoot(loc)) {
      break
    }
    if (cache && loc in cache) {
      result = cache[loc]
      break
    }
    pathsForCacheResult.push(loc)

    if (!isDirectory(loc)) {
      continue
    }

    var locResult = callback(loc)
    if (typeof locResult !== 'undefined') {
      result = locResult
      break
    }
  } while (loc !== (loc = path.dirname(loc)))

  if (cache && !process.env.BROWSERSLIST_DISABLE_CACHE) {
    pathsForCacheResult.forEach(function (cachePath) {
      cache[cachePath] = result
    })
  }
  return result
}

function pathInRoot(p) {
  if (!process.env.BROWSERSLIST_ROOT_PATH) return true
  var rootPath = path.resolve(process.env.BROWSERSLIST_ROOT_PATH)
  if (path.relative(rootPath, p).substring(0, 2) === '..') {
    return false
  }
  return true
}

function check(section) {
  if (Array.isArray(section)) {
    for (var i = 0; i < section.length; i++) {
      if (typeof section[i] !== 'string') {
        throw new BrowserslistError(FORMAT)
      }
    }
  } else if (typeof section !== 'string') {
    throw new BrowserslistError(FORMAT)
  }
}

function pickEnv(config, opts) {
  if (typeof config !== 'object') return config

  var name
  if (typeof opts.env === 'string') {
    name = opts.env
  } else if (process.env.BROWSERSLIST_ENV) {
    name = process.env.BROWSERSLIST_ENV
  } else if (process.env.NODE_ENV) {
    name = process.env.NODE_ENV
  } else {
    name = 'production'
  }

  if (opts.throwOnMissing) {
    if (name && name !== 'defaults' && !config[name]) {
      throw new BrowserslistError(
        'Missing config for Browserslist environment `' + name + '`'
      )
    }
  }

  return config[name] || config.defaults
}

function parsePackage(file) {
  var text = fs
    .readFileSync(file)
    .toString()
    .replace(/^\uFEFF/m, '')
  var list
  if (text.indexOf('"browserslist"') >= 0) {
    list = JSON.parse(text).browserslist
  } else if (text.indexOf('"browserlist"') >= 0) {
    var config = JSON.parse(text)
    if (config.browserlist && !config.browserslist) {
      throw new BrowserslistError(
        '`browserlist` key instead of `browserslist` in ' + file
      )
    }
  }
  if (Array.isArray(list) || typeof list === 'string') {
    list = { defaults: list }
  }
  for (var i in list) {
    check(list[i])
  }

  return list
}

function parsePackageOrReadConfig(file) {
  if (file in parseConfigCache) {
    return parseConfigCache[file]
  }

  var isPackage = path.basename(file) === 'package.json'
  var result = isPackage ? parsePackage(file) : module.exports.readConfig(file)

  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
    parseConfigCache[file] = result
  }
  return result
}

function latestReleaseTime(agents) {
  var latest = 0
  for (var name in agents) {
    var dates = agents[name].releaseDate || {}
    for (var key in dates) {
      if (latest < dates[key]) {
        latest = dates[key]
      }
    }
  }
  return latest * 1000
}

function getMonthsPassed(date) {
  var now = new Date()
  var past = new Date(date)

  var years = now.getFullYear() - past.getFullYear()
  var months = now.getMonth() - past.getMonth()

  return years * 12 + months
}

function normalizeStats(data, stats) {
  if (!data) {
    data = {}
  }
  if (stats && 'dataByBrowser' in stats) {
    stats = stats.dataByBrowser
  }

  if (typeof stats !== 'object') return undefined

  var normalized = {}
  for (var i in stats) {
    var versions = Object.keys(stats[i])
    if (versions.length === 1 && data[i] && data[i].versions.length === 1) {
      var normal = data[i].versions[0]
      normalized[i] = {}
      normalized[i][normal] = stats[i][versions[0]]
    } else {
      normalized[i] = stats[i]
    }
  }

  return normalized
}

function normalizeUsageData(usageData, data) {
  for (var browser in usageData) {
    var browserUsage = usageData[browser]
    // https://github.com/browserslist/browserslist/issues/431#issuecomment-565230615
    // caniuse-db returns { 0: "percentage" } for `and_*` regional stats
    if ('0' in browserUsage) {
      var versions = data[browser].versions
      browserUsage[versions[versions.length - 1]] = browserUsage[0]
      delete browserUsage[0]
    }
  }
}

module.exports = {
  loadQueries: function loadQueries(ctx, name) {
    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
      checkExtend(name)
    }
    var queries = require(require.resolve(name, { paths: ['.', ctx.path] }))
    if (typeof queries === 'object' && queries !== null && queries.__esModule) {
      queries = queries.default
    }
    if (queries) {
      if (Array.isArray(queries)) {
        return queries
      } else if (typeof queries === 'object') {
        if (!queries.defaults) queries.defaults = []
        return pickEnv(queries, ctx, name)
      }
    }
    throw new BrowserslistError(
      '`' +
        name +
        '` config exports not an array of queries' +
        ' or an object of envs'
    )
  },

  loadStat: function loadStat(ctx, name, data) {
    if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
      checkExtend(name)
    }
    var stats = require(require.resolve(
      path.join(name, 'browserslist-stats.json'),
      { paths: ['.'] }
    ))
    return normalizeStats(data, stats)
  },

  getStat: function getStat(opts, data) {
    var stats
    if (opts.stats) {
      stats = opts.stats
    } else if (process.env.BROWSERSLIST_STATS) {
      stats = process.env.BROWSERSLIST_STATS
    } else if (opts.path && path.resolve && fs.existsSync) {
      stats = eachParent(
        opts.path,
        function (dir) {
          var file = path.join(dir, 'browserslist-stats.json')
          return isFile(file) ? file : undefined
        },
        statCache
      )
    }
    if (typeof stats === 'string') {
      try {
        stats = JSON.parse(fs.readFileSync(stats))
      } catch (e) {
        throw new BrowserslistError("Can't read " + stats)
      }
    }
    return normalizeStats(data, stats)
  },

  loadConfig: function loadConfig(opts) {
    if (process.env.BROWSERSLIST) {
      return process.env.BROWSERSLIST
    } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {
      var file = opts.config || process.env.BROWSERSLIST_CONFIG
      return pickEnv(parsePackageOrReadConfig(file), opts)
    } else if (opts.path) {
      return pickEnv(module.exports.findConfig(opts.path), opts)
    } else {
      return undefined
    }
  },

  loadCountry: function loadCountry(usage, country, data) {
    var code = country.replace(/[^\w-]/g, '')
    if (!usage[code]) {
      var compressed
      try {
        compressed = require('caniuse-lite/data/regions/' + code + '.js')
      } catch (e) {
        throw new BrowserslistError('Unknown region name `' + code + '`.')
      }
      var usageData = region(compressed)
      normalizeUsageData(usageData, data)
      usage[country] = {}
      for (var i in usageData) {
        for (var j in usageData[i]) {
          usage[country][i + ' ' + j] = usageData[i][j]
        }
      }
    }
  },

  loadFeature: function loadFeature(features, name) {
    name = name.replace(/[^\w-]/g, '')
    if (features[name]) return
    var compressed
    try {
      compressed = require('caniuse-lite/data/features/' + name + '.js')
    } catch (e) {
      throw new BrowserslistError('Unknown feature name `' + name + '`.')
    }
    var stats = feature(compressed).stats
    features[name] = {}
    for (var i in stats) {
      features[name][i] = {}
      for (var j in stats[i]) {
        features[name][i][j] = stats[i][j]
      }
    }
  },

  parseConfig: function parseConfig(string) {
    var result = { defaults: [] }
    var sections = ['defaults']

    string
      .toString()
      .replace(/#[^\n]*/g, '')
      .split(/\n|,/)
      .map(function (line) {
        return line.trim()
      })
      .filter(function (line) {
        return line !== ''
      })
      .forEach(function (line) {
        if (IS_SECTION.test(line)) {
          sections = line.match(IS_SECTION)[1].trim().split(' ')
          sections.forEach(function (section) {
            if (result[section]) {
              throw new BrowserslistError(
                'Duplicate section ' + section + ' in Browserslist config'
              )
            }
            result[section] = []
          })
        } else {
          sections.forEach(function (section) {
            result[section].push(line)
          })
        }
      })

    return result
  },

  readConfig: function readConfig(file) {
    if (!isFile(file)) {
      throw new BrowserslistError("Can't read " + file + ' config')
    }

    return module.exports.parseConfig(fs.readFileSync(file))
  },

  findConfigFile: function findConfigFile(from) {
    return eachParent(
      from,
      function (dir) {
        var config = path.join(dir, 'browserslist')
        var pkg = path.join(dir, 'package.json')
        var rc = path.join(dir, '.browserslistrc')

        var pkgBrowserslist
        if (isFile(pkg)) {
          try {
            pkgBrowserslist = parsePackage(pkg)
          } catch (e) {
            if (e.name === 'BrowserslistError') throw e
            console.warn(
              '[Browserslist] Could not parse ' + pkg + '. Ignoring it.'
            )
          }
        }

        if (isFile(config) && pkgBrowserslist) {
          throw new BrowserslistError(
            dir + ' contains both browserslist and package.json with browsers'
          )
        } else if (isFile(rc) && pkgBrowserslist) {
          throw new BrowserslistError(
            dir +
              ' contains both .browserslistrc and package.json with browsers'
          )
        } else if (isFile(config) && isFile(rc)) {
          throw new BrowserslistError(
            dir + ' contains both .browserslistrc and browserslist'
          )
        } else if (isFile(config)) {
          return config
        } else if (isFile(rc)) {
          return rc
        } else if (pkgBrowserslist) {
          return pkg
        }
      },
      configPathCache
    )
  },

  findConfig: function findConfig(from) {
    var configFile = this.findConfigFile(from)

    return configFile ? parsePackageOrReadConfig(configFile) : undefined
  },

  clearCaches: function clearCaches() {
    dataTimeChecked = false
    statCache = {}
    configPathCache = {}
    parseConfigCache = {}

    this.cache = {}
  },

  oldDataWarning: function oldDataWarning(agentsObj) {
    if (dataTimeChecked) return
    dataTimeChecked = true
    if (process.env.BROWSERSLIST_IGNORE_OLD_DATA) return

    var latest = latestReleaseTime(agentsObj)
    var monthsPassed = getMonthsPassed(latest)

    if (latest !== 0 && monthsPassed >= 6) {
      var months = monthsPassed + ' ' + (monthsPassed > 1 ? 'months' : 'month')
      console.warn(
        'Browserslist: browsers data (caniuse-lite) is ' +
          months +
          ' old. Please run:\n' +
          '  npx update-browserslist-db@latest\n' +
          '  Why you should do it regularly: ' +
          'https://github.com/browserslist/update-db#readme'
      )
    }
  },

  currentNode: function currentNode() {
    return 'node ' + process.versions.node
  },

  env: process.env
}

--- FILE: ./node_modules/browserslist/package.json ---
{
  "name": "browserslist",
  "version": "4.25.1",
  "description": "Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset",
  "keywords": [
    "caniuse",
    "browsers",
    "target"
  ],
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/browserslist"
    },
    {
      "type": "tidelift",
      "url": "https://tidelift.com/funding/github/npm/browserslist"
    },
    {
      "type": "github",
      "url": "https://github.com/sponsors/ai"
    }
  ],
  "author": "Andrey Sitnik <andrey@sitnik.ru>",
  "license": "MIT",
  "repository": "browserslist/browserslist",
  "dependencies": {
    "caniuse-lite": "^1.0.30001726",
    "electron-to-chromium": "^1.5.173",
    "node-releases": "^2.0.19",
    "update-browserslist-db": "^1.1.3"
  },
  "engines": {
    "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
  },
  "bin": {
    "browserslist": "cli.js"
  },
  "types": "./index.d.ts",
  "browser": {
    "./node.js": "./browser.js",
    "path": false
  }
}

--- FILE: ./node_modules/browserslist/parse.js ---
var AND_REGEXP = /^\s+and\s+(.*)/i
var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i

function flatten(array) {
  if (!Array.isArray(array)) return [array]
  return array.reduce(function (a, b) {
    return a.concat(flatten(b))
  }, [])
}

function find(string, predicate) {
  for (var max = string.length, n = 1; n <= max; n++) {
    var parsed = string.substr(-n, n)
    if (predicate(parsed, n, max)) {
      return string.slice(0, -n)
    }
  }
  return ''
}

function matchQuery(all, query) {
  var node = { query: query }
  if (query.indexOf('not ') === 0) {
    node.not = true
    query = query.slice(4)
  }

  for (var name in all) {
    var type = all[name]
    var match = query.match(type.regexp)
    if (match) {
      node.type = name
      for (var i = 0; i < type.matches.length; i++) {
        node[type.matches[i]] = match[i + 1]
      }
      return node
    }
  }

  node.type = 'unknown'
  return node
}

function matchBlock(all, string, qs) {
  var node
  return find(string, function (parsed, n, max) {
    if (AND_REGEXP.test(parsed)) {
      node = matchQuery(all, parsed.match(AND_REGEXP)[1])
      node.compose = 'and'
      qs.unshift(node)
      return true
    } else if (OR_REGEXP.test(parsed)) {
      node = matchQuery(all, parsed.match(OR_REGEXP)[1])
      node.compose = 'or'
      qs.unshift(node)
      return true
    } else if (n === max) {
      node = matchQuery(all, parsed.trim())
      node.compose = 'or'
      qs.unshift(node)
      return true
    }
    return false
  })
}

module.exports = function parse(all, queries) {
  if (!Array.isArray(queries)) queries = [queries]
  return flatten(
    queries.map(function (block) {
      var qs = []
      do {
        block = matchBlock(all, block, qs)
      } while (block)
      return qs
    })
  )
}

--- FILE: ./node_modules/callsites/index.d.ts ---
declare namespace callsites {
	interface CallSite {
		/**
		Returns the value of `this`.
		*/
		getThis(): unknown | undefined;

		/**
		Returns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.
		*/
		getTypeName(): string | null;

		/**
		Returns the current function.
		*/
		getFunction(): Function | undefined;

		/**
		Returns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.
		*/
		getFunctionName(): string | null;

		/**
		Returns the name of the property of `this` or one of its prototypes that holds the current function.
		*/
		getMethodName(): string | undefined;

		/**
		Returns the name of the script if this function was defined in a script.
		*/
		getFileName(): string | null;

		/**
		Returns the current line number if this function was defined in a script.
		*/
		getLineNumber(): number | null;

		/**
		Returns the current column number if this function was defined in a script.
		*/
		getColumnNumber(): number | null;

		/**
		Returns a string representing the location where `eval` was called if this function was created using a call to `eval`.
		*/
		getEvalOrigin(): string | undefined;

		/**
		Returns `true` if this is a top-level invocation, that is, if it's a global object.
		*/
		isToplevel(): boolean;

		/**
		Returns `true` if this call takes place in code defined by a call to `eval`.
		*/
		isEval(): boolean;

		/**
		Returns `true` if this call is in native V8 code.
		*/
		isNative(): boolean;

		/**
		Returns `true` if this is a constructor call.
		*/
		isConstructor(): boolean;
	}
}

declare const callsites: {
	/**
	Get callsites from the V8 stack trace API.

	@returns An array of `CallSite` objects.

	@example
	```
	import callsites = require('callsites');

	function unicorn() {
		console.log(callsites()[0].getFileName());
		//=> '/Users/sindresorhus/dev/callsites/test.js'
	}

	unicorn();
	```
	*/
	(): callsites.CallSite[];

	// TODO: Remove this for the next major release, refactor the whole definition to:
	// declare function callsites(): callsites.CallSite[];
	// export = callsites;
	default: typeof callsites;
};

export = callsites;

--- FILE: ./node_modules/callsites/index.js ---
'use strict';

const callsites = () => {
	const _prepareStackTrace = Error.prepareStackTrace;
	Error.prepareStackTrace = (_, stack) => stack;
	const stack = new Error().stack.slice(1);
	Error.prepareStackTrace = _prepareStackTrace;
	return stack;
};

module.exports = callsites;
// TODO: Remove this for the next major release
module.exports.default = callsites;

--- FILE: ./node_modules/callsites/package.json ---
{
	"name": "callsites",
	"version": "3.1.0",
	"description": "Get callsites from the V8 stack trace API",
	"license": "MIT",
	"repository": "sindresorhus/callsites",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=6"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"stacktrace",
		"v8",
		"callsite",
		"callsites",
		"stack",
		"trace",
		"function",
		"file",
		"line",
		"debug"
	],
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.7.2",
		"xo": "^0.24.0"
	}
}

--- FILE: ./node_modules/camelcase/index.d.ts ---
declare namespace camelcase {
	interface Options {
		/**
		Uppercase the first character: `foo-bar` → `FooBar`.

		@default false
		*/
		readonly pascalCase?: boolean;

		/**
		Preserve the consecutive uppercase characters: `foo-BAR` → `FooBAR`.

		@default false
		*/
		readonly preserveConsecutiveUppercase?: boolean;

		/**
		The locale parameter indicates the locale to be used to convert to upper/lower case according to any locale-specific case mappings. If multiple locales are given in an array, the best available locale is used.

		Setting `locale: false` ignores the platform locale and uses the [Unicode Default Case Conversion](https://unicode-org.github.io/icu/userguide/transforms/casemappings.html#simple-single-character-case-mapping) algorithm.

		Default: The host environment’s current locale.

		@example
		```
		import camelCase = require('camelcase');

		camelCase('lorem-ipsum', {locale: 'en-US'});
		//=> 'loremIpsum'
		camelCase('lorem-ipsum', {locale: 'tr-TR'});
		//=> 'loremİpsum'
		camelCase('lorem-ipsum', {locale: ['en-US', 'en-GB']});
		//=> 'loremIpsum'
		camelCase('lorem-ipsum', {locale: ['tr', 'TR', 'tr-TR']});
		//=> 'loremİpsum'
		```
		*/
		readonly locale?: false | string | readonly string[];
	}
}

/**
Convert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`.

Correctly handles Unicode strings.

@param input - String to convert to camel case.

@example
```
import camelCase = require('camelcase');

camelCase('foo-bar');
//=> 'fooBar'

camelCase('foo_bar');
//=> 'fooBar'

camelCase('Foo-Bar');
//=> 'fooBar'

camelCase('розовый_пушистый_единорог');
//=> 'розовыйПушистыйЕдинорог'

camelCase('Foo-Bar', {pascalCase: true});
//=> 'FooBar'

camelCase('--foo.bar', {pascalCase: false});
//=> 'fooBar'

camelCase('Foo-BAR', {preserveConsecutiveUppercase: true});
//=> 'fooBAR'

camelCase('fooBAR', {pascalCase: true, preserveConsecutiveUppercase: true}));
//=> 'FooBAR'

camelCase('foo bar');
//=> 'fooBar'

console.log(process.argv[3]);
//=> '--foo-bar'
camelCase(process.argv[3]);
//=> 'fooBar'

camelCase(['foo', 'bar']);
//=> 'fooBar'

camelCase(['__foo__', '--bar'], {pascalCase: true});
//=> 'FooBar'

camelCase(['foo', 'BAR'], {pascalCase: true, preserveConsecutiveUppercase: true})
//=> 'FooBAR'

camelCase('lorem-ipsum', {locale: 'en-US'});
//=> 'loremIpsum'
```
*/
declare function camelcase(
	input: string | readonly string[],
	options?: camelcase.Options
): string;

export = camelcase;

--- FILE: ./node_modules/camelcase/index.js ---
'use strict';

const UPPERCASE = /[\p{Lu}]/u;
const LOWERCASE = /[\p{Ll}]/u;
const LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
const IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
const SEPARATORS = /[_.\- ]+/;

const LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
const SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
const NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');

const preserveCamelCase = (string, toLowerCase, toUpperCase) => {
	let isLastCharLower = false;
	let isLastCharUpper = false;
	let isLastLastCharUpper = false;

	for (let i = 0; i < string.length; i++) {
		const character = string[i];

		if (isLastCharLower && UPPERCASE.test(character)) {
			string = string.slice(0, i) + '-' + string.slice(i);
			isLastCharLower = false;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = true;
			i++;
		} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = false;
			isLastCharLower = true;
		} else {
			isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
			isLastLastCharUpper = isLastCharUpper;
			isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
		}
	}

	return string;
};

const preserveConsecutiveUppercase = (input, toLowerCase) => {
	LEADING_CAPITAL.lastIndex = 0;

	return input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));
};

const postProcess = (input, toUpperCase) => {
	SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
	NUMBERS_AND_IDENTIFIER.lastIndex = 0;

	return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))
		.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));
};

const camelCase = (input, options) => {
	if (!(typeof input === 'string' || Array.isArray(input))) {
		throw new TypeError('Expected the input to be `string | string[]`');
	}

	options = {
		pascalCase: false,
		preserveConsecutiveUppercase: false,
		...options
	};

	if (Array.isArray(input)) {
		input = input.map(x => x.trim())
			.filter(x => x.length)
			.join('-');
	} else {
		input = input.trim();
	}

	if (input.length === 0) {
		return '';
	}

	const toLowerCase = options.locale === false ?
		string => string.toLowerCase() :
		string => string.toLocaleLowerCase(options.locale);
	const toUpperCase = options.locale === false ?
		string => string.toUpperCase() :
		string => string.toLocaleUpperCase(options.locale);

	if (input.length === 1) {
		return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
	}

	const hasUpperCase = input !== toLowerCase(input);

	if (hasUpperCase) {
		input = preserveCamelCase(input, toLowerCase, toUpperCase);
	}

	input = input.replace(LEADING_SEPARATORS, '');

	if (options.preserveConsecutiveUppercase) {
		input = preserveConsecutiveUppercase(input, toLowerCase);
	} else {
		input = toLowerCase(input);
	}

	if (options.pascalCase) {
		input = toUpperCase(input.charAt(0)) + input.slice(1);
	}

	return postProcess(input, toUpperCase);
};

module.exports = camelCase;
// TODO: Remove this for the next major release
module.exports.default = camelCase;

--- FILE: ./node_modules/camelcase/package.json ---
{
	"name": "camelcase",
	"version": "6.3.0",
	"description": "Convert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`",
	"license": "MIT",
	"repository": "sindresorhus/camelcase",
	"funding": "https://github.com/sponsors/sindresorhus",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "https://sindresorhus.com"
	},
	"engines": {
		"node": ">=10"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"camelcase",
		"camel-case",
		"camel",
		"case",
		"dash",
		"hyphen",
		"dot",
		"underscore",
		"separator",
		"string",
		"text",
		"convert",
		"pascalcase",
		"pascal-case"
	],
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.11.0",
		"xo": "^0.28.3"
	}
}

--- FILE: ./node_modules/caniuse-lite/package.json ---
{
  "name": "caniuse-lite",
  "version": "1.0.30001731",
  "description": "A smaller version of caniuse-db, with only the essentials!",
  "main": "dist/unpacker/index.js",
  "files": [
    "data",
    "dist"
  ],
  "keywords": [
    "support"
  ],
  "author": {
    "name": "Ben Briggs",
    "email": "beneb.info@gmail.com",
    "url": "http://beneb.info"
  },
  "repository": "browserslist/caniuse-lite",
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/browserslist"
    },
    {
      "type": "tidelift",
      "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
    },
    {
      "type": "github",
      "url": "https://github.com/sponsors/ai"
    }
  ],
  "license": "CC-BY-4.0"
}

--- FILE: ./node_modules/ccount/index.d.ts ---
/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */
export function ccount(value: string, character: string): number

--- FILE: ./node_modules/ccount/index.js ---
/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */
export function ccount(value, character) {
  const source = String(value)

  if (typeof character !== 'string') {
    throw new TypeError('Expected character')
  }

  let count = 0
  let index = source.indexOf(character)

  while (index !== -1) {
    count++
    index = source.indexOf(character, index + character.length)
  }

  return count
}

--- FILE: ./node_modules/ccount/package.json ---
{
  "name": "ccount",
  "version": "2.0.1",
  "description": "Count how often a character (or substring) is used in a string",
  "license": "MIT",
  "keywords": [
    "character",
    "count",
    "char"
  ],
  "repository": "wooorm/ccount",
  "bugs": "https://github.com/wooorm/ccount/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "c8": "^7.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.46.0"
  },
  "scripts": {
    "prepublishOnly": "npm run build && npm run format",
    "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true,
    "ignoreCatch": true
  }
}

--- FILE: ./node_modules/chalk/index.d.ts ---
/**
Basic foreground colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type ForegroundColor =
	| 'black'
	| 'red'
	| 'green'
	| 'yellow'
	| 'blue'
	| 'magenta'
	| 'cyan'
	| 'white'
	| 'gray'
	| 'grey'
	| 'blackBright'
	| 'redBright'
	| 'greenBright'
	| 'yellowBright'
	| 'blueBright'
	| 'magentaBright'
	| 'cyanBright'
	| 'whiteBright';

/**
Basic background colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type BackgroundColor =
	| 'bgBlack'
	| 'bgRed'
	| 'bgGreen'
	| 'bgYellow'
	| 'bgBlue'
	| 'bgMagenta'
	| 'bgCyan'
	| 'bgWhite'
	| 'bgGray'
	| 'bgGrey'
	| 'bgBlackBright'
	| 'bgRedBright'
	| 'bgGreenBright'
	| 'bgYellowBright'
	| 'bgBlueBright'
	| 'bgMagentaBright'
	| 'bgCyanBright'
	| 'bgWhiteBright';

/**
Basic colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type Color = ForegroundColor | BackgroundColor;

declare type Modifiers =
	| 'reset'
	| 'bold'
	| 'dim'
	| 'italic'
	| 'underline'
	| 'inverse'
	| 'hidden'
	| 'strikethrough'
	| 'visible';

declare namespace chalk {
	/**
	Levels:
	- `0` - All colors disabled.
	- `1` - Basic 16 colors support.
	- `2` - ANSI 256 colors support.
	- `3` - Truecolor 16 million colors support.
	*/
	type Level = 0 | 1 | 2 | 3;

	interface Options {
		/**
		Specify the color support for Chalk.

		By default, color support is automatically detected based on the environment.

		Levels:
		- `0` - All colors disabled.
		- `1` - Basic 16 colors support.
		- `2` - ANSI 256 colors support.
		- `3` - Truecolor 16 million colors support.
		*/
		level?: Level;
	}

	/**
	Return a new Chalk instance.
	*/
	type Instance = new (options?: Options) => Chalk;

	/**
	Detect whether the terminal supports color.
	*/
	interface ColorSupport {
		/**
		The color level used by Chalk.
		*/
		level: Level;

		/**
		Return whether Chalk supports basic 16 colors.
		*/
		hasBasic: boolean;

		/**
		Return whether Chalk supports ANSI 256 colors.
		*/
		has256: boolean;

		/**
		Return whether Chalk supports Truecolor 16 million colors.
		*/
		has16m: boolean;
	}

	interface ChalkFunction {
		/**
		Use a template string.

		@remarks Template literals are unsupported for nested calls (see [issue #341](https://github.com/chalk/chalk/issues/341))

		@example
		```
		import chalk = require('chalk');

		log(chalk`
		CPU: {red ${cpu.totalPercent}%}
		RAM: {green ${ram.used / ram.total * 100}%}
		DISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}
		`);
		```

		@example
		```
		import chalk = require('chalk');

		log(chalk.red.bgBlack`2 + 3 = {bold ${2 + 3}}`)
		```
		*/
		(text: TemplateStringsArray, ...placeholders: unknown[]): string;

		(...text: unknown[]): string;
	}

	interface Chalk extends ChalkFunction {
		/**
		Return a new Chalk instance.
		*/
		Instance: Instance;

		/**
		The color support for Chalk.

		By default, color support is automatically detected based on the environment.

		Levels:
		- `0` - All colors disabled.
		- `1` - Basic 16 colors support.
		- `2` - ANSI 256 colors support.
		- `3` - Truecolor 16 million colors support.
		*/
		level: Level;

		/**
		Use HEX value to set text color.

		@param color - Hexadecimal value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.hex('#DEADED');
		```
		*/
		hex(color: string): Chalk;

		/**
		Use keyword color value to set text color.

		@param color - Keyword value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.keyword('orange');
		```
		*/
		keyword(color: string): Chalk;

		/**
		Use RGB values to set text color.
		*/
		rgb(red: number, green: number, blue: number): Chalk;

		/**
		Use HSL values to set text color.
		*/
		hsl(hue: number, saturation: number, lightness: number): Chalk;

		/**
		Use HSV values to set text color.
		*/
		hsv(hue: number, saturation: number, value: number): Chalk;

		/**
		Use HWB values to set text color.
		*/
		hwb(hue: number, whiteness: number, blackness: number): Chalk;

		/**
		Use a [Select/Set Graphic Rendition](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters) (SGR) [color code number](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) to set text color.

		30 <= code && code < 38 || 90 <= code && code < 98
		For example, 31 for red, 91 for redBright.
		*/
		ansi(code: number): Chalk;

		/**
		Use a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set text color.
		*/
		ansi256(index: number): Chalk;

		/**
		Use HEX value to set background color.

		@param color - Hexadecimal value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.bgHex('#DEADED');
		```
		*/
		bgHex(color: string): Chalk;

		/**
		Use keyword color value to set background color.

		@param color - Keyword value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.bgKeyword('orange');
		```
		*/
		bgKeyword(color: string): Chalk;

		/**
		Use RGB values to set background color.
		*/
		bgRgb(red: number, green: number, blue: number): Chalk;

		/**
		Use HSL values to set background color.
		*/
		bgHsl(hue: number, saturation: number, lightness: number): Chalk;

		/**
		Use HSV values to set background color.
		*/
		bgHsv(hue: number, saturation: number, value: number): Chalk;

		/**
		Use HWB values to set background color.
		*/
		bgHwb(hue: number, whiteness: number, blackness: number): Chalk;

		/**
		Use a [Select/Set Graphic Rendition](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters) (SGR) [color code number](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) to set background color.

		30 <= code && code < 38 || 90 <= code && code < 98
		For example, 31 for red, 91 for redBright.
		Use the foreground code, not the background code (for example, not 41, nor 101).
		*/
		bgAnsi(code: number): Chalk;

		/**
		Use a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set background color.
		*/
		bgAnsi256(index: number): Chalk;

		/**
		Modifier: Resets the current color chain.
		*/
		readonly reset: Chalk;

		/**
		Modifier: Make text bold.
		*/
		readonly bold: Chalk;

		/**
		Modifier: Emitting only a small amount of light.
		*/
		readonly dim: Chalk;

		/**
		Modifier: Make text italic. (Not widely supported)
		*/
		readonly italic: Chalk;

		/**
		Modifier: Make text underline. (Not widely supported)
		*/
		readonly underline: Chalk;

		/**
		Modifier: Inverse background and foreground colors.
		*/
		readonly inverse: Chalk;

		/**
		Modifier: Prints the text, but makes it invisible.
		*/
		readonly hidden: Chalk;

		/**
		Modifier: Puts a horizontal line through the center of the text. (Not widely supported)
		*/
		readonly strikethrough: Chalk;

		/**
		Modifier: Prints the text only when Chalk has a color support level > 0.
		Can be useful for things that are purely cosmetic.
		*/
		readonly visible: Chalk;

		readonly black: Chalk;
		readonly red: Chalk;
		readonly green: Chalk;
		readonly yellow: Chalk;
		readonly blue: Chalk;
		readonly magenta: Chalk;
		readonly cyan: Chalk;
		readonly white: Chalk;

		/*
		Alias for `blackBright`.
		*/
		readonly gray: Chalk;

		/*
		Alias for `blackBright`.
		*/
		readonly grey: Chalk;

		readonly blackBright: Chalk;
		readonly redBright: Chalk;
		readonly greenBright: Chalk;
		readonly yellowBright: Chalk;
		readonly blueBright: Chalk;
		readonly magentaBright: Chalk;
		readonly cyanBright: Chalk;
		readonly whiteBright: Chalk;

		readonly bgBlack: Chalk;
		readonly bgRed: Chalk;
		readonly bgGreen: Chalk;
		readonly bgYellow: Chalk;
		readonly bgBlue: Chalk;
		readonly bgMagenta: Chalk;
		readonly bgCyan: Chalk;
		readonly bgWhite: Chalk;

		/*
		Alias for `bgBlackBright`.
		*/
		readonly bgGray: Chalk;

		/*
		Alias for `bgBlackBright`.
		*/
		readonly bgGrey: Chalk;

		readonly bgBlackBright: Chalk;
		readonly bgRedBright: Chalk;
		readonly bgGreenBright: Chalk;
		readonly bgYellowBright: Chalk;
		readonly bgBlueBright: Chalk;
		readonly bgMagentaBright: Chalk;
		readonly bgCyanBright: Chalk;
		readonly bgWhiteBright: Chalk;
	}
}

/**
Main Chalk object that allows to chain styles together.
Call the last one as a method with a string argument.
Order doesn't matter, and later styles take precedent in case of a conflict.
This simply means that `chalk.red.yellow.green` is equivalent to `chalk.green`.
*/
declare const chalk: chalk.Chalk & chalk.ChalkFunction & {
	supportsColor: chalk.ColorSupport | false;
	Level: chalk.Level;
	Color: Color;
	ForegroundColor: ForegroundColor;
	BackgroundColor: BackgroundColor;
	Modifiers: Modifiers;
	stderr: chalk.Chalk & {supportsColor: chalk.ColorSupport | false};
};

export = chalk;

--- FILE: ./node_modules/chalk/package.json ---
{
	"name": "chalk",
	"version": "4.1.2",
	"description": "Terminal string styling done right",
	"license": "MIT",
	"repository": "chalk/chalk",
	"funding": "https://github.com/chalk/chalk?sponsor=1",
	"main": "source",
	"engines": {
		"node": ">=10"
	},
	"scripts": {
		"test": "xo && nyc ava && tsd",
		"bench": "matcha benchmark.js"
	},
	"files": [
		"source",
		"index.d.ts"
	],
	"keywords": [
		"color",
		"colour",
		"colors",
		"terminal",
		"console",
		"cli",
		"string",
		"str",
		"ansi",
		"style",
		"styles",
		"tty",
		"formatting",
		"rgb",
		"256",
		"shell",
		"xterm",
		"log",
		"logging",
		"command-line",
		"text"
	],
	"dependencies": {
		"ansi-styles": "^4.1.0",
		"supports-color": "^7.1.0"
	},
	"devDependencies": {
		"ava": "^2.4.0",
		"coveralls": "^3.0.7",
		"execa": "^4.0.0",
		"import-fresh": "^3.1.0",
		"matcha": "^0.7.0",
		"nyc": "^15.0.0",
		"resolve-from": "^5.0.0",
		"tsd": "^0.7.4",
		"xo": "^0.28.2"
	},
	"xo": {
		"rules": {
			"unicorn/prefer-string-slice": "off",
			"unicorn/prefer-includes": "off",
			"@typescript-eslint/member-ordering": "off",
			"no-redeclare": "off",
			"unicorn/string-content": "off",
			"unicorn/better-regex": "off"
		}
	}
}

--- FILE: ./node_modules/change-case/package.json ---
{
  "name": "change-case",
  "version": "5.4.4",
  "description": "Transform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and others",
  "keywords": [
    "change",
    "case",
    "convert",
    "transform",
    "camel-case",
    "pascal-case",
    "param-case",
    "kebab-case",
    "header-case"
  ],
  "homepage": "https://github.com/blakeembrey/change-case/tree/master/packages/change-case#readme",
  "bugs": {
    "url": "https://github.com/blakeembrey/change-case/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/blakeembrey/change-case.git"
  },
  "license": "MIT",
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "type": "module",
  "exports": {
    ".": "./dist/index.js",
    "./keys": "./dist/keys.js"
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/"
  ],
  "scripts": {
    "bench": "vitest bench",
    "build": "ts-scripts build",
    "format": "ts-scripts format",
    "prepublishOnly": "npm run build",
    "specs": "ts-scripts specs",
    "test": "ts-scripts test"
  },
  "publishConfig": {
    "access": "public"
  }
}

--- FILE: ./node_modules/character-entities-html4/index.d.ts ---
/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */
export const characterEntitiesHtml4: Record<string, string>

--- FILE: ./node_modules/character-entities-html4/index.js ---
/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */
export const characterEntitiesHtml4 = {
  nbsp: ' ',
  iexcl: '¡',
  cent: '¢',
  pound: '£',
  curren: '¤',
  yen: '¥',
  brvbar: '¦',
  sect: '§',
  uml: '¨',
  copy: '©',
  ordf: 'ª',
  laquo: '«',
  not: '¬',
  shy: '­',
  reg: '®',
  macr: '¯',
  deg: '°',
  plusmn: '±',
  sup2: '²',
  sup3: '³',
  acute: '´',
  micro: 'µ',
  para: '¶',
  middot: '·',
  cedil: '¸',
  sup1: '¹',
  ordm: 'º',
  raquo: '»',
  frac14: '¼',
  frac12: '½',
  frac34: '¾',
  iquest: '¿',
  Agrave: 'À',
  Aacute: 'Á',
  Acirc: 'Â',
  Atilde: 'Ã',
  Auml: 'Ä',
  Aring: 'Å',
  AElig: 'Æ',
  Ccedil: 'Ç',
  Egrave: 'È',
  Eacute: 'É',
  Ecirc: 'Ê',
  Euml: 'Ë',
  Igrave: 'Ì',
  Iacute: 'Í',
  Icirc: 'Î',
  Iuml: 'Ï',
  ETH: 'Ð',
  Ntilde: 'Ñ',
  Ograve: 'Ò',
  Oacute: 'Ó',
  Ocirc: 'Ô',
  Otilde: 'Õ',
  Ouml: 'Ö',
  times: '×',
  Oslash: 'Ø',
  Ugrave: 'Ù',
  Uacute: 'Ú',
  Ucirc: 'Û',
  Uuml: 'Ü',
  Yacute: 'Ý',
  THORN: 'Þ',
  szlig: 'ß',
  agrave: 'à',
  aacute: 'á',
  acirc: 'â',
  atilde: 'ã',
  auml: 'ä',
  aring: 'å',
  aelig: 'æ',
  ccedil: 'ç',
  egrave: 'è',
  eacute: 'é',
  ecirc: 'ê',
  euml: 'ë',
  igrave: 'ì',
  iacute: 'í',
  icirc: 'î',
  iuml: 'ï',
  eth: 'ð',
  ntilde: 'ñ',
  ograve: 'ò',
  oacute: 'ó',
  ocirc: 'ô',
  otilde: 'õ',
  ouml: 'ö',
  divide: '÷',
  oslash: 'ø',
  ugrave: 'ù',
  uacute: 'ú',
  ucirc: 'û',
  uuml: 'ü',
  yacute: 'ý',
  thorn: 'þ',
  yuml: 'ÿ',
  fnof: 'ƒ',
  Alpha: 'Α',
  Beta: 'Β',
  Gamma: 'Γ',
  Delta: 'Δ',
  Epsilon: 'Ε',
  Zeta: 'Ζ',
  Eta: 'Η',
  Theta: 'Θ',
  Iota: 'Ι',
  Kappa: 'Κ',
  Lambda: 'Λ',
  Mu: 'Μ',
  Nu: 'Ν',
  Xi: 'Ξ',
  Omicron: 'Ο',
  Pi: 'Π',
  Rho: 'Ρ',
  Sigma: 'Σ',
  Tau: 'Τ',
  Upsilon: 'Υ',
  Phi: 'Φ',
  Chi: 'Χ',
  Psi: 'Ψ',
  Omega: 'Ω',
  alpha: 'α',
  beta: 'β',
  gamma: 'γ',
  delta: 'δ',
  epsilon: 'ε',
  zeta: 'ζ',
  eta: 'η',
  theta: 'θ',
  iota: 'ι',
  kappa: 'κ',
  lambda: 'λ',
  mu: 'μ',
  nu: 'ν',
  xi: 'ξ',
  omicron: 'ο',
  pi: 'π',
  rho: 'ρ',
  sigmaf: 'ς',
  sigma: 'σ',
  tau: 'τ',
  upsilon: 'υ',
  phi: 'φ',
  chi: 'χ',
  psi: 'ψ',
  omega: 'ω',
  thetasym: 'ϑ',
  upsih: 'ϒ',
  piv: 'ϖ',
  bull: '•',
  hellip: '…',
  prime: '′',
  Prime: '″',
  oline: '‾',
  frasl: '⁄',
  weierp: '℘',
  image: 'ℑ',
  real: 'ℜ',
  trade: '™',
  alefsym: 'ℵ',
  larr: '←',
  uarr: '↑',
  rarr: '→',
  darr: '↓',
  harr: '↔',
  crarr: '↵',
  lArr: '⇐',
  uArr: '⇑',
  rArr: '⇒',
  dArr: '⇓',
  hArr: '⇔',
  forall: '∀',
  part: '∂',
  exist: '∃',
  empty: '∅',
  nabla: '∇',
  isin: '∈',
  notin: '∉',
  ni: '∋',
  prod: '∏',
  sum: '∑',
  minus: '−',
  lowast: '∗',
  radic: '√',
  prop: '∝',
  infin: '∞',
  ang: '∠',
  and: '∧',
  or: '∨',
  cap: '∩',
  cup: '∪',
  int: '∫',
  there4: '∴',
  sim: '∼',
  cong: '≅',
  asymp: '≈',
  ne: '≠',
  equiv: '≡',
  le: '≤',
  ge: '≥',
  sub: '⊂',
  sup: '⊃',
  nsub: '⊄',
  sube: '⊆',
  supe: '⊇',
  oplus: '⊕',
  otimes: '⊗',
  perp: '⊥',
  sdot: '⋅',
  lceil: '⌈',
  rceil: '⌉',
  lfloor: '⌊',
  rfloor: '⌋',
  lang: '〈',
  rang: '〉',
  loz: '◊',
  spades: '♠',
  clubs: '♣',
  hearts: '♥',
  diams: '♦',
  quot: '"',
  amp: '&',
  lt: '<',
  gt: '>',
  OElig: 'Œ',
  oelig: 'œ',
  Scaron: 'Š',
  scaron: 'š',
  Yuml: 'Ÿ',
  circ: 'ˆ',
  tilde: '˜',
  ensp: ' ',
  emsp: ' ',
  thinsp: ' ',
  zwnj: '‌',
  zwj: '‍',
  lrm: '‎',
  rlm: '‏',
  ndash: '–',
  mdash: '—',
  lsquo: '‘',
  rsquo: '’',
  sbquo: '‚',
  ldquo: '“',
  rdquo: '”',
  bdquo: '„',
  dagger: '†',
  Dagger: '‡',
  permil: '‰',
  lsaquo: '‹',
  rsaquo: '›',
  euro: '€'
}

--- FILE: ./node_modules/character-entities-html4/package.json ---
{
  "name": "character-entities-html4",
  "version": "2.1.0",
  "description": "Map of named character references from HTML 4",
  "license": "MIT",
  "keywords": [
    "html",
    "html4",
    "entity",
    "entities",
    "character",
    "reference",
    "name",
    "replacement"
  ],
  "repository": "wooorm/character-entities-html4",
  "bugs": "https://github.com/wooorm/character-entities-html4/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "bail": "^2.0.0",
    "c8": "^7.0.0",
    "concat-stream": "^2.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.46.0"
  },
  "scripts": {
    "prepublishOnly": "npm run build && npm run format",
    "generate": "node build",
    "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run generate && npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true,
    "ignoreCatch": true
  }
}

--- FILE: ./node_modules/character-entities-legacy/index.d.ts ---
/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */
export const characterEntitiesLegacy: Array<string>

--- FILE: ./node_modules/character-entities-legacy/index.js ---
/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */
export const characterEntitiesLegacy = [
  'AElig',
  'AMP',
  'Aacute',
  'Acirc',
  'Agrave',
  'Aring',
  'Atilde',
  'Auml',
  'COPY',
  'Ccedil',
  'ETH',
  'Eacute',
  'Ecirc',
  'Egrave',
  'Euml',
  'GT',
  'Iacute',
  'Icirc',
  'Igrave',
  'Iuml',
  'LT',
  'Ntilde',
  'Oacute',
  'Ocirc',
  'Ograve',
  'Oslash',
  'Otilde',
  'Ouml',
  'QUOT',
  'REG',
  'THORN',
  'Uacute',
  'Ucirc',
  'Ugrave',
  'Uuml',
  'Yacute',
  'aacute',
  'acirc',
  'acute',
  'aelig',
  'agrave',
  'amp',
  'aring',
  'atilde',
  'auml',
  'brvbar',
  'ccedil',
  'cedil',
  'cent',
  'copy',
  'curren',
  'deg',
  'divide',
  'eacute',
  'ecirc',
  'egrave',
  'eth',
  'euml',
  'frac12',
  'frac14',
  'frac34',
  'gt',
  'iacute',
  'icirc',
  'iexcl',
  'igrave',
  'iquest',
  'iuml',
  'laquo',
  'lt',
  'macr',
  'micro',
  'middot',
  'nbsp',
  'not',
  'ntilde',
  'oacute',
  'ocirc',
  'ograve',
  'ordf',
  'ordm',
  'oslash',
  'otilde',
  'ouml',
  'para',
  'plusmn',
  'pound',
  'quot',
  'raquo',
  'reg',
  'sect',
  'shy',
  'sup1',
  'sup2',
  'sup3',
  'szlig',
  'thorn',
  'times',
  'uacute',
  'ucirc',
  'ugrave',
  'uml',
  'uuml',
  'yacute',
  'yen',
  'yuml'
]

--- FILE: ./node_modules/character-entities-legacy/package.json ---
{
  "name": "character-entities-legacy",
  "version": "3.0.0",
  "description": "List of legacy HTML named character references that don’t need a trailing semicolon",
  "license": "MIT",
  "keywords": [
    "html",
    "entity",
    "entities",
    "character",
    "reference",
    "name"
  ],
  "repository": "wooorm/character-entities-legacy",
  "bugs": "https://github.com/wooorm/character-entities-legacy/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "bail": "^2.0.0",
    "c8": "^7.0.0",
    "concat-stream": "^2.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.45.0"
  },
  "scripts": {
    "generate": "node build",
    "prepublishOnly": "npm run build && npm run format",
    "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run generate && npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true,
    "ignoreCatch": true
  }
}

--- FILE: ./node_modules/character-entities/index.d.ts ---
/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */
export const characterEntities: Record<string, string>

--- FILE: ./node_modules/character-entities/index.js ---
/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */
export const characterEntities = {
  AElig: 'Æ',
  AMP: '&',
  Aacute: 'Á',
  Abreve: 'Ă',
  Acirc: 'Â',
  Acy: 'А',
  Afr: '𝔄',
  Agrave: 'À',
  Alpha: 'Α',
  Amacr: 'Ā',
  And: '⩓',
  Aogon: 'Ą',
  Aopf: '𝔸',
  ApplyFunction: '⁡',
  Aring: 'Å',
  Ascr: '𝒜',
  Assign: '≔',
  Atilde: 'Ã',
  Auml: 'Ä',
  Backslash: '∖',
  Barv: '⫧',
  Barwed: '⌆',
  Bcy: 'Б',
  Because: '∵',
  Bernoullis: 'ℬ',
  Beta: 'Β',
  Bfr: '𝔅',
  Bopf: '𝔹',
  Breve: '˘',
  Bscr: 'ℬ',
  Bumpeq: '≎',
  CHcy: 'Ч',
  COPY: '©',
  Cacute: 'Ć',
  Cap: '⋒',
  CapitalDifferentialD: 'ⅅ',
  Cayleys: 'ℭ',
  Ccaron: 'Č',
  Ccedil: 'Ç',
  Ccirc: 'Ĉ',
  Cconint: '∰',
  Cdot: 'Ċ',
  Cedilla: '¸',
  CenterDot: '·',
  Cfr: 'ℭ',
  Chi: 'Χ',
  CircleDot: '⊙',
  CircleMinus: '⊖',
  CirclePlus: '⊕',
  CircleTimes: '⊗',
  ClockwiseContourIntegral: '∲',
  CloseCurlyDoubleQuote: '”',
  CloseCurlyQuote: '’',
  Colon: '∷',
  Colone: '⩴',
  Congruent: '≡',
  Conint: '∯',
  ContourIntegral: '∮',
  Copf: 'ℂ',
  Coproduct: '∐',
  CounterClockwiseContourIntegral: '∳',
  Cross: '⨯',
  Cscr: '𝒞',
  Cup: '⋓',
  CupCap: '≍',
  DD: 'ⅅ',
  DDotrahd: '⤑',
  DJcy: 'Ђ',
  DScy: 'Ѕ',
  DZcy: 'Џ',
  Dagger: '‡',
  Darr: '↡',
  Dashv: '⫤',
  Dcaron: 'Ď',
  Dcy: 'Д',
  Del: '∇',
  Delta: 'Δ',
  Dfr: '𝔇',
  DiacriticalAcute: '´',
  DiacriticalDot: '˙',
  DiacriticalDoubleAcute: '˝',
  DiacriticalGrave: '`',
  DiacriticalTilde: '˜',
  Diamond: '⋄',
  DifferentialD: 'ⅆ',
  Dopf: '𝔻',
  Dot: '¨',
  DotDot: '⃜',
  DotEqual: '≐',
  DoubleContourIntegral: '∯',
  DoubleDot: '¨',
  DoubleDownArrow: '⇓',
  DoubleLeftArrow: '⇐',
  DoubleLeftRightArrow: '⇔',
  DoubleLeftTee: '⫤',
  DoubleLongLeftArrow: '⟸',
  DoubleLongLeftRightArrow: '⟺',
  DoubleLongRightArrow: '⟹',
  DoubleRightArrow: '⇒',
  DoubleRightTee: '⊨',
  DoubleUpArrow: '⇑',
  DoubleUpDownArrow: '⇕',
  DoubleVerticalBar: '∥',
  DownArrow: '↓',
  DownArrowBar: '⤓',
  DownArrowUpArrow: '⇵',
  DownBreve: '̑',
  DownLeftRightVector: '⥐',
  DownLeftTeeVector: '⥞',
  DownLeftVector: '↽',
  DownLeftVectorBar: '⥖',
  DownRightTeeVector: '⥟',
  DownRightVector: '⇁',
  DownRightVectorBar: '⥗',
  DownTee: '⊤',
  DownTeeArrow: '↧',
  Downarrow: '⇓',
  Dscr: '𝒟',
  Dstrok: 'Đ',
  ENG: 'Ŋ',
  ETH: 'Ð',
  Eacute: 'É',
  Ecaron: 'Ě',
  Ecirc: 'Ê',
  Ecy: 'Э',
  Edot: 'Ė',
  Efr: '𝔈',
  Egrave: 'È',
  Element: '∈',
  Emacr: 'Ē',
  EmptySmallSquare: '◻',
  EmptyVerySmallSquare: '▫',
  Eogon: 'Ę',
  Eopf: '𝔼',
  Epsilon: 'Ε',
  Equal: '⩵',
  EqualTilde: '≂',
  Equilibrium: '⇌',
  Escr: 'ℰ',
  Esim: '⩳',
  Eta: 'Η',
  Euml: 'Ë',
  Exists: '∃',
  ExponentialE: 'ⅇ',
  Fcy: 'Ф',
  Ffr: '𝔉',
  FilledSmallSquare: '◼',
  FilledVerySmallSquare: '▪',
  Fopf: '𝔽',
  ForAll: '∀',
  Fouriertrf: 'ℱ',
  Fscr: 'ℱ',
  GJcy: 'Ѓ',
  GT: '>',
  Gamma: 'Γ',
  Gammad: 'Ϝ',
  Gbreve: 'Ğ',
  Gcedil: 'Ģ',
  Gcirc: 'Ĝ',
  Gcy: 'Г',
  Gdot: 'Ġ',
  Gfr: '𝔊',
  Gg: '⋙',
  Gopf: '𝔾',
  GreaterEqual: '≥',
  GreaterEqualLess: '⋛',
  GreaterFullEqual: '≧',
  GreaterGreater: '⪢',
  GreaterLess: '≷',
  GreaterSlantEqual: '⩾',
  GreaterTilde: '≳',
  Gscr: '𝒢',
  Gt: '≫',
  HARDcy: 'Ъ',
  Hacek: 'ˇ',
  Hat: '^',
  Hcirc: 'Ĥ',
  Hfr: 'ℌ',
  HilbertSpace: 'ℋ',
  Hopf: 'ℍ',
  HorizontalLine: '─',
  Hscr: 'ℋ',
  Hstrok: 'Ħ',
  HumpDownHump: '≎',
  HumpEqual: '≏',
  IEcy: 'Е',
  IJlig: 'Ĳ',
  IOcy: 'Ё',
  Iacute: 'Í',
  Icirc: 'Î',
  Icy: 'И',
  Idot: 'İ',
  Ifr: 'ℑ',
  Igrave: 'Ì',
  Im: 'ℑ',
  Imacr: 'Ī',
  ImaginaryI: 'ⅈ',
  Implies: '⇒',
  Int: '∬',
  Integral: '∫',
  Intersection: '⋂',
  InvisibleComma: '⁣',
  InvisibleTimes: '⁢',
  Iogon: 'Į',
  Iopf: '𝕀',
  Iota: 'Ι',
  Iscr: 'ℐ',
  Itilde: 'Ĩ',
  Iukcy: 'І',
  Iuml: 'Ï',
  Jcirc: 'Ĵ',
  Jcy: 'Й',
  Jfr: '𝔍',
  Jopf: '𝕁',
  Jscr: '𝒥',
  Jsercy: 'Ј',
  Jukcy: 'Є',
  KHcy: 'Х',
  KJcy: 'Ќ',
  Kappa: 'Κ',
  Kcedil: 'Ķ',
  Kcy: 'К',
  Kfr: '𝔎',
  Kopf: '𝕂',
  Kscr: '𝒦',
  LJcy: 'Љ',
  LT: '<',
  Lacute: 'Ĺ',
  Lambda: 'Λ',
  Lang: '⟪',
  Laplacetrf: 'ℒ',
  Larr: '↞',
  Lcaron: 'Ľ',
  Lcedil: 'Ļ',
  Lcy: 'Л',
  LeftAngleBracket: '⟨',
  LeftArrow: '←',
  LeftArrowBar: '⇤',
  LeftArrowRightArrow: '⇆',
  LeftCeiling: '⌈',
  LeftDoubleBracket: '⟦',
  LeftDownTeeVector: '⥡',
  LeftDownVector: '⇃',
  LeftDownVectorBar: '⥙',
  LeftFloor: '⌊',
  LeftRightArrow: '↔',
  LeftRightVector: '⥎',
  LeftTee: '⊣',
  LeftTeeArrow: '↤',
  LeftTeeVector: '⥚',
  LeftTriangle: '⊲',
  LeftTriangleBar: '⧏',
  LeftTriangleEqual: '⊴',
  LeftUpDownVector: '⥑',
  LeftUpTeeVector: '⥠',
  LeftUpVector: '↿',
  LeftUpVectorBar: '⥘',
  LeftVector: '↼',
  LeftVectorBar: '⥒',
  Leftarrow: '⇐',
  Leftrightarrow: '⇔',
  LessEqualGreater: '⋚',
  LessFullEqual: '≦',
  LessGreater: '≶',
  LessLess: '⪡',
  LessSlantEqual: '⩽',
  LessTilde: '≲',
  Lfr: '𝔏',
  Ll: '⋘',
  Lleftarrow: '⇚',
  Lmidot: 'Ŀ',
  LongLeftArrow: '⟵',
  LongLeftRightArrow: '⟷',
  LongRightArrow: '⟶',
  Longleftarrow: '⟸',
  Longleftrightarrow: '⟺',
  Longrightarrow: '⟹',
  Lopf: '𝕃',
  LowerLeftArrow: '↙',
  LowerRightArrow: '↘',
  Lscr: 'ℒ',
  Lsh: '↰',
  Lstrok: 'Ł',
  Lt: '≪',
  Map: '⤅',
  Mcy: 'М',
  MediumSpace: ' ',
  Mellintrf: 'ℳ',
  Mfr: '𝔐',
  MinusPlus: '∓',
  Mopf: '𝕄',
  Mscr: 'ℳ',
  Mu: 'Μ',
  NJcy: 'Њ',
  Nacute: 'Ń',
  Ncaron: 'Ň',
  Ncedil: 'Ņ',
  Ncy: 'Н',
  NegativeMediumSpace: '​',
  NegativeThickSpace: '​',
  NegativeThinSpace: '​',
  NegativeVeryThinSpace: '​',
  NestedGreaterGreater: '≫',
  NestedLessLess: '≪',
  NewLine: '\n',
  Nfr: '𝔑',
  NoBreak: '⁠',
  NonBreakingSpace: ' ',
  Nopf: 'ℕ',
  Not: '⫬',
  NotCongruent: '≢',
  NotCupCap: '≭',
  NotDoubleVerticalBar: '∦',
  NotElement: '∉',
  NotEqual: '≠',
  NotEqualTilde: '≂̸',
  NotExists: '∄',
  NotGreater: '≯',
  NotGreaterEqual: '≱',
  NotGreaterFullEqual: '≧̸',
  NotGreaterGreater: '≫̸',
  NotGreaterLess: '≹',
  NotGreaterSlantEqual: '⩾̸',
  NotGreaterTilde: '≵',
  NotHumpDownHump: '≎̸',
  NotHumpEqual: '≏̸',
  NotLeftTriangle: '⋪',
  NotLeftTriangleBar: '⧏̸',
  NotLeftTriangleEqual: '⋬',
  NotLess: '≮',
  NotLessEqual: '≰',
  NotLessGreater: '≸',
  NotLessLess: '≪̸',
  NotLessSlantEqual: '⩽̸',
  NotLessTilde: '≴',
  NotNestedGreaterGreater: '⪢̸',
  NotNestedLessLess: '⪡̸',
  NotPrecedes: '⊀',
  NotPrecedesEqual: '⪯̸',
  NotPrecedesSlantEqual: '⋠',
  NotReverseElement: '∌',
  NotRightTriangle: '⋫',
  NotRightTriangleBar: '⧐̸',
  NotRightTriangleEqual: '⋭',
  NotSquareSubset: '⊏̸',
  NotSquareSubsetEqual: '⋢',
  NotSquareSuperset: '⊐̸',
  NotSquareSupersetEqual: '⋣',
  NotSubset: '⊂⃒',
  NotSubsetEqual: '⊈',
  NotSucceeds: '⊁',
  NotSucceedsEqual: '⪰̸',
  NotSucceedsSlantEqual: '⋡',
  NotSucceedsTilde: '≿̸',
  NotSuperset: '⊃⃒',
  NotSupersetEqual: '⊉',
  NotTilde: '≁',
  NotTildeEqual: '≄',
  NotTildeFullEqual: '≇',
  NotTildeTilde: '≉',
  NotVerticalBar: '∤',
  Nscr: '𝒩',
  Ntilde: 'Ñ',
  Nu: 'Ν',
  OElig: 'Œ',
  Oacute: 'Ó',
  Ocirc: 'Ô',
  Ocy: 'О',
  Odblac: 'Ő',
  Ofr: '𝔒',
  Ograve: 'Ò',
  Omacr: 'Ō',
  Omega: 'Ω',
  Omicron: 'Ο',
  Oopf: '𝕆',
  OpenCurlyDoubleQuote: '“',
  OpenCurlyQuote: '‘',
  Or: '⩔',
  Oscr: '𝒪',
  Oslash: 'Ø',
  Otilde: 'Õ',
  Otimes: '⨷',
  Ouml: 'Ö',
  OverBar: '‾',
  OverBrace: '⏞',
  OverBracket: '⎴',
  OverParenthesis: '⏜',
  PartialD: '∂',
  Pcy: 'П',
  Pfr: '𝔓',
  Phi: 'Φ',
  Pi: 'Π',
  PlusMinus: '±',
  Poincareplane: 'ℌ',
  Popf: 'ℙ',
  Pr: '⪻',
  Precedes: '≺',
  PrecedesEqual: '⪯',
  PrecedesSlantEqual: '≼',
  PrecedesTilde: '≾',
  Prime: '″',
  Product: '∏',
  Proportion: '∷',
  Proportional: '∝',
  Pscr: '𝒫',
  Psi: 'Ψ',
  QUOT: '"',
  Qfr: '𝔔',
  Qopf: 'ℚ',
  Qscr: '𝒬',
  RBarr: '⤐',
  REG: '®',
  Racute: 'Ŕ',
  Rang: '⟫',
  Rarr: '↠',
  Rarrtl: '⤖',
  Rcaron: 'Ř',
  Rcedil: 'Ŗ',
  Rcy: 'Р',
  Re: 'ℜ',
  ReverseElement: '∋',
  ReverseEquilibrium: '⇋',
  ReverseUpEquilibrium: '⥯',
  Rfr: 'ℜ',
  Rho: 'Ρ',
  RightAngleBracket: '⟩',
  RightArrow: '→',
  RightArrowBar: '⇥',
  RightArrowLeftArrow: '⇄',
  RightCeiling: '⌉',
  RightDoubleBracket: '⟧',
  RightDownTeeVector: '⥝',
  RightDownVector: '⇂',
  RightDownVectorBar: '⥕',
  RightFloor: '⌋',
  RightTee: '⊢',
  RightTeeArrow: '↦',
  RightTeeVector: '⥛',
  RightTriangle: '⊳',
  RightTriangleBar: '⧐',
  RightTriangleEqual: '⊵',
  RightUpDownVector: '⥏',
  RightUpTeeVector: '⥜',
  RightUpVector: '↾',
  RightUpVectorBar: '⥔',
  RightVector: '⇀',
  RightVectorBar: '⥓',
  Rightarrow: '⇒',
  Ropf: 'ℝ',
  RoundImplies: '⥰',
  Rrightarrow: '⇛',
  Rscr: 'ℛ',
  Rsh: '↱',
  RuleDelayed: '⧴',
  SHCHcy: 'Щ',
  SHcy: 'Ш',
  SOFTcy: 'Ь',
  Sacute: 'Ś',
  Sc: '⪼',
  Scaron: 'Š',
  Scedil: 'Ş',
  Scirc: 'Ŝ',
  Scy: 'С',
  Sfr: '𝔖',
  ShortDownArrow: '↓',
  ShortLeftArrow: '←',
  ShortRightArrow: '→',
  ShortUpArrow: '↑',
  Sigma: 'Σ',
  SmallCircle: '∘',
  Sopf: '𝕊',
  Sqrt: '√',
  Square: '□',
  SquareIntersection: '⊓',
  SquareSubset: '⊏',
  SquareSubsetEqual: '⊑',
  SquareSuperset: '⊐',
  SquareSupersetEqual: '⊒',
  SquareUnion: '⊔',
  Sscr: '𝒮',
  Star: '⋆',
  Sub: '⋐',
  Subset: '⋐',
  SubsetEqual: '⊆',
  Succeeds: '≻',
  SucceedsEqual: '⪰',
  SucceedsSlantEqual: '≽',
  SucceedsTilde: '≿',
  SuchThat: '∋',
  Sum: '∑',
  Sup: '⋑',
  Superset: '⊃',
  SupersetEqual: '⊇',
  Supset: '⋑',
  THORN: 'Þ',
  TRADE: '™',
  TSHcy: 'Ћ',
  TScy: 'Ц',
  Tab: '\t',
  Tau: 'Τ',
  Tcaron: 'Ť',
  Tcedil: 'Ţ',
  Tcy: 'Т',
  Tfr: '𝔗',
  Therefore: '∴',
  Theta: 'Θ',
  ThickSpace: '  ',
  ThinSpace: ' ',
  Tilde: '∼',
  TildeEqual: '≃',
  TildeFullEqual: '≅',
  TildeTilde: '≈',
  Topf: '𝕋',
  TripleDot: '⃛',
  Tscr: '𝒯',
  Tstrok: 'Ŧ',
  Uacute: 'Ú',
  Uarr: '↟',
  Uarrocir: '⥉',
  Ubrcy: 'Ў',
  Ubreve: 'Ŭ',
  Ucirc: 'Û',
  Ucy: 'У',
  Udblac: 'Ű',
  Ufr: '𝔘',
  Ugrave: 'Ù',
  Umacr: 'Ū',
  UnderBar: '_',
  UnderBrace: '⏟',
  UnderBracket: '⎵',
  UnderParenthesis: '⏝',
  Union: '⋃',
  UnionPlus: '⊎',
  Uogon: 'Ų',
  Uopf: '𝕌',
  UpArrow: '↑',
  UpArrowBar: '⤒',
  UpArrowDownArrow: '⇅',
  UpDownArrow: '↕',
  UpEquilibrium: '⥮',
  UpTee: '⊥',
  UpTeeArrow: '↥',
  Uparrow: '⇑',
  Updownarrow: '⇕',
  UpperLeftArrow: '↖',
  UpperRightArrow: '↗',
  Upsi: 'ϒ',
  Upsilon: 'Υ',
  Uring: 'Ů',
  Uscr: '𝒰',
  Utilde: 'Ũ',
  Uuml: 'Ü',
  VDash: '⊫',
  Vbar: '⫫',
  Vcy: 'В',
  Vdash: '⊩',
  Vdashl: '⫦',
  Vee: '⋁',
  Verbar: '‖',
  Vert: '‖',
  VerticalBar: '∣',
  VerticalLine: '|',
  VerticalSeparator: '❘',
  VerticalTilde: '≀',
  VeryThinSpace: ' ',
  Vfr: '𝔙',
  Vopf: '𝕍',
  Vscr: '𝒱',
  Vvdash: '⊪',
  Wcirc: 'Ŵ',
  Wedge: '⋀',
  Wfr: '𝔚',
  Wopf: '𝕎',
  Wscr: '𝒲',
  Xfr: '𝔛',
  Xi: 'Ξ',
  Xopf: '𝕏',
  Xscr: '𝒳',
  YAcy: 'Я',
  YIcy: 'Ї',
  YUcy: 'Ю',
  Yacute: 'Ý',
  Ycirc: 'Ŷ',
  Ycy: 'Ы',
  Yfr: '𝔜',
  Yopf: '𝕐',
  Yscr: '𝒴',
  Yuml: 'Ÿ',
  ZHcy: 'Ж',
  Zacute: 'Ź',
  Zcaron: 'Ž',
  Zcy: 'З',
  Zdot: 'Ż',
  ZeroWidthSpace: '​',

--- FILE: ./node_modules/character-entities/package.json ---
{
  "name": "character-entities",
  "version": "2.0.2",
  "description": "Map of named character references",
  "license": "MIT",
  "keywords": [
    "html",
    "entity",
    "entities",
    "character",
    "reference",
    "name",
    "replacement"
  ],
  "repository": "wooorm/character-entities",
  "bugs": "https://github.com/wooorm/character-entities/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "bail": "^2.0.0",
    "c8": "^7.0.0",
    "concat-stream": "^2.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.50.0"
  },
  "scripts": {
    "generate": "node build",
    "prepublishOnly": "npm run build && npm run format",
    "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run generate && npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true,
    "ignoreCatch": true
  }
}

--- FILE: ./node_modules/character-reference-invalid/index.d.ts ---
/**
 * Map of invalid numeric character references to their replacements, according to HTML.
 *
 * @type {Record<number, string>}
 */
export const characterReferenceInvalid: Record<number, string>

--- FILE: ./node_modules/character-reference-invalid/index.js ---
/**
 * Map of invalid numeric character references to their replacements, according to HTML.
 *
 * @type {Record<number, string>}
 */
export const characterReferenceInvalid = {
  0: '�',
  128: '€',
  130: '‚',
  131: 'ƒ',
  132: '„',
  133: '…',
  134: '†',
  135: '‡',
  136: 'ˆ',
  137: '‰',
  138: 'Š',
  139: '‹',
  140: 'Œ',
  142: 'Ž',
  145: '‘',
  146: '’',
  147: '“',
  148: '”',
  149: '•',
  150: '–',
  151: '—',
  152: '˜',
  153: '™',
  154: 'š',
  155: '›',
  156: 'œ',
  158: 'ž',
  159: 'Ÿ'
}

--- FILE: ./node_modules/character-reference-invalid/package.json ---
{
  "name": "character-reference-invalid",
  "version": "2.0.1",
  "description": "Map of invalid numeric character references to their replacements, according to HTML",
  "license": "MIT",
  "keywords": [
    "html",
    "entity",
    "numeric",
    "character",
    "reference",
    "replacement",
    "invalid",
    "name"
  ],
  "repository": "wooorm/character-reference-invalid",
  "bugs": "https://github.com/wooorm/character-reference-invalid/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/tape": "^4.0.0",
    "bail": "^2.0.0",
    "c8": "^7.0.0",
    "concat-stream": "^2.0.0",
    "hast-util-select": "^5.0.0",
    "hast-util-to-string": "^2.0.0",
    "prettier": "^2.0.0",
    "rehype-parse": "^8.0.0",
    "remark-cli": "^10.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "rimraf": "^3.0.0",
    "tape": "^5.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "unified": "^10.0.0",
    "xo": "^0.45.0"
  },
  "scripts": {
    "prepublishOnly": "npm run build && npm run format",
    "generate": "node build",
    "build": "rimraf \"*.d.ts\" && tsc && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api",
    "test": "npm run generate && npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true,
    "ignoreCatch": true
  }
}

--- FILE: ./node_modules/chokidar/index.js ---
'use strict';

const { EventEmitter } = require('events');
const fs = require('fs');
const sysPath = require('path');
const { promisify } = require('util');
const readdirp = require('readdirp');
const anymatch = require('anymatch').default;
const globParent = require('glob-parent');
const isGlob = require('is-glob');
const braces = require('braces');
const normalizePath = require('normalize-path');

const NodeFsHandler = require('./lib/nodefs-handler');
const FsEventsHandler = require('./lib/fsevents-handler');
const {
  EV_ALL,
  EV_READY,
  EV_ADD,
  EV_CHANGE,
  EV_UNLINK,
  EV_ADD_DIR,
  EV_UNLINK_DIR,
  EV_RAW,
  EV_ERROR,

  STR_CLOSE,
  STR_END,

  BACK_SLASH_RE,
  DOUBLE_SLASH_RE,
  SLASH_OR_BACK_SLASH_RE,
  DOT_RE,
  REPLACER_RE,

  SLASH,
  SLASH_SLASH,
  BRACE_START,
  BANG,
  ONE_DOT,
  TWO_DOTS,
  GLOBSTAR,
  SLASH_GLOBSTAR,
  ANYMATCH_OPTS,
  STRING_TYPE,
  FUNCTION_TYPE,
  EMPTY_STR,
  EMPTY_FN,

  isWindows,
  isMacos,
  isIBMi
} = require('./lib/constants');

const stat = promisify(fs.stat);
const readdir = promisify(fs.readdir);

/**
 * @typedef {String} Path
 * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName
 * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType
 */

/**
 *
 * @typedef {Object} WatchHelpers
 * @property {Boolean} followSymlinks
 * @property {'stat'|'lstat'} statMethod
 * @property {Path} path
 * @property {Path} watchPath
 * @property {Function} entryPath
 * @property {Boolean} hasGlob
 * @property {Object} globFilter
 * @property {Function} filterPath
 * @property {Function} filterDir
 */

const arrify = (value = []) => Array.isArray(value) ? value : [value];
const flatten = (list, result = []) => {
  list.forEach(item => {
    if (Array.isArray(item)) {
      flatten(item, result);
    } else {
      result.push(item);
    }
  });
  return result;
};

const unifyPaths = (paths_) => {
  /**
   * @type {Array<String>}
   */
  const paths = flatten(arrify(paths_));
  if (!paths.every(p => typeof p === STRING_TYPE)) {
    throw new TypeError(`Non-string provided as watch path: ${paths}`);
  }
  return paths.map(normalizePathToUnix);
};

// If SLASH_SLASH occurs at the beginning of path, it is not replaced
//     because "//StoragePC/DrivePool/Movies" is a valid network path
const toUnix = (string) => {
  let str = string.replace(BACK_SLASH_RE, SLASH);
  let prepend = false;
  if (str.startsWith(SLASH_SLASH)) {
    prepend = true;
  }
  while (str.match(DOUBLE_SLASH_RE)) {
    str = str.replace(DOUBLE_SLASH_RE, SLASH);
  }
  if (prepend) {
    str = SLASH + str;
  }
  return str;
};

// Our version of upath.normalize
// TODO: this is not equal to path-normalize module - investigate why
const normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));

const normalizeIgnored = (cwd = EMPTY_STR) => (path) => {
  if (typeof path !== STRING_TYPE) return path;
  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));
};

const getAbsolutePath = (path, cwd) => {
  if (sysPath.isAbsolute(path)) {
    return path;
  }
  if (path.startsWith(BANG)) {
    return BANG + sysPath.join(cwd, path.slice(1));
  }
  return sysPath.join(cwd, path);
};

const undef = (opts, key) => opts[key] === undefined;

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */
class DirEntry {
  /**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */
  constructor(dir, removeWatcher) {
    this.path = dir;
    this._removeWatcher = removeWatcher;
    /** @type {Set<Path>} */
    this.items = new Set();
  }

  add(item) {
    const {items} = this;
    if (!items) return;
    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);
  }

  async remove(item) {
    const {items} = this;
    if (!items) return;
    items.delete(item);
    if (items.size > 0) return;

    const dir = this.path;
    try {
      await readdir(dir);
    } catch (err) {
      if (this._removeWatcher) {
        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));
      }
    }
  }

  has(item) {
    const {items} = this;
    if (!items) return;
    return items.has(item);
  }

  /**
   * @returns {Array<String>}
   */
  getChildren() {
    const {items} = this;
    if (!items) return;
    return [...items.values()];
  }

  dispose() {
    this.items.clear();
    delete this.path;
    delete this._removeWatcher;
    delete this.items;
    Object.freeze(this);
  }
}

const STAT_METHOD_F = 'stat';
const STAT_METHOD_L = 'lstat';
class WatchHelper {
  constructor(path, watchPath, follow, fsw) {
    this.fsw = fsw;
    this.path = path = path.replace(REPLACER_RE, EMPTY_STR);
    this.watchPath = watchPath;
    this.fullWatchPath = sysPath.resolve(watchPath);
    this.hasGlob = watchPath !== path;
    /** @type {object|boolean} */
    if (path === EMPTY_STR) this.hasGlob = false;
    this.globSymlink = this.hasGlob && follow ? undefined : false;
    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;
    this.dirParts = this.getDirParts(path);
    this.dirParts.forEach((parts) => {
      if (parts.length > 1) parts.pop();
    });
    this.followSymlinks = follow;
    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;
  }

  checkGlobSymlink(entry) {
    // only need to resolve once
    // first entry should always have entry.parentDir === EMPTY_STR
    if (this.globSymlink === undefined) {
      this.globSymlink = entry.fullParentDir === this.fullWatchPath ?
        false : {realPath: entry.fullParentDir, linkPath: this.fullWatchPath};
    }

    if (this.globSymlink) {
      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);
    }

    return entry.fullPath;
  }

  entryPath(entry) {
    return sysPath.join(this.watchPath,
      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))
    );
  }

  filterPath(entry) {
    const {stats} = entry;
    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);
    const resolvedPath = this.entryPath(entry);
    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ?
      this.globFilter(resolvedPath) : true;
    return matchesGlob &&
      this.fsw._isntIgnored(resolvedPath, stats) &&
      this.fsw._hasReadPermissions(stats);
  }

  getDirParts(path) {
    if (!this.hasGlob) return [];
    const parts = [];
    const expandedPath = path.includes(BRACE_START) ? braces.expand(path) : [path];
    expandedPath.forEach((path) => {
      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH_RE));
    });
    return parts;
  }

  filterDir(entry) {
    if (this.hasGlob) {
      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));
      let globstar = false;
      this.unmatchedGlob = !this.dirParts.some((parts) => {
        return parts.every((part, i) => {
          if (part === GLOBSTAR) globstar = true;
          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);
        });
      });
    }
    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
  }
}

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */
class FSWatcher extends EventEmitter {
// Not indenting methods for history sake; for now.
constructor(_opts) {
  super();

  const opts = {};
  if (_opts) Object.assign(opts, _opts); // for frozen objects

  /** @type {Map<String, DirEntry>} */
  this._watched = new Map();
  /** @type {Map<String, Array>} */
  this._closers = new Map();
  /** @type {Set<String>} */
  this._ignoredPaths = new Set();

  /** @type {Map<ThrottleType, Map>} */
  this._throttled = new Map();

  /** @type {Map<Path, String|Boolean>} */
  this._symlinkPaths = new Map();

  this._streams = new Set();
  this.closed = false;

  // Set up default options.
  if (undef(opts, 'persistent')) opts.persistent = true;
  if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;
  if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;
  if (undef(opts, 'interval')) opts.interval = 100;
  if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;
  if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;
  opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  // Enable fsevents on OS X when polling isn't explicitly enabled.
  if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;

  // If we can't use fsevents, ensure the options reflect it's disabled.
  const canUseFsEvents = FsEventsHandler.canUse();
  if (!canUseFsEvents) opts.useFsEvents = false;

  // Use polling on Mac if not using fsevents.
  // Other platforms use non-polling fs_watch.
  if (undef(opts, 'usePolling') && !opts.useFsEvents) {
    opts.usePolling = isMacos;
  }

  // Always default to polling on IBM i because fs.watch() is not available on IBM i.
  if(isIBMi) {
    opts.usePolling = true;
  }

  // Global override (useful for end-developers that need to force polling for all
  // instances of chokidar, regardless of usage/dependency depth)
  const envPoll = process.env.CHOKIDAR_USEPOLLING;
  if (envPoll !== undefined) {
    const envLower = envPoll.toLowerCase();

    if (envLower === 'false' || envLower === '0') {
      opts.usePolling = false;
    } else if (envLower === 'true' || envLower === '1') {
      opts.usePolling = true;
    } else {
      opts.usePolling = !!envLower;
    }
  }
  const envInterval = process.env.CHOKIDAR_INTERVAL;
  if (envInterval) {
    opts.interval = Number.parseInt(envInterval, 10);
  }

  // Editor atomic write normalization enabled by default with fs.watch
  if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;
  if (opts.atomic) this._pendingUnlinks = new Map();

  if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;

  if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;
  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
  const awf = opts.awaitWriteFinish;
  if (awf) {
    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;
    if (!awf.pollInterval) awf.pollInterval = 100;
    this._pendingWrites = new Map();
  }
  if (opts.ignored) opts.ignored = arrify(opts.ignored);

  let readyCalls = 0;
  this._emitReady = () => {
    readyCalls++;
    if (readyCalls >= this._readyCount) {
      this._emitReady = EMPTY_FN;
      this._readyEmitted = true;
      // use process.nextTick to allow time for listener to be bound
      process.nextTick(() => this.emit(EV_READY));
    }
  };
  this._emitRaw = (...args) => this.emit(EV_RAW, ...args);
  this._readyEmitted = false;
  this.options = opts;

  // Initialize with proper watcher.
  if (opts.useFsEvents) {
    this._fsEventsHandler = new FsEventsHandler(this);
  } else {
    this._nodeFsHandler = new NodeFsHandler(this);
  }

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

// Public methods

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */
add(paths_, _origAdd, _internal) {
  const {cwd, disableGlobbing} = this.options;
  this.closed = false;
  let paths = unifyPaths(paths_);
  if (cwd) {
    paths = paths.map((path) => {
      const absPath = getAbsolutePath(path, cwd);

      // Check `path` instead of `absPath` because the cwd portion can't be a glob
      if (disableGlobbing || !isGlob(path)) {
        return absPath;
      }
      return normalizePath(absPath);
    });
  }

  // set aside negated glob strings
  paths = paths.filter((path) => {
    if (path.startsWith(BANG)) {
      this._ignoredPaths.add(path.slice(1));
      return false;
    }

    // if a path is being added that was previously ignored, stop ignoring it
    this._ignoredPaths.delete(path);
    this._ignoredPaths.delete(path + SLASH_GLOBSTAR);

    // reset the cached userIgnored anymatch fn
    // to make ignoredPaths changes effective
    this._userIgnored = undefined;

    return true;
  });

  if (this.options.useFsEvents && this._fsEventsHandler) {
    if (!this._readyCount) this._readyCount = paths.length;
    if (this.options.persistent) this._readyCount += paths.length;
    paths.forEach((path) => this._fsEventsHandler._addToFsEvents(path));
  } else {
    if (!this._readyCount) this._readyCount = 0;
    this._readyCount += paths.length;
    Promise.all(
      paths.map(async path => {
        const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);
        if (res) this._emitReady();
        return res;
      })
    ).then(results => {
      if (this.closed) return;
      results.filter(item => item).forEach(item => {
        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
      });
    });
  }

  return this;
}

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/
unwatch(paths_) {
  if (this.closed) return this;
  const paths = unifyPaths(paths_);
  const {cwd} = this.options;

  paths.forEach((path) => {
    // convert to absolute path unless relative path already matches
    if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {
      if (cwd) path = sysPath.join(cwd, path);
      path = sysPath.resolve(path);
    }

    this._closePath(path);

    this._ignoredPaths.add(path);
    if (this._watched.has(path)) {
      this._ignoredPaths.add(path + SLASH_GLOBSTAR);
    }

    // reset the cached userIgnored anymatch fn
    // to make ignoredPaths changes effective
    this._userIgnored = undefined;
  });

  return this;
}

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {Promise<void>}.
*/
close() {
  if (this.closed) return this._closePromise;
  this.closed = true;

  // Memory management.
  this.removeAllListeners();
  const closers = [];
  this._closers.forEach(closerList => closerList.forEach(closer => {
    const promise = closer();
    if (promise instanceof Promise) closers.push(promise);
  }));
  this._streams.forEach(stream => stream.destroy());
  this._userIgnored = undefined;
  this._readyCount = 0;
  this._readyEmitted = false;
  this._watched.forEach(dirent => dirent.dispose());
  ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {
    this[`_${key}`].clear();
  });

  this._closePromise = closers.length ? Promise.all(closers).then(() => undefined) : Promise.resolve();
  return this._closePromise;
}

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/
getWatched() {
  const watchList = {};
  this._watched.forEach((entry, dir) => {
    const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
    watchList[key || ONE_DOT] = entry.getChildren().sort();
  });
  return watchList;
}

emitWithAll(event, args) {
  this.emit(...args);
  if (event !== EV_ERROR) this.emit(EV_ALL, ...args);
}

// Common helpers
// --------------

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */
async _emit(event, path, val1, val2, val3) {
  if (this.closed) return;

  const opts = this.options;
  if (isWindows) path = sysPath.normalize(path);
  if (opts.cwd) path = sysPath.relative(opts.cwd, path);
  /** @type Array<any> */
  const args = [event, path];
  if (val3 !== undefined) args.push(val1, val2, val3);
  else if (val2 !== undefined) args.push(val1, val2);
  else if (val1 !== undefined) args.push(val1);

  const awf = opts.awaitWriteFinish;
  let pw;
  if (awf && (pw = this._pendingWrites.get(path))) {
    pw.lastChange = new Date();
    return this;
  }

  if (opts.atomic) {
    if (event === EV_UNLINK) {
      this._pendingUnlinks.set(path, args);
      setTimeout(() => {
        this._pendingUnlinks.forEach((entry, path) => {
          this.emit(...entry);
          this.emit(EV_ALL, ...entry);
          this._pendingUnlinks.delete(path);
        });
      }, typeof opts.atomic === 'number' ? opts.atomic : 100);
      return this;
    }
    if (event === EV_ADD && this._pendingUnlinks.has(path)) {
      event = args[0] = EV_CHANGE;
      this._pendingUnlinks.delete(path);
    }
  }

  if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {
    const awfEmit = (err, stats) => {
      if (err) {
        event = args[0] = EV_ERROR;
        args[1] = err;
        this.emitWithAll(event, args);
      } else if (stats) {

--- FILE: ./node_modules/chokidar/package.json ---
{
  "name": "chokidar",
  "description": "Minimal and efficient cross-platform file watching library",
  "version": "3.6.0",
  "homepage": "https://github.com/paulmillr/chokidar",
  "author": "Paul Miller (https://paulmillr.com)",
  "contributors": [
    "Paul Miller (https://paulmillr.com)",
    "Elan Shanker"
  ],
  "engines": {
    "node": ">= 8.10.0"
  },
  "main": "index.js",
  "types": "./types/index.d.ts",
  "dependencies": {
    "anymatch": "~3.1.2",
    "braces": "~3.0.2",
    "glob-parent": "~5.1.2",
    "is-binary-path": "~2.1.0",
    "is-glob": "~4.0.1",
    "normalize-path": "~3.0.0",
    "readdirp": "~3.6.0"
  },
  "optionalDependencies": {
    "fsevents": "~2.3.2"
  },
  "devDependencies": {
    "@types/node": "^14",
    "chai": "^4.3",
    "dtslint": "^3.3.0",
    "eslint": "^7.0.0",
    "mocha": "^7.0.0",
    "rimraf": "^3.0.0",
    "sinon": "^9.0.1",
    "sinon-chai": "^3.3.0",
    "typescript": "^4.4.3",
    "upath": "^1.2.0"
  },
  "files": [
    "index.js",
    "lib/*.js",
    "types/index.d.ts"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paulmillr/chokidar.git"
  },
  "bugs": {
    "url": "https://github.com/paulmillr/chokidar/issues"
  },
  "license": "MIT",
  "scripts": {
    "dtslint": "dtslint types",
    "lint": "eslint --report-unused-disable-directives --ignore-path .gitignore .",
    "build": "npm ls",
    "mocha": "mocha --exit --timeout 90000",
    "test": "npm run lint && npm run mocha"
  },
  "keywords": [
    "fs",
    "watch",
    "watchFile",
    "watcher",
    "watching",
    "file",
    "fsevents"
  ],
  "funding": "https://paulmillr.com/funding/"
}

--- FILE: ./node_modules/chownr/package.json ---
{
  "author": "Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)",
  "name": "chownr",
  "description": "like `chown -R`",
  "version": "3.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/chownr.git"
  },
  "files": [
    "dist"
  ],
  "devDependencies": {
    "@types/node": "^20.12.5",
    "mkdirp": "^3.0.1",
    "prettier": "^3.2.5",
    "rimraf": "^5.0.5",
    "tap": "^18.7.2",
    "tshy": "^1.13.1",
    "typedoc": "^0.25.12"
  },
  "scripts": {
    "prepare": "tshy",
    "pretest": "npm run prepare",
    "test": "tap",
    "preversion": "npm test",
    "postversion": "npm publish",
    "prepublishOnly": "git push origin --follow-tags",
    "format": "prettier --write . --loglevel warn",
    "typedoc": "typedoc --tsconfig .tshy/esm.json ./src/*.ts"
  },
  "license": "BlueOak-1.0.0",
  "engines": {
    "node": ">=18"
  },
  "tshy": {
    "exports": {
      "./package.json": "./package.json",
      ".": "./src/index.ts"
    }
  },
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "import": {
        "types": "./dist/esm/index.d.ts",
        "default": "./dist/esm/index.js"
      },
      "require": {
        "types": "./dist/commonjs/index.d.ts",
        "default": "./dist/commonjs/index.js"
      }
    }
  },
  "main": "./dist/commonjs/index.js",
  "types": "./dist/commonjs/index.d.ts",
  "type": "module",
  "prettier": {
    "semi": false,
    "printWidth": 75,
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "jsxSingleQuote": false,
    "bracketSameLine": true,
    "arrowParens": "avoid",
    "endOfLine": "lf"
  }
}

--- FILE: ./node_modules/cliui/package.json ---
{
  "name": "cliui",
  "version": "8.0.1",
  "description": "easily create complex multi-column command-line-interfaces",
  "main": "build/index.cjs",
  "exports": {
    ".": [
      {
        "import": "./index.mjs",
        "require": "./build/index.cjs"
      },
      "./build/index.cjs"
    ]
  },
  "type": "module",
  "module": "./index.mjs",
  "scripts": {
    "check": "standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'",
    "fix": "standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'",
    "pretest": "rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs",
    "test": "c8 mocha ./test/*.cjs",
    "test:esm": "c8 mocha ./test/esm/cliui-test.mjs",
    "postest": "check",
    "coverage": "c8 report --check-coverage",
    "precompile": "rimraf build",
    "compile": "tsc",
    "postcompile": "npm run build:cjs",
    "build:cjs": "rollup -c",
    "prepare": "npm run compile"
  },
  "repository": "yargs/cliui",
  "standard": {
    "ignore": [
      "**/example/**"
    ],
    "globals": [
      "it"
    ]
  },
  "keywords": [
    "cli",
    "command-line",
    "layout",
    "design",
    "console",
    "wrap",
    "table"
  ],
  "author": "Ben Coe <ben@npmjs.com>",
  "license": "ISC",
  "dependencies": {
    "string-width": "^4.2.0",
    "strip-ansi": "^6.0.1",
    "wrap-ansi": "^7.0.0"
  },
  "devDependencies": {
    "@types/node": "^14.0.27",
    "@typescript-eslint/eslint-plugin": "^4.0.0",
    "@typescript-eslint/parser": "^4.0.0",
    "c8": "^7.3.0",
    "chai": "^4.2.0",
    "chalk": "^4.1.0",
    "cross-env": "^7.0.2",
    "eslint": "^7.6.0",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-node": "^11.1.0",
    "gts": "^3.0.0",
    "mocha": "^10.0.0",
    "rimraf": "^3.0.2",
    "rollup": "^2.23.1",
    "rollup-plugin-ts": "^3.0.2",
    "standardx": "^7.0.0",
    "typescript": "^4.0.0"
  },
  "files": [
    "build",
    "index.mjs",
    "!*.d.ts"
  ],
  "engines": {
    "node": ">=12"
  }
}

--- FILE: ./node_modules/clsx/clsx.d.ts ---
declare namespace clsx {
	type ClassValue = ClassArray | ClassDictionary | string | number | bigint | null | boolean | undefined;
	type ClassDictionary = Record<string, any>;
	type ClassArray = ClassValue[];
	function clsx(...inputs: ClassValue[]): string;
}

declare function clsx(...inputs: clsx.ClassValue[]): string;

export = clsx;

--- FILE: ./node_modules/clsx/package.json ---
{
  "name": "clsx",
  "version": "2.1.1",
  "repository": "lukeed/clsx",
  "description": "A tiny (239B) utility for constructing className strings conditionally.",
  "module": "dist/clsx.mjs",
  "unpkg": "dist/clsx.min.js",
  "main": "dist/clsx.js",
  "types": "clsx.d.ts",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./clsx.d.mts",
        "default": "./dist/clsx.mjs"
      },
      "default": {
        "types": "./clsx.d.ts",
        "default": "./dist/clsx.js"
      }
    },
    "./lite": {
      "import": {
        "types": "./clsx.d.mts",
        "default": "./dist/lite.mjs"
      },
      "default": {
        "types": "./clsx.d.ts",
        "default": "./dist/lite.js"
      }
    }
  },
  "author": {
    "name": "Luke Edwards",
    "email": "luke.edwards05@gmail.com",
    "url": "https://lukeed.com"
  },
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "build": "node bin",
    "test": "uvu -r esm test"
  },
  "files": [
    "*.d.mts",
    "*.d.ts",
    "dist"
  ],
  "keywords": [
    "classes",
    "classname",
    "classnames"
  ],
  "devDependencies": {
    "esm": "3.2.25",
    "terser": "4.8.0",
    "uvu": "0.5.4"
  }
}

--- FILE: ./node_modules/color-convert/conversions.js ---
/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = require('color-name');

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

--- FILE: ./node_modules/color-convert/index.js ---
const conversions = require('./conversions');
const route = require('./route');

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;

--- FILE: ./node_modules/color-convert/package.json ---
{
  "name": "color-convert",
  "description": "Plain color conversion functions",
  "version": "2.0.1",
  "author": "Heather Arthur <fayearthur@gmail.com>",
  "license": "MIT",
  "repository": "Qix-/color-convert",
  "scripts": {
    "pretest": "xo",
    "test": "node test/basic.js"
  },
  "engines": {
    "node": ">=7.0.0"
  },
  "keywords": [
    "color",
    "colour",
    "convert",
    "converter",
    "conversion",
    "rgb",
    "hsl",
    "hsv",
    "hwb",
    "cmyk",
    "ansi",
    "ansi16"
  ],
  "files": [
    "index.js",
    "conversions.js",
    "route.js"
  ],
  "xo": {
    "rules": {
      "default-case": 0,
      "no-inline-comments": 0,
      "operator-linebreak": 0
    }
  },
  "devDependencies": {
    "chalk": "^2.4.2",
    "xo": "^0.24.0"
  },
  "dependencies": {
    "color-name": "~1.1.4"
  }
}

--- FILE: ./node_modules/color-convert/route.js ---
const conversions = require('./conversions');

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};


--- FILE: ./node_modules/color-name/index.js ---
'use strict'

module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

--- FILE: ./node_modules/color-name/package.json ---
{
  "name": "color-name",
  "version": "1.1.4",
  "description": "A list of color names and its values",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:colorjs/color-name.git"
  },
  "keywords": [
    "color-name",
    "color",
    "color-keyword",
    "keyword"
  ],
  "author": "DY <dfcreative@gmail.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/colorjs/color-name/issues"
  },
  "homepage": "https://github.com/colorjs/color-name"
}

--- FILE: ./node_modules/colorette/index.cjs ---
const tty = require("tty")

const env = process.env

const isDisabled = "NO_COLOR" in env
const isForced = "FORCE_COLOR" in env
const isWindows = process.platform === "win32"

const isCompatibleTerminal =
  tty && tty.isatty(1) && env.TERM && env.TERM !== "dumb"

const isCI =
  "CI" in env &&
  ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env)

let enabled =
  !isDisabled && (isForced || isWindows || isCompatibleTerminal || isCI)

const raw = (open, close, searchRegex, replaceValue) => (s) =>
  enabled
    ? open +
      (~(s += "").indexOf(close, 4) // skip opening \x1b[
        ? s.replace(searchRegex, replaceValue)
        : s) +
      close
    : s

const init = (open, close) => {
  return raw(
    `\x1b[${open}m`,
    `\x1b[${close}m`,
    new RegExp(`\\x1b\\[${close}m`, "g"),
    `\x1b[${open}m`
  )
}

exports.options = Object.defineProperty({}, "enabled", {
  get: () => enabled,
  set: (value) => (enabled = value),
})

exports.reset = init(0, 0)
exports.bold = raw("\x1b[1m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[1m")
exports.dim = raw("\x1b[2m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[2m")
exports.italic = init(3, 23)
exports.underline = init(4, 24)
exports.inverse = init(7, 27)
exports.hidden = init(8, 28)
exports.strikethrough = init(9, 29)
exports.black = init(30, 39)
exports.red = init(31, 39)
exports.green = init(32, 39)
exports.yellow = init(33, 39)
exports.blue = init(34, 39)
exports.magenta = init(35, 39)
exports.cyan = init(36, 39)
exports.white = init(37, 39)
exports.gray = init(90, 39)
exports.bgBlack = init(40, 49)
exports.bgRed = init(41, 49)
exports.bgGreen = init(42, 49)
exports.bgYellow = init(43, 49)
exports.bgBlue = init(44, 49)
exports.bgMagenta = init(45, 49)
exports.bgCyan = init(46, 49)
exports.bgWhite = init(47, 49)
exports.blackBright = init(90, 39)
exports.redBright = init(91, 39)
exports.greenBright = init(92, 39)
exports.yellowBright = init(93, 39)
exports.blueBright = init(94, 39)
exports.magentaBright = init(95, 39)
exports.cyanBright = init(96, 39)
exports.whiteBright = init(97, 39)
exports.bgBlackBright = init(100, 49)
exports.bgRedBright = init(101, 49)
exports.bgGreenBright = init(102, 49)
exports.bgYellowBright = init(103, 49)
exports.bgBlueBright = init(104, 49)
exports.bgMagentaBright = init(105, 49)
exports.bgCyanBright = init(106, 49)
exports.bgWhiteBright = init(107, 49)

--- FILE: ./node_modules/colorette/index.d.ts ---
interface Style {
  (string: string): string
}

export const options: {
  enabled: boolean
}

export const reset: Style
export const bold: Style
export const dim: Style
export const italic: Style
export const underline: Style
export const inverse: Style
export const hidden: Style
export const strikethrough: Style
export const black: Style
export const red: Style
export const green: Style
export const yellow: Style
export const blue: Style
export const magenta: Style
export const cyan: Style
export const white: Style
export const gray: Style
export const bgBlack: Style
export const bgRed: Style
export const bgGreen: Style
export const bgYellow: Style
export const bgBlue: Style
export const bgMagenta: Style
export const bgCyan: Style
export const bgWhite: Style
export const blackBright: Style
export const redBright: Style
export const greenBright: Style
export const yellowBright: Style
export const blueBright: Style
export const magentaBright: Style
export const cyanBright: Style
export const whiteBright: Style
export const bgBlackBright: Style
export const bgRedBright: Style
export const bgGreenBright: Style
export const bgYellowBright: Style
export const bgBlueBright: Style
export const bgMagentaBright: Style
export const bgCyanBright: Style
export const bgWhiteBright: Style

--- FILE: ./node_modules/colorette/index.js ---
import * as tty from "tty"

const env = process.env

const isDisabled = "NO_COLOR" in env
const isForced = "FORCE_COLOR" in env
const isWindows = process.platform === "win32"

const isCompatibleTerminal =
  tty && tty.isatty(1) && env.TERM && env.TERM !== "dumb"

const isCI =
  "CI" in env &&
  ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env)

let enabled =
  !isDisabled && (isForced || isWindows || isCompatibleTerminal || isCI)

const raw = (open, close, searchRegex, replaceValue) => (s) =>
  enabled
    ? open +
      (~(s += "").indexOf(close, 4) // skip opening \x1b[
        ? s.replace(searchRegex, replaceValue)
        : s) +
      close
    : s

const init = (open, close) => {
  return raw(
    `\x1b[${open}m`,
    `\x1b[${close}m`,
    new RegExp(`\\x1b\\[${close}m`, "g"),
    `\x1b[${open}m`
  )
}

export const options = Object.defineProperty({}, "enabled", {
  get: () => enabled,
  set: (value) => (enabled = value),
})

export const reset = init(0, 0)
export const bold = raw("\x1b[1m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[1m")
export const dim = raw("\x1b[2m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[2m")
export const italic = init(3, 23)
export const underline = init(4, 24)
export const inverse = init(7, 27)
export const hidden = init(8, 28)
export const strikethrough = init(9, 29)
export const black = init(30, 39)
export const red = init(31, 39)
export const green = init(32, 39)
export const yellow = init(33, 39)
export const blue = init(34, 39)
export const magenta = init(35, 39)
export const cyan = init(36, 39)
export const white = init(37, 39)
export const gray = init(90, 39)
export const bgBlack = init(40, 49)
export const bgRed = init(41, 49)
export const bgGreen = init(42, 49)
export const bgYellow = init(43, 49)
export const bgBlue = init(44, 49)
export const bgMagenta = init(45, 49)
export const bgCyan = init(46, 49)
export const bgWhite = init(47, 49)
export const blackBright = init(90, 39)
export const redBright = init(91, 39)
export const greenBright = init(92, 39)
export const yellowBright = init(93, 39)
export const blueBright = init(94, 39)
export const magentaBright = init(95, 39)
export const cyanBright = init(96, 39)
export const whiteBright = init(97, 39)
export const bgBlackBright = init(100, 49)
export const bgRedBright = init(101, 49)
export const bgGreenBright = init(102, 49)
export const bgYellowBright = init(103, 49)
export const bgBlueBright = init(104, 49)
export const bgMagentaBright = init(105, 49)
export const bgCyanBright = init(106, 49)
export const bgWhiteBright = init(107, 49)

--- FILE: ./node_modules/colorette/package.json ---
{
  "name": "colorette",
  "version": "1.4.0",
  "type": "module",
  "main": "index.cjs",
  "module": "index.js",
  "types": "index.d.ts",
  "description": "Easily set the text color and style in the terminal.",
  "repository": "jorgebucaran/colorette",
  "license": "MIT",
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "require": "./index.cjs",
      "import": "./index.js"
    }
  },
  "files": [
    "*.*(c)[tj]s*"
  ],
  "author": "Jorge Bucaran",
  "keywords": [
    "terminal",
    "styles",
    "color",
    "ansi"
  ],
  "scripts": {
    "test": "c8 twist tests/*.js",
    "build": "node -e \"fs.writeFileSync('index.cjs', fs.readFileSync('index.js', 'utf8').replace(/export const /g, 'exports.').replace(/import \\* as ([^ ]+) from \\\"(.+)\\\"/, 'const \\$1 = require(\\\"\\$2\\\")'), 'utf8')\"",
    "deploy": "npm test && git commit --all --message $tag && git tag --sign $tag --message $tag && git push && git push --tags",
    "release": "tag=$npm_package_version npm run deploy && npm publish --access public",
    "prepare": "npm run build"
  },
  "devDependencies": {
    "c8": "*",
    "twist": "*"
  }
}

--- FILE: ./node_modules/comma-separated-tokens/index.d.ts ---
/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */
/**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */
/**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
export function parse(value: string): Array<string>
/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */
export function stringify(
  values: Array<string | number>,
  options?: Options | undefined
): string
/**
 * Configuration for `stringify`.
 */
export type Options = {
  /**
   * Whether to pad a space before a token.
   */
  padLeft?: boolean | undefined
  /**
   * Whether to pad a space after a token.
   */
  padRight?: boolean | undefined
}
/**
 * Please use `StringifyOptions` instead.
 */
export type StringifyOptions = Options

--- FILE: ./node_modules/comma-separated-tokens/index.js ---
/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */

/**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */

/**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
export function parse(value) {
  /** @type {Array<string>} */
  const tokens = []
  const input = String(value || '')
  let index = input.indexOf(',')
  let start = 0
  /** @type {boolean} */
  let end = false

  while (!end) {
    if (index === -1) {
      index = input.length
      end = true
    }

    const token = input.slice(start, index).trim()

    if (token || !end) {
      tokens.push(token)
    }

    start = index + 1
    index = input.indexOf(',', start)
  }

  return tokens
}

/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */
export function stringify(values, options) {
  const settings = options || {}

  // Ensure the last empty entry is seen.
  const input = values[values.length - 1] === '' ? [...values, ''] : values

  return input
    .join(
      (settings.padRight ? ' ' : '') +
        ',' +
        (settings.padLeft === false ? '' : ' ')
    )
    .trim()
}

--- FILE: ./node_modules/comma-separated-tokens/package.json ---
{
  "name": "comma-separated-tokens",
  "version": "2.0.3",
  "description": "Parse and stringify comma-separated tokens",
  "license": "MIT",
  "keywords": [
    "dom",
    "html",
    "comma",
    "separated",
    "tokens",
    "parse",
    "stringify"
  ],
  "repository": "wooorm/comma-separated-tokens",
  "bugs": "https://github.com/wooorm/comma-separated-tokens/issues",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/wooorm"
  },
  "author": "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)",
  "contributors": [
    "Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)"
  ],
  "sideEffects": false,
  "type": "module",
  "main": "index.js",
  "types": "index.d.ts",
  "files": [
    "index.d.ts",
    "index.js"
  ],
  "devDependencies": {
    "@types/node": "^18.0.0",
    "c8": "^7.0.0",
    "prettier": "^2.0.0",
    "remark-cli": "^11.0.0",
    "remark-preset-wooorm": "^9.0.0",
    "type-coverage": "^2.0.0",
    "typescript": "^4.0.0",
    "xo": "^0.52.0"
  },
  "scripts": {
    "prepack": "npm run build && npm run format",
    "build": "tsc --build --clean && tsc --build && type-coverage",
    "format": "remark . -qfo && prettier . -w --loglevel warn && xo --fix",
    "test-api": "node --conditions development test.js",
    "test-coverage": "c8 --check-coverage --100 --reporter lcov npm run test-api",
    "test": "npm run build && npm run format && npm run test-coverage"
  },
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "xo": {
    "prettier": true
  },
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "typeCoverage": {
    "atLeast": 100,
    "detail": true,
    "strict": true
  }
}

--- FILE: ./node_modules/commander/index.js ---
const { Argument } = require('./lib/argument.js');
const { Command } = require('./lib/command.js');
const { CommanderError, InvalidArgumentError } = require('./lib/error.js');
const { Help } = require('./lib/help.js');
const { Option } = require('./lib/option.js');

exports.program = new Command();

exports.createCommand = (name) => new Command(name);
exports.createOption = (flags, description) => new Option(flags, description);
exports.createArgument = (name, description) => new Argument(name, description);

/**
 * Expose classes
 */

exports.Command = Command;
exports.Option = Option;
exports.Argument = Argument;
exports.Help = Help;

exports.CommanderError = CommanderError;
exports.InvalidArgumentError = InvalidArgumentError;
exports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated

--- FILE: ./node_modules/commander/package-support.json ---
{
  "versions": [
    {
      "version": "*",
      "target": {
        "node": "supported"
      },
      "response": {
        "type": "time-permitting"
      },
      "backing": {
        "npm-funding": true
      }
    }
  ]
}

--- FILE: ./node_modules/commander/package.json ---
{
  "name": "commander",
  "version": "12.1.0",
  "description": "the complete solution for node.js command-line programs",
  "keywords": [
    "commander",
    "command",
    "option",
    "parser",
    "cli",
    "argument",
    "args",
    "argv"
  ],
  "author": "TJ Holowaychuk <tj@vision-media.ca>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tj/commander.js.git"
  },
  "scripts": {
    "check": "npm run check:type && npm run check:lint && npm run check:format",
    "check:format": "prettier --check .",
    "check:lint": "eslint .",
    "check:type": "npm run check:type:js && npm run check:type:ts",
    "check:type:ts": "tsd && tsc -p tsconfig.ts.json",
    "check:type:js": "tsc -p tsconfig.js.json",
    "fix": "npm run fix:lint && npm run fix:format",
    "fix:format": "prettier --write .",
    "fix:lint": "eslint --fix .",
    "test": "jest && npm run check:type:ts",
    "test-all": "jest && npm run test-esm && npm run check",
    "test-esm": "node ./tests/esm-imports-test.mjs"
  },
  "files": [
    "index.js",
    "lib/*.js",
    "esm.mjs",
    "typings/index.d.ts",
    "typings/esm.d.mts",
    "package-support.json"
  ],
  "type": "commonjs",
  "main": "./index.js",
  "exports": {
    ".": {
      "require": {
        "types": "./typings/index.d.ts",
        "default": "./index.js"
      },
      "import": {
        "types": "./typings/esm.d.mts",
        "default": "./esm.mjs"
      },
      "default": "./index.js"
    },
    "./esm.mjs": {
      "types": "./typings/esm.d.mts",
      "import": "./esm.mjs"
    }
  },
  "devDependencies": {
    "@eslint/js": "^8.56.0",
    "@types/jest": "^29.2.4",
    "@types/node": "^20.2.5",
    "eslint": "^8.30.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-jest": "^28.3.0",
    "eslint-plugin-jsdoc": "^48.1.0",
    "globals": "^13.24.0",
    "jest": "^29.3.1",
    "prettier": "^3.2.5",
    "prettier-plugin-jsdoc": "^1.3.0",
    "ts-jest": "^29.0.3",
    "tsd": "^0.31.0",
    "typescript": "^5.0.4",
    "typescript-eslint": "^7.0.1"
  },
  "types": "typings/index.d.ts",
  "engines": {
    "node": ">=18"
  },
  "support": true
}

--- FILE: ./node_modules/concat-map/index.js ---
module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

--- FILE: ./node_modules/concat-map/package.json ---
{
    "name" : "concat-map",
    "description" : "concatenative mapdashery",
    "version" : "0.0.1",
    "repository" : {
        "type" : "git",
        "url" : "git://github.com/substack/node-concat-map.git"
    },
    "main" : "index.js",
    "keywords" : [
        "concat",
        "concatMap",
        "map",
        "functional",
        "higher-order"
    ],
    "directories" : {
        "example" : "example",
        "test" : "test"
    },
    "scripts" : {
        "test" : "tape test/*.js"
    },
    "devDependencies" : {
        "tape" : "~2.4.0"
    },
    "license" : "MIT",
    "author" : {
        "name" : "James Halliday",
        "email" : "mail@substack.net",
        "url" : "http://substack.net"
    },
    "testling" : {
        "files" : "test/*.js",
        "browsers" : {
            "ie" : [ 6, 7, 8, 9 ],
            "ff" : [ 3.5, 10, 15.0 ],
            "chrome" : [ 10, 22 ],
            "safari" : [ 5.1 ],
            "opera" : [ 12 ]
        }
    }
}

--- FILE: ./node_modules/convert-source-map/index.js ---
'use strict';

Object.defineProperty(exports, 'commentRegex', {
  get: function getCommentRegex () {
    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.
    return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
  }
});


Object.defineProperty(exports, 'mapFileCommentRegex', {
  get: function getMapFileCommentRegex () {
    // Matches sourceMappingURL in either // or /* comment styles.
    return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
  }
});

var decodeBase64;
if (typeof Buffer !== 'undefined') {
  if (typeof Buffer.from === 'function') {
    decodeBase64 = decodeBase64WithBufferFrom;
  } else {
    decodeBase64 = decodeBase64WithNewBuffer;
  }
} else {
  decodeBase64 = decodeBase64WithAtob;
}

function decodeBase64WithBufferFrom(base64) {
  return Buffer.from(base64, 'base64').toString();
}

function decodeBase64WithNewBuffer(base64) {
  if (typeof value === 'number') {
    throw new TypeError('The value to decode must not be of type number.');
  }
  return new Buffer(base64, 'base64').toString();
}

function decodeBase64WithAtob(base64) {
  return decodeURIComponent(escape(atob(base64)));
}

function stripComment(sm) {
  return sm.split(',').pop();
}

function readFromFileMap(sm, read) {
  var r = exports.mapFileCommentRegex.exec(sm);
  // for some odd reason //# .. captures in 1 and /* .. */ in 2
  var filename = r[1] || r[2];

  try {
    var sm = read(filename);
    if (sm != null && typeof sm.catch === 'function') {
      return sm.catch(throwError);
    } else {
      return sm;
    }
  } catch (e) {
    throwError(e);
  }

  function throwError(e) {
    throw new Error('An error occurred while trying to read the map file at ' + filename + '\n' + e.stack);
  }
}

function Converter (sm, opts) {
  opts = opts || {};

  if (opts.hasComment) {
    sm = stripComment(sm);
  }

  if (opts.encoding === 'base64') {
    sm = decodeBase64(sm);
  } else if (opts.encoding === 'uri') {
    sm = decodeURIComponent(sm);
  }

  if (opts.isJSON || opts.encoding) {
    sm = JSON.parse(sm);
  }

  this.sourcemap = sm;
}

Converter.prototype.toJSON = function (space) {
  return JSON.stringify(this.sourcemap, null, space);
};

if (typeof Buffer !== 'undefined') {
  if (typeof Buffer.from === 'function') {
    Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
  } else {
    Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
  }
} else {
  Converter.prototype.toBase64 = encodeBase64WithBtoa;
}

function encodeBase64WithBufferFrom() {
  var json = this.toJSON();
  return Buffer.from(json, 'utf8').toString('base64');
}

function encodeBase64WithNewBuffer() {
  var json = this.toJSON();
  if (typeof json === 'number') {
    throw new TypeError('The json to encode must not be of type number.');
  }
  return new Buffer(json, 'utf8').toString('base64');
}

function encodeBase64WithBtoa() {
  var json = this.toJSON();
  return btoa(unescape(encodeURIComponent(json)));
}

Converter.prototype.toURI = function () {
  var json = this.toJSON();
  return encodeURIComponent(json);
};

Converter.prototype.toComment = function (options) {
  var encoding, content, data;
  if (options != null && options.encoding === 'uri') {
    encoding = '';
    content = this.toURI();
  } else {
    encoding = ';base64';
    content = this.toBase64();
  }
  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;
  return options != null && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

// returns copy instead of original
Converter.prototype.toObject = function () {
  return JSON.parse(this.toJSON());
};

Converter.prototype.addProperty = function (key, value) {
  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
  return this.setProperty(key, value);
};

Converter.prototype.setProperty = function (key, value) {
  this.sourcemap[key] = value;
  return this;
};

Converter.prototype.getProperty = function (key) {
  return this.sourcemap[key];
};

exports.fromObject = function (obj) {
  return new Converter(obj);
};

exports.fromJSON = function (json) {
  return new Converter(json, { isJSON: true });
};

exports.fromURI = function (uri) {
  return new Converter(uri, { encoding: 'uri' });
};

exports.fromBase64 = function (base64) {
  return new Converter(base64, { encoding: 'base64' });
};

exports.fromComment = function (comment) {
  var m, encoding;
  comment = comment
    .replace(/^\/\*/g, '//')
    .replace(/\*\/$/g, '');
  m = exports.commentRegex.exec(comment);
  encoding = m && m[4] || 'uri';
  return new Converter(comment, { encoding: encoding, hasComment: true });
};

function makeConverter(sm) {
  return new Converter(sm, { isJSON: true });
}

exports.fromMapFileComment = function (comment, read) {
  if (typeof read === 'string') {
    throw new Error(
      'String directory paths are no longer supported with `fromMapFileComment`\n' +
      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'
    )
  }

  var sm = readFromFileMap(comment, read);
  if (sm != null && typeof sm.then === 'function') {
    return sm.then(makeConverter);
  } else {
    return makeConverter(sm);
  }
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function (content) {
  var m = content.match(exports.commentRegex);
  return m ? exports.fromComment(m.pop()) : null;
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function (content, read) {
  if (typeof read === 'string') {
    throw new Error(
      'String directory paths are no longer supported with `fromMapFileSource`\n' +
      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'
    )
  }
  var m = content.match(exports.mapFileCommentRegex);
  return m ? exports.fromMapFileComment(m.pop(), read) : null;
};

exports.removeComments = function (src) {
  return src.replace(exports.commentRegex, '');
};

exports.removeMapFileComments = function (src) {
  return src.replace(exports.mapFileCommentRegex, '');
};

exports.generateMapFileComment = function (file, options) {
  var data = 'sourceMappingURL=' + file;
  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

--- FILE: ./node_modules/convert-source-map/package.json ---
{
  "name": "convert-source-map",
  "version": "2.0.0",
  "description": "Converts a source-map from/to  different formats and allows adding/changing properties.",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js --color"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/convert-source-map.git"
  },
  "homepage": "https://github.com/thlorenz/convert-source-map",
  "devDependencies": {
    "inline-source-map": "~0.6.2",
    "tap": "~9.0.0"
  },
  "keywords": [
    "convert",
    "sourcemap",
    "source",
    "map",
    "browser",
    "debug"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "license": "MIT",
  "engine": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ]
}

--- FILE: ./node_modules/cross-spawn/index.js ---
'use strict';

const cp = require('child_process');
const parse = require('./lib/parse');
const enoent = require('./lib/enoent');

function spawn(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);

    // Hook into child process "exit" event to emit an error if the command
    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    enoent.hookChildProcess(spawned, parsed);

    return spawned;
}

function spawnSync(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);

    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);

    return result;
}

module.exports = spawn;
module.exports.spawn = spawn;
module.exports.sync = spawnSync;

module.exports._parse = parse;
module.exports._enoent = enoent;

--- FILE: ./node_modules/cross-spawn/package.json ---
{
  "name": "cross-spawn",
  "version": "7.0.6",
  "description": "Cross platform child_process#spawn and child_process#spawnSync",
  "keywords": [
    "spawn",
    "spawnSync",
    "windows",
    "cross-platform",
    "path-ext",
    "shebang",
    "cmd",
    "execute"
  ],
  "author": "André Cruz <andre@moxy.studio>",
  "homepage": "https://github.com/moxystudio/node-cross-spawn",
  "repository": {
    "type": "git",
    "url": "git@github.com:moxystudio/node-cross-spawn.git"
  },
  "license": "MIT",
  "main": "index.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint .",
    "test": "jest --env node --coverage",
    "prerelease": "npm t && npm run lint",
    "release": "standard-version",
    "postrelease": "git push --follow-tags origin HEAD && npm publish"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "path-key": "^3.1.0",
    "shebang-command": "^2.0.0",
    "which": "^2.0.1"
  },
  "devDependencies": {
    "@commitlint/cli": "^8.1.0",
    "@commitlint/config-conventional": "^8.1.0",
    "babel-core": "^6.26.3",
    "babel-jest": "^24.9.0",
    "babel-preset-moxy": "^3.1.0",
    "eslint": "^5.16.0",
    "eslint-config-moxy": "^7.1.0",
    "husky": "^3.0.5",
    "jest": "^24.9.0",
    "lint-staged": "^9.2.5",
    "mkdirp": "^0.5.1",
    "rimraf": "^3.0.0",
    "standard-version": "^9.5.0"
  },
  "engines": {
    "node": ">= 8"
  }
}

--- FILE: ./node_modules/cssesc/cssesc.js ---
/*! https://mths.be/cssesc v3.0.0 by @mathias */
'use strict';

var object = {};
var hasOwnProperty = object.hasOwnProperty;
var merge = function merge(options, defaults) {
	if (!options) {
		return defaults;
	}
	var result = {};
	for (var key in defaults) {
		// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since
		// only recognized option names are used.
		result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];
	}
	return result;
};

var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
var regexAlwaysEscape = /['"\\]/;
var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;

// https://mathiasbynens.be/notes/css-escapes#css
var cssesc = function cssesc(string, options) {
	options = merge(options, cssesc.options);
	if (options.quotes != 'single' && options.quotes != 'double') {
		options.quotes = 'single';
	}
	var quote = options.quotes == 'double' ? '"' : '\'';
	var isIdentifier = options.isIdentifier;

	var firstChar = string.charAt(0);
	var output = '';
	var counter = 0;
	var length = string.length;
	while (counter < length) {
		var character = string.charAt(counter++);
		var codePoint = character.charCodeAt();
		var value = void 0;
		// If it’s not a printable ASCII character…
		if (codePoint < 0x20 || codePoint > 0x7E) {
			if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {
				// It’s a high surrogate, and there is a next character.
				var extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// next character is low surrogate
					codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
				} else {
					// It’s an unmatched surrogate; only append this code unit, in case
					// the next code unit is the high surrogate of a surrogate pair.
					counter--;
				}
			}
			value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
		} else {
			if (options.escapeEverything) {
				if (regexAnySingleEscape.test(character)) {
					value = '\\' + character;
				} else {
					value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
				}
			} else if (/[\t\n\f\r\x0B]/.test(character)) {
				value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
			} else if (character == '\\' || !isIdentifier && (character == '"' && quote == character || character == '\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
				value = '\\' + character;
			} else {
				value = character;
			}
		}
		output += value;
	}

	if (isIdentifier) {
		if (/^-[-\d]/.test(output)) {
			output = '\\-' + output.slice(1);
		} else if (/\d/.test(firstChar)) {
			output = '\\3' + firstChar + ' ' + output.slice(1);
		}
	}

	// Remove spaces after `\HEX` escapes that are not followed by a hex digit,
	// since they’re redundant. Note that this is only possible if the escape
	// sequence isn’t preceded by an odd number of backslashes.
	output = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {
		if ($1 && $1.length % 2) {
			// It’s not safe to remove the space, so don’t.
			return $0;
		}
		// Strip the space.
		return ($1 || '') + $2;
	});

	if (!isIdentifier && options.wrap) {
		return quote + output + quote;
	}
	return output;
};

// Expose default options (so they can be overridden globally).
cssesc.options = {
	'escapeEverything': false,
	'isIdentifier': false,
	'quotes': 'single',
	'wrap': false
};

cssesc.version = '3.0.0';

module.exports = cssesc;

--- FILE: ./node_modules/cssesc/package.json ---
{
  "name": "cssesc",
  "version": "3.0.0",
  "description": "A JavaScript library for escaping CSS strings and identifiers while generating the shortest possible ASCII-only output.",
  "homepage": "https://mths.be/cssesc",
  "engines": {
    "node": ">=4"
  },
  "main": "cssesc.js",
  "bin": "bin/cssesc",
  "man": "man/cssesc.1",
  "keywords": [
    "css",
    "escape",
    "identifier",
    "string",
    "tool"
  ],
  "license": "MIT",
  "author": {
    "name": "Mathias Bynens",
    "url": "https://mathiasbynens.be/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mathiasbynens/cssesc.git"
  },
  "bugs": "https://github.com/mathiasbynens/cssesc/issues",
  "files": [
    "LICENSE-MIT.txt",
    "cssesc.js",
    "bin/",
    "man/"
  ],
  "scripts": {
    "build": "grunt template && babel cssesc.js -o cssesc.js",
    "test": "mocha tests",
    "cover": "istanbul cover --report html node_modules/.bin/_mocha tests -- -u exports -R spec"
  },
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "codecov": "^1.0.1",
    "grunt": "^1.0.1",
    "grunt-template": "^1.0.0",
    "istanbul": "^0.4.4",
    "mocha": "^2.5.3",
    "regenerate": "^1.2.1",
    "requirejs": "^2.1.16"
  }
}

--- FILE: ./node_modules/csstype/index.d.ts ---
export {};

export type PropertyValue<TValue> = TValue extends Array<infer AValue>
  ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>
  : TValue extends infer TUnpacked & {}
  ? TUnpacked
  : TValue;

export type Fallback<T> = { [P in keyof T]: T[P] | readonly NonNullable<T[P]>[] };

export interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
  /**
   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.
   *
   * **Syntax**: `auto | <color>`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **93** | **92**  | **15.4** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color
   */
  accentColor?: Property.AccentColor | undefined;
  /**
   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
   *
   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`
   *
   * **Initial value**: `normal`
   *
   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :------: | :-----: | :-----: | :----: | :----: |
   * |  **29**  | **28**  |  **9**  | **12** | **11** |
   * | 21 _-x-_ |         | 7 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/align-content
   */
  alignContent?: Property.AlignContent | undefined;
  /**
   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.
   *
   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`
   *
   * **Initial value**: `normal`
   *
   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :------: | :-----: | :-----: | :----: | :----: |
   * |  **29**  | **20**  |  **9**  | **12** | **11** |
   * | 21 _-x-_ |         | 7 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/align-items
   */
  alignItems?: Property.AlignItems | undefined;
  /**
   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.
   *
   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`
   *
   * **Initial value**: `auto`
   *
   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :------: | :-----: | :-----: | :----: | :----: |
   * |  **29**  | **20**  |  **9**  | **12** | **10** |
   * | 21 _-x-_ |         | 7 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/align-self
   */
  alignSelf?: Property.AlignSelf | undefined;
  /**
   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.
   *
   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`
   *
   * **Initial value**: `normal`
   *
   * | Chrome | Firefox | Safari | Edge | IE  |
   * | :----: | :-----: | :----: | :--: | :-: |
   * |   No   |   n/a   |   No   | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks
   */
  alignTracks?: Property.AlignTracks | undefined;
  /**
   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.
   *
   * **Syntax**: `<single-animation-composition>#`
   *
   * **Initial value**: `replace`
   *
   * | Chrome  | Firefox | Safari | Edge | IE  |
   * | :-----: | :-----: | :----: | :--: | :-: |
   * | **112** | **115** | **16** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition
   */
  animationComposition?: Property.AnimationComposition | undefined;
  /**
   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
   *
   * **Syntax**: `<time>#`
   *
   * **Initial value**: `0s`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
   */
  animationDelay?: Property.AnimationDelay<TTime> | undefined;
  /**
   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.
   *
   * **Syntax**: `<single-animation-direction>#`
   *
   * **Initial value**: `normal`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
   */
  animationDirection?: Property.AnimationDirection | undefined;
  /**
   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.
   *
   * **Syntax**: `<time>#`
   *
   * **Initial value**: `0s`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
   */
  animationDuration?: Property.AnimationDuration<TTime> | undefined;
  /**
   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.
   *
   * **Syntax**: `<single-animation-fill-mode>#`
   *
   * **Initial value**: `none`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
   */
  animationFillMode?: Property.AnimationFillMode | undefined;
  /**
   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.
   *
   * **Syntax**: `<single-animation-iteration-count>#`
   *
   * **Initial value**: `1`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
   */
  animationIterationCount?: Property.AnimationIterationCount | undefined;
  /**
   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.
   *
   * **Syntax**: `[ none | <keyframes-name> ]#`
   *
   * **Initial value**: `none`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name
   */
  animationName?: Property.AnimationName | undefined;
  /**
   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.
   *
   * **Syntax**: `<single-animation-play-state>#`
   *
   * **Initial value**: `running`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
   */
  animationPlayState?: Property.AnimationPlayState | undefined;
  /**
   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.
   *
   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`
   *
   * **Initial value**: `normal`
   *
   * | Chrome  | Firefox | Safari | Edge | IE  |
   * | :-----: | :-----: | :----: | :--: | :-: |
   * | **115** |   No    |   No   | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end
   */
  animationRangeEnd?: Property.AnimationRangeEnd<TLength> | undefined;
  /**
   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.
   *
   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`
   *
   * **Initial value**: `normal`
   *
   * | Chrome  | Firefox | Safari | Edge | IE  |
   * | :-----: | :-----: | :----: | :--: | :-: |
   * | **115** |   No    |   No   | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start
   */
  animationRangeStart?: Property.AnimationRangeStart<TLength> | undefined;
  /**
   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.
   *
   * **Syntax**: `<single-animation-timeline>#`
   *
   * **Initial value**: `auto`
   *
   * | Chrome  | Firefox | Safari | Edge | IE  |
   * | :-----: | :-----: | :----: | :--: | :-: |
   * | **115** |   n/a   |   No   | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline
   */
  animationTimeline?: Property.AnimationTimeline | undefined;
  /**
   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.
   *
   * **Syntax**: `<easing-function>#`
   *
   * **Initial value**: `ease`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |
   * | :-----: | :-----: | :-----: | :----: | :----: |
   * | **43**  | **16**  |  **9**  | **12** | **10** |
   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
   */
  animationTimingFunction?: Property.AnimationTimingFunction | undefined;
  /**
   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.
   *
   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`
   *
   * **Initial value**: `none`
   *
   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |
   * | :-----: | :-----: | :------: | :------: | :-: |
   * | **84**  | **80**  | **15.4** |  **84**  | No  |
   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/appearance
   */
  appearance?: Property.Appearance | undefined;
  /**
   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.
   *
   * **Syntax**: `auto | <ratio>`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox | Safari | Edge | IE  |
   * | :----: | :-----: | :----: | :--: | :-: |
   * | **88** | **89**  | **15** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
   */
  aspectRatio?: Property.AspectRatio | undefined;
  /**
   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.
   *
   * **Syntax**: `none | <filter-function-list>`
   *
   * **Initial value**: `none`
   *
   * | Chrome | Firefox |   Safari    |  Edge  | IE  |
   * | :----: | :-----: | :---------: | :----: | :-: |
   * | **76** | **103** | **9** _-x-_ | **17** | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
   */
  backdropFilter?: Property.BackdropFilter | undefined;
  /**
   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.
   *
   * **Syntax**: `visible | hidden`
   *
   * **Initial value**: `visible`
   *
   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |
   * | :------: | :-----: | :-------: | :----: | :----: |
   * |  **36**  | **16**  | **15.4**  | **12** | **10** |
   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
   */
  backfaceVisibility?: Property.BackfaceVisibility | undefined;
  /**
   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.
   *
   * **Syntax**: `<attachment>#`
   *
   * **Initial value**: `scroll`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  |  **1**  | **1**  | **12** | **4** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
   */
  backgroundAttachment?: Property.BackgroundAttachment | undefined;
  /**
   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.
   *
   * **Syntax**: `<blend-mode>#`
   *
   * **Initial value**: `normal`
   *
   * | Chrome | Firefox | Safari | Edge | IE  |
   * | :----: | :-----: | :----: | :--: | :-: |
   * | **35** | **30**  | **8**  | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
   */
  backgroundBlendMode?: Property.BackgroundBlendMode | undefined;
  /**
   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.
   *
   * **Syntax**: `<box>#`
   *
   * **Initial value**: `border-box`
   *
   * | Chrome | Firefox | Safari  |  Edge  |  IE   |
   * | :----: | :-----: | :-----: | :----: | :---: |
   * | **1**  |  **4**  |  **5**  | **12** | **9** |
   * |        |         | 3 _-x-_ |        |       |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip
   */
  backgroundClip?: Property.BackgroundClip | undefined;
  /**
   * The **`background-color`** CSS property sets the background color of an element.
   *
   * **Syntax**: `<color>`
   *
   * **Initial value**: `transparent`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  |  **1**  | **1**  | **12** | **4** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-color
   */
  backgroundColor?: Property.BackgroundColor | undefined;
  /**
   * The **`background-image`** CSS property sets one or more background images on an element.
   *
   * **Syntax**: `<bg-image>#`
   *
   * **Initial value**: `none`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  |  **1**  | **1**  | **12** | **4** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-image
   */
  backgroundImage?: Property.BackgroundImage | undefined;
  /**
   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.
   *
   * **Syntax**: `<box>#`
   *
   * **Initial value**: `padding-box`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  |  **4**  | **3**  | **12** | **9** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin
   */
  backgroundOrigin?: Property.BackgroundOrigin | undefined;
  /**
   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.
   *
   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`
   *
   * **Initial value**: `0%`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  | **49**  | **1**  | **12** | **6** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
   */
  backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;
  /**
   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.
   *
   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`
   *
   * **Initial value**: `0%`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  | **49**  | **1**  | **12** | **6** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
   */
  backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;
  /**
   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.
   *
   * **Syntax**: `<repeat-style>#`
   *
   * **Initial value**: `repeat`
   *
   * | Chrome | Firefox | Safari |  Edge  |  IE   |
   * | :----: | :-----: | :----: | :----: | :---: |
   * | **1**  |  **1**  | **1**  | **12** | **4** |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
   */
  backgroundRepeat?: Property.BackgroundRepeat | undefined;
  /**
   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.
   *
   * **Syntax**: `<bg-size>#`
   *
   * **Initial value**: `auto auto`
   *
   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |
   * | :-----: | :-----: | :-----: | :----: | :---: |
   * |  **3**  |  **4**  |  **5**  | **12** | **9** |
   * | 1 _-x-_ |         | 3 _-x-_ |        |       |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/background-size
   */
  backgroundSize?: Property.BackgroundSize<TLength> | undefined;
  /**
   * **Syntax**: `clip | ellipsis | <string>`
   *
   * **Initial value**: `clip`
   */
  blockOverflow?: Property.BlockOverflow | undefined;
  /**
   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.
   *
   * **Syntax**: `<'width'>`
   *
   * **Initial value**: `auto`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **57** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/block-size
   */
  blockSize?: Property.BlockSize<TLength> | undefined;
  /**
   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-color'>{1,2}`
   *
   * **Initial value**: `currentcolor`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **87** | **66**  | **14.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
   */
  borderBlockColor?: Property.BorderBlockColor | undefined;
  /**
   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-color'>`
   *
   * **Initial value**: `currentcolor`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
   */
  borderBlockEndColor?: Property.BorderBlockEndColor | undefined;
  /**
   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-style'>`
   *
   * **Initial value**: `none`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
   */
  borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;
  /**
   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-width'>`
   *
   * **Initial value**: `medium`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
   */
  borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;
  /**
   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-color'>`
   *
   * **Initial value**: `currentcolor`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
   */
  borderBlockStartColor?: Property.BorderBlockStartColor | undefined;
  /**
   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-style'>`
   *
   * **Initial value**: `none`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
   */
  borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;
  /**
   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-width'>`
   *
   * **Initial value**: `medium`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **69** | **41**  | **12.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
   */
  borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;
  /**
   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-style'>`
   *
   * **Initial value**: `none`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |
   * | :----: | :-----: | :------: | :--: | :-: |
   * | **87** | **66**  | **14.1** | n/a  | No  |
   *
   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
   */
  borderBlockStyle?: Property.BorderBlockStyle | undefined;
  /**
   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.
   *
   * **Syntax**: `<'border-top-width'>`
   *
   * **Initial value**: `medium`
   *
   * | Chrome | Firefox |  Safari  | Edge | IE  |

--- FILE: ./node_modules/csstype/package.json ---
{
  "name": "csstype",
  "version": "3.1.3",
  "main": "",
  "types": "index.d.ts",
  "description": "Strict TypeScript and Flow types for style based on MDN data",
  "repository": "https://github.com/frenic/csstype",
  "author": "Fredrik Nicol <fredrik.nicol@gmail.com>",
  "license": "MIT",
  "devDependencies": {
    "@types/chokidar": "^2.1.3",
    "@types/css-tree": "^2.3.1",
    "@types/jest": "^29.5.0",
    "@types/jsdom": "^21.1.1",
    "@types/node": "^16.18.23",
    "@types/prettier": "^2.7.2",
    "@types/request": "^2.48.8",
    "@types/turndown": "^5.0.1",
    "@typescript-eslint/eslint-plugin": "^5.57.0",
    "@typescript-eslint/parser": "^5.57.0",
    "chalk": "^4.1.2",
    "chokidar": "^3.5.3",
    "eslint": "^8.37.0",
    "css-tree": "^2.3.1",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^4.2.1",
    "fast-glob": "^3.2.12",
    "flow-bin": "^0.203.1",
    "jest": "^29.5.0",
    "jsdom": "^21.1.1",
    "mdn-browser-compat-data": "git+https://github.com/mdn/browser-compat-data.git#1bf44517bd08de735e9ec20dbfe8e86c96341054",
    "mdn-data": "git+https://github.com/mdn/data.git#7f0c865a3c4b5d891285c93308ee5c25cb5cfee8",
    "prettier": "^2.8.7",
    "request": "^2.88.2",
    "ts-jest": "^29.0.5",
    "ts-node": "^10.9.1",
    "turndown": "^7.1.2",
    "typescript": "~5.0.3"
  },
  "scripts": {
    "prepublish": "npm install --prefix __tests__ && npm install --prefix __tests__/__fixtures__",
    "prepublishOnly": "tsc && npm run test:src && npm run build && ts-node --files prepublish.ts",
    "update": "ts-node --files update.ts",
    "build": "ts-node --files build.ts --start",
    "watch": "ts-node --files build.ts --watch",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "pretty": "prettier --write build.ts **/*.{ts,js,json,md}",
    "lazy": "tsc && npm run lint",
    "test": "jest --runInBand",
    "test:src": "jest src.*.ts",
    "test:dist": "jest dist.*.ts --runInBand"
  },
  "files": [
    "index.d.ts",
    "index.js.flow"
  ],
  "keywords": [
    "css",
    "style",
    "typescript",
    "flow",
    "typings",
    "types",
    "definitions"
  ]
}

--- FILE: ./node_modules/date-fns/add.cjs ---
"use strict";
exports.add = add;
var _index = require("./addDays.cjs");
var _index2 = require("./addMonths.cjs");
var _index3 = require("./constructFrom.cjs");
var _index4 = require("./toDate.cjs");

/**
 * The {@link add} function options.
 */

/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */
function add(date, duration, options) {
  const {
    years = 0,
    months = 0,
    weeks = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0,
  } = duration;

  // Add years and months
  const _date = (0, _index4.toDate)(date, options?.in);
  const dateWithMonths =
    months || years
      ? (0, _index2.addMonths)(_date, months + years * 12)
      : _date;

  // Add weeks and days
  const dateWithDays =
    days || weeks
      ? (0, _index.addDays)(dateWithMonths, days + weeks * 7)
      : dateWithMonths;

  // Add days, hours, minutes, and seconds
  const minutesToAdd = minutes + hours * 60;
  const secondsToAdd = seconds + minutesToAdd * 60;
  const msToAdd = secondsToAdd * 1000;

  return (0, _index3.constructFrom)(
    options?.in || date,
    +dateWithDays + msToAdd,
  );
}

--- FILE: ./node_modules/date-fns/add.d.ts ---
import type { ContextOptions, DateArg, Duration } from "./types.js";
/**
 * The {@link add} function options.
 */
export interface AddOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */
export declare function add<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  duration: Duration,
  options?: AddOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/add.js ---
import { addDays } from "./addDays.js";
import { addMonths } from "./addMonths.js";
import { constructFrom } from "./constructFrom.js";
import { toDate } from "./toDate.js";

/**
 * The {@link add} function options.
 */

/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.
 *
 * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */
export function add(date, duration, options) {
  const {
    years = 0,
    months = 0,
    weeks = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0,
  } = duration;

  // Add years and months
  const _date = toDate(date, options?.in);
  const dateWithMonths =
    months || years ? addMonths(_date, months + years * 12) : _date;

  // Add weeks and days
  const dateWithDays =
    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;

  // Add days, hours, minutes, and seconds
  const minutesToAdd = minutes + hours * 60;
  const secondsToAdd = seconds + minutesToAdd * 60;
  const msToAdd = secondsToAdd * 1000;

  return constructFrom(options?.in || date, +dateWithDays + msToAdd);
}

// Fallback for modularized imports:
export default add;

--- FILE: ./node_modules/date-fns/addBusinessDays.cjs ---
"use strict";
exports.addBusinessDays = addBusinessDays;
var _index = require("./constructFrom.cjs");
var _index2 = require("./isSaturday.cjs");
var _index3 = require("./isSunday.cjs");
var _index4 = require("./isWeekend.cjs");
var _index5 = require("./toDate.cjs");

/**
 * The {@link addBusinessDays} function options.
 */

/**
 * @name addBusinessDays
 * @category Day Helpers
 * @summary Add the specified number of business days (mon - fri) to the given date.
 *
 * @description
 * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of business days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the business days added
 *
 * @example
 * // Add 10 business days to 1 September 2014:
 * const result = addBusinessDays(new Date(2014, 8, 1), 10)
 * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)
 */
function addBusinessDays(date, amount, options) {
  const _date = (0, _index5.toDate)(date, options?.in);
  const startedOnWeekend = (0, _index4.isWeekend)(_date, options);

  if (isNaN(amount)) return (0, _index.constructFrom)(options?.in, NaN);

  const hours = _date.getHours();
  const sign = amount < 0 ? -1 : 1;
  const fullWeeks = Math.trunc(amount / 5);

  _date.setDate(_date.getDate() + fullWeeks * 7);

  // Get remaining days not part of a full week
  let restDays = Math.abs(amount % 5);

  // Loops over remaining days
  while (restDays > 0) {
    _date.setDate(_date.getDate() + sign);
    if (!(0, _index4.isWeekend)(_date, options)) restDays -= 1;
  }

  // If the date is a weekend day and we reduce a dividable of
  // 5 from it, we land on a weekend date.
  // To counter this, we add days accordingly to land on the next business day
  if (
    startedOnWeekend &&
    (0, _index4.isWeekend)(_date, options) &&
    amount !== 0
  ) {
    // If we're reducing days, we want to add days until we land on a weekday
    // If we're adding days we want to reduce days until we land on a weekday
    if ((0, _index2.isSaturday)(_date, options))
      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));
    if ((0, _index3.isSunday)(_date, options))
      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));
  }

  // Restore hours to avoid DST lag
  _date.setHours(hours);

  return _date;
}

--- FILE: ./node_modules/date-fns/addBusinessDays.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addBusinessDays} function options.
 */
export interface AddBusinessDaysOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addBusinessDays
 * @category Day Helpers
 * @summary Add the specified number of business days (mon - fri) to the given date.
 *
 * @description
 * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of business days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the business days added
 *
 * @example
 * // Add 10 business days to 1 September 2014:
 * const result = addBusinessDays(new Date(2014, 8, 1), 10)
 * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)
 */
export declare function addBusinessDays<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddBusinessDaysOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addBusinessDays.js ---
import { constructFrom } from "./constructFrom.js";
import { isSaturday } from "./isSaturday.js";
import { isSunday } from "./isSunday.js";
import { isWeekend } from "./isWeekend.js";
import { toDate } from "./toDate.js";

/**
 * The {@link addBusinessDays} function options.
 */

/**
 * @name addBusinessDays
 * @category Day Helpers
 * @summary Add the specified number of business days (mon - fri) to the given date.
 *
 * @description
 * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of business days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the business days added
 *
 * @example
 * // Add 10 business days to 1 September 2014:
 * const result = addBusinessDays(new Date(2014, 8, 1), 10)
 * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)
 */
export function addBusinessDays(date, amount, options) {
  const _date = toDate(date, options?.in);
  const startedOnWeekend = isWeekend(_date, options);

  if (isNaN(amount)) return constructFrom(options?.in, NaN);

  const hours = _date.getHours();
  const sign = amount < 0 ? -1 : 1;
  const fullWeeks = Math.trunc(amount / 5);

  _date.setDate(_date.getDate() + fullWeeks * 7);

  // Get remaining days not part of a full week
  let restDays = Math.abs(amount % 5);

  // Loops over remaining days
  while (restDays > 0) {
    _date.setDate(_date.getDate() + sign);
    if (!isWeekend(_date, options)) restDays -= 1;
  }

  // If the date is a weekend day and we reduce a dividable of
  // 5 from it, we land on a weekend date.
  // To counter this, we add days accordingly to land on the next business day
  if (startedOnWeekend && isWeekend(_date, options) && amount !== 0) {
    // If we're reducing days, we want to add days until we land on a weekday
    // If we're adding days we want to reduce days until we land on a weekday
    if (isSaturday(_date, options))
      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));
    if (isSunday(_date, options))
      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));
  }

  // Restore hours to avoid DST lag
  _date.setHours(hours);

  return _date;
}

// Fallback for modularized imports:
export default addBusinessDays;

--- FILE: ./node_modules/date-fns/addDays.cjs ---
"use strict";
exports.addDays = addDays;
var _index = require("./constructFrom.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link addDays} function options.
 */

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays(date, amount, options) {
  const _date = (0, _index2.toDate)(date, options?.in);
  if (isNaN(amount)) return (0, _index.constructFrom)(options?.in || date, NaN);

  // If 0 days, no-op to avoid changing times in the hour before end of DST
  if (!amount) return _date;

  _date.setDate(_date.getDate() + amount);
  return _date;
}

--- FILE: ./node_modules/date-fns/addDays.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addDays} function options.
 */
export interface AddDaysOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
export declare function addDays<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddDaysOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addDays.js ---
import { constructFrom } from "./constructFrom.js";
import { toDate } from "./toDate.js";

/**
 * The {@link addDays} function options.
 */

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
export function addDays(date, amount, options) {
  const _date = toDate(date, options?.in);
  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);

  // If 0 days, no-op to avoid changing times in the hour before end of DST
  if (!amount) return _date;

  _date.setDate(_date.getDate() + amount);
  return _date;
}

// Fallback for modularized imports:
export default addDays;

--- FILE: ./node_modules/date-fns/addHours.cjs ---
"use strict";
exports.addHours = addHours;
var _index = require("./addMilliseconds.cjs");
var _index2 = require("./constants.cjs");

/**
 * The {@link addHours} function options.
 */

/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be added
 * @param options - An object with options
 *
 * @returns The new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
function addHours(date, amount, options) {
  return (0, _index.addMilliseconds)(
    date,
    amount * _index2.millisecondsInHour,
    options,
  );
}

--- FILE: ./node_modules/date-fns/addHours.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addHours} function options.
 */
export interface AddHoursOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be added
 * @param options - An object with options
 *
 * @returns The new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
export declare function addHours<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddHoursOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addHours.js ---
import { addMilliseconds } from "./addMilliseconds.js";
import { millisecondsInHour } from "./constants.js";

/**
 * The {@link addHours} function options.
 */

/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be added
 * @param options - An object with options
 *
 * @returns The new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
export function addHours(date, amount, options) {
  return addMilliseconds(date, amount * millisecondsInHour, options);
}

// Fallback for modularized imports:
export default addHours;

--- FILE: ./node_modules/date-fns/addISOWeekYears.cjs ---
"use strict";
exports.addISOWeekYears = addISOWeekYears;
var _index = require("./getISOWeekYear.cjs");
var _index2 = require("./setISOWeekYear.cjs");

/**
 * The {@link addISOWeekYears} function options.
 */

/**
 * @name addISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of ISO week-numbering years to be added.
 * @param options - An object with options
 *
 * @returns The new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * const result = addISOWeekYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jun 26 2015 00:00:00
 */
function addISOWeekYears(date, amount, options) {
  return (0, _index2.setISOWeekYear)(
    date,
    (0, _index.getISOWeekYear)(date, options) + amount,
    options,
  );
}

--- FILE: ./node_modules/date-fns/addISOWeekYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addISOWeekYears} function options.
 */
export interface AddISOWeekYearsOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of ISO week-numbering years to be added.
 * @param options - An object with options
 *
 * @returns The new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * const result = addISOWeekYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jun 26 2015 00:00:00
 */
export declare function addISOWeekYears<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddISOWeekYearsOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addISOWeekYears.js ---
import { getISOWeekYear } from "./getISOWeekYear.js";
import { setISOWeekYear } from "./setISOWeekYear.js";

/**
 * The {@link addISOWeekYears} function options.
 */

/**
 * @name addISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of ISO week-numbering years to be added.
 * @param options - An object with options
 *
 * @returns The new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * const result = addISOWeekYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jun 26 2015 00:00:00
 */
export function addISOWeekYears(date, amount, options) {
  return setISOWeekYear(date, getISOWeekYear(date, options) + amount, options);
}

// Fallback for modularized imports:
export default addISOWeekYears;

--- FILE: ./node_modules/date-fns/addMilliseconds.cjs ---
"use strict";
exports.addMilliseconds = addMilliseconds;
var _index = require("./constructFrom.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link addMilliseconds} function options.
 */

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be added.
 * @param options - The options object
 *
 * @returns The new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(date, amount, options) {
  return (0, _index.constructFrom)(
    options?.in || date,
    +(0, _index2.toDate)(date) + amount,
  );
}

--- FILE: ./node_modules/date-fns/addMilliseconds.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addMilliseconds} function options.
 */
export interface AddMillisecondsOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be added.
 * @param options - The options object
 *
 * @returns The new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
export declare function addMilliseconds<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddMillisecondsOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addMilliseconds.js ---
import { constructFrom } from "./constructFrom.js";
import { toDate } from "./toDate.js";

/**
 * The {@link addMilliseconds} function options.
 */

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be added.
 * @param options - The options object
 *
 * @returns The new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
export function addMilliseconds(date, amount, options) {
  return constructFrom(options?.in || date, +toDate(date) + amount);
}

// Fallback for modularized imports:
export default addMilliseconds;

--- FILE: ./node_modules/date-fns/addMinutes.cjs ---
"use strict";
exports.addMinutes = addMinutes;
var _index = require("./constants.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link addMinutes} function options.
 */

/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be added.
 * @param options - An object with options
 *
 * @returns The new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
function addMinutes(date, amount, options) {
  const _date = (0, _index2.toDate)(date, options?.in);
  _date.setTime(_date.getTime() + amount * _index.millisecondsInMinute);
  return _date;
}

--- FILE: ./node_modules/date-fns/addMinutes.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addMinutes} function options.
 */
export interface AddMinutesOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be added.
 * @param options - An object with options
 *
 * @returns The new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
export declare function addMinutes<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddMinutesOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addMinutes.js ---
import { millisecondsInMinute } from "./constants.js";
import { toDate } from "./toDate.js";

/**
 * The {@link addMinutes} function options.
 */

/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be added.
 * @param options - An object with options
 *
 * @returns The new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
export function addMinutes(date, amount, options) {
  const _date = toDate(date, options?.in);
  _date.setTime(_date.getTime() + amount * millisecondsInMinute);
  return _date;
}

// Fallback for modularized imports:
export default addMinutes;

--- FILE: ./node_modules/date-fns/addMonths.cjs ---
"use strict";
exports.addMonths = addMonths;
var _index = require("./constructFrom.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link addMonths} function options.
 */

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be added.
 * @param options - The options object
 *
 * @returns The new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 *
 * // Add one month to 30 January 2023:
 * const result = addMonths(new Date(2023, 0, 30), 1)
 * //=> Tue Feb 28 2023 00:00:00
 */
function addMonths(date, amount, options) {
  const _date = (0, _index2.toDate)(date, options?.in);
  if (isNaN(amount)) return (0, _index.constructFrom)(options?.in || date, NaN);
  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return _date;
  }
  const dayOfMonth = _date.getDate();

  // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.
  const endOfDesiredMonth = (0, _index.constructFrom)(
    options?.in || date,
    _date.getTime(),
  );
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth,
    );
    return _date;
  }
}

--- FILE: ./node_modules/date-fns/addMonths.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addMonths} function options.
 */
export interface AddMonthsOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be added.
 * @param options - The options object
 *
 * @returns The new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 *
 * // Add one month to 30 January 2023:
 * const result = addMonths(new Date(2023, 0, 30), 1)
 * //=> Tue Feb 28 2023 00:00:00
 */
export declare function addMonths<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddMonthsOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addMonths.js ---
import { constructFrom } from "./constructFrom.js";
import { toDate } from "./toDate.js";

/**
 * The {@link addMonths} function options.
 */

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be added.
 * @param options - The options object
 *
 * @returns The new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 *
 * // Add one month to 30 January 2023:
 * const result = addMonths(new Date(2023, 0, 30), 1)
 * //=> Tue Feb 28 2023 00:00:00
 */
export function addMonths(date, amount, options) {
  const _date = toDate(date, options?.in);
  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);
  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return _date;
  }
  const dayOfMonth = _date.getDate();

  // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.
  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth,
    );
    return _date;
  }
}

// Fallback for modularized imports:
export default addMonths;

--- FILE: ./node_modules/date-fns/addQuarters.cjs ---
"use strict";
exports.addQuarters = addQuarters;
var _index = require("./addMonths.cjs");

/**
 * The {@link addQuarters} function options.
 */

/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be added.
 * @param options - An object with options
 *
 * @returns The new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=; Mon Dec 01 2014 00:00:00
 */
function addQuarters(date, amount, options) {
  return (0, _index.addMonths)(date, amount * 3, options);
}

--- FILE: ./node_modules/date-fns/addQuarters.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addQuarters} function options.
 */
export interface AddQuartersOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be added.
 * @param options - An object with options
 *
 * @returns The new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=; Mon Dec 01 2014 00:00:00
 */
export declare function addQuarters<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddQuartersOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addQuarters.js ---
import { addMonths } from "./addMonths.js";

/**
 * The {@link addQuarters} function options.
 */

/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be added.
 * @param options - An object with options
 *
 * @returns The new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=; Mon Dec 01 2014 00:00:00
 */
export function addQuarters(date, amount, options) {
  return addMonths(date, amount * 3, options);
}

// Fallback for modularized imports:
export default addQuarters;

--- FILE: ./node_modules/date-fns/addSeconds.cjs ---
"use strict";
exports.addSeconds = addSeconds;
var _index = require("./addMilliseconds.cjs");

/**
 * The {@link addSeconds} function options.
 */

/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
function addSeconds(date, amount, options) {
  return (0, _index.addMilliseconds)(date, amount * 1000, options);
}

--- FILE: ./node_modules/date-fns/addSeconds.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addSeconds} function options.
 */
export interface AddSecondsOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
export declare function addSeconds<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddSecondsOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addSeconds.js ---
import { addMilliseconds } from "./addMilliseconds.js";

/**
 * The {@link addSeconds} function options.
 */

/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be added.
 * @param options - An object with options
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
export function addSeconds(date, amount, options) {
  return addMilliseconds(date, amount * 1000, options);
}

// Fallback for modularized imports:
export default addSeconds;

--- FILE: ./node_modules/date-fns/addWeeks.cjs ---
"use strict";
exports.addWeeks = addWeeks;
var _index = require("./addDays.cjs");

/**
 * The {@link addWeeks} function options.
 */

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of weeks to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 * @param options - An object with options
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks(date, amount, options) {
  return (0, _index.addDays)(date, amount * 7, options);
}

--- FILE: ./node_modules/date-fns/addWeeks.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addWeeks} function options.
 */
export interface AddWeeksOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of weeks to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 * @param options - An object with options
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
export declare function addWeeks<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddWeeksOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addWeeks.js ---
import { addDays } from "./addDays.js";

/**
 * The {@link addWeeks} function options.
 */

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of weeks to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 * @param options - An object with options
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
export function addWeeks(date, amount, options) {
  return addDays(date, amount * 7, options);
}

// Fallback for modularized imports:
export default addWeeks;

--- FILE: ./node_modules/date-fns/addYears.cjs ---
"use strict";
exports.addYears = addYears;
var _index = require("./addMonths.cjs");

/**
 * The {@link addYears} function options.
 */

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type.
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 * @param options - The options
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears(date, amount, options) {
  return (0, _index.addMonths)(date, amount * 12, options);
}

--- FILE: ./node_modules/date-fns/addYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link addYears} function options.
 */
export interface AddYearsOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type.
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 * @param options - The options
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
export declare function addYears<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  amount: number,
  options?: AddYearsOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/addYears.js ---
import { addMonths } from "./addMonths.js";

/**
 * The {@link addYears} function options.
 */

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type.
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 * @param options - The options
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
export function addYears(date, amount, options) {
  return addMonths(date, amount * 12, options);
}

// Fallback for modularized imports:
export default addYears;

--- FILE: ./node_modules/date-fns/areIntervalsOverlapping.cjs ---
"use strict";
exports.areIntervalsOverlapping = areIntervalsOverlapping;
var _index = require("./toDate.cjs");

/**
 * The {@link areIntervalsOverlapping} function options.
 */

/**
 * @name areIntervalsOverlapping
 * @category Interval Helpers
 * @summary Is the given time interval overlapping with another time interval?
 *
 * @description
 * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - The object with options
 *
 * @returns Whether the time intervals are overlapping
 *
 * @example
 * // For overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> false
 *
 * @example
 * // For adjacent time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }
 * )
 * //=> false
 *
 * @example
 * // Using the inclusive option:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },
 *   { inclusive: true }
 * )
 * //=> true
 */
function areIntervalsOverlapping(intervalLeft, intervalRight, options) {
  const [leftStartTime, leftEndTime] = [
    +(0, _index.toDate)(intervalLeft.start, options?.in),
    +(0, _index.toDate)(intervalLeft.end, options?.in),
  ].sort((a, b) => a - b);
  const [rightStartTime, rightEndTime] = [
    +(0, _index.toDate)(intervalRight.start, options?.in),
    +(0, _index.toDate)(intervalRight.end, options?.in),
  ].sort((a, b) => a - b);

  if (options?.inclusive)
    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;

  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
}

--- FILE: ./node_modules/date-fns/areIntervalsOverlapping.d.ts ---
import type { ContextOptions, Interval } from "./types.js";
/**
 * The {@link areIntervalsOverlapping} function options.
 */
export interface AreIntervalsOverlappingOptions extends ContextOptions<Date> {
  /** Whether the comparison is inclusive or not */
  inclusive?: boolean;
}
/**
 * @name areIntervalsOverlapping
 * @category Interval Helpers
 * @summary Is the given time interval overlapping with another time interval?
 *
 * @description
 * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - The object with options
 *
 * @returns Whether the time intervals are overlapping
 *
 * @example
 * // For overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> false
 *
 * @example
 * // For adjacent time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }
 * )
 * //=> false
 *
 * @example
 * // Using the inclusive option:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },
 *   { inclusive: true }
 * )
 * //=> true
 */
export declare function areIntervalsOverlapping(
  intervalLeft: Interval,
  intervalRight: Interval,
  options?: AreIntervalsOverlappingOptions,
): boolean;

--- FILE: ./node_modules/date-fns/areIntervalsOverlapping.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link areIntervalsOverlapping} function options.
 */

/**
 * @name areIntervalsOverlapping
 * @category Interval Helpers
 * @summary Is the given time interval overlapping with another time interval?
 *
 * @description
 * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - The object with options
 *
 * @returns Whether the time intervals are overlapping
 *
 * @example
 * // For overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> false
 *
 * @example
 * // For adjacent time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }
 * )
 * //=> false
 *
 * @example
 * // Using the inclusive option:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },
 *   { inclusive: true }
 * )
 * //=> true
 */
export function areIntervalsOverlapping(intervalLeft, intervalRight, options) {
  const [leftStartTime, leftEndTime] = [
    +toDate(intervalLeft.start, options?.in),
    +toDate(intervalLeft.end, options?.in),
  ].sort((a, b) => a - b);
  const [rightStartTime, rightEndTime] = [
    +toDate(intervalRight.start, options?.in),
    +toDate(intervalRight.end, options?.in),
  ].sort((a, b) => a - b);

  if (options?.inclusive)
    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;

  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
}

// Fallback for modularized imports:
export default areIntervalsOverlapping;

--- FILE: ./node_modules/date-fns/cdn.js ---
(() => {
function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _callSuper(t, o, e) {return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {try {var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));} catch (t) {}return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {return !!t;})();}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _toArray(arr) {return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _iterableToArrayLimit(r, l) {var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];if (null != t) {var e,n,i,u,a = [],f = !0,o = !1;try {if (i = (t = t.call(r)).next, 0 === l) {if (Object(t) !== t) return;f = !1;} else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);} catch (r) {o = !0, n = r;} finally {try {if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;} finally {if (o) throw n;}}return a;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : String(i);}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}var __defProp = Object.defineProperty;
var __export = function __export(target, all) {
  for (var name in all)
  __defProp(target, name, {
    get: all[name],
    enumerable: true,
    configurable: true,
    set: function set(newValue) {return all[name] = function () {return newValue;};}
  });
};

// lib/index.js
var exports_lib = {};
__export(exports_lib, {
  yearsToQuarters: function yearsToQuarters() {return _yearsToQuarters;},
  yearsToMonths: function yearsToMonths() {return _yearsToMonths;},
  yearsToDays: function yearsToDays() {return _yearsToDays;},
  weeksToDays: function weeksToDays() {return _weeksToDays;},
  transpose: function transpose() {return _transpose;},
  toDate: function toDate() {return _toDate;},
  subYears: function subYears() {return _subYears;},
  subWeeks: function subWeeks() {return _subWeeks;},
  subSeconds: function subSeconds() {return _subSeconds;},
  subQuarters: function subQuarters() {return _subQuarters;},
  subMonths: function subMonths() {return _subMonths;},
  subMinutes: function subMinutes() {return _subMinutes;},
  subMilliseconds: function subMilliseconds() {return _subMilliseconds;},
  subISOWeekYears: function subISOWeekYears() {return _subISOWeekYears;},
  subHours: function subHours() {return _subHours;},
  subDays: function subDays() {return _subDays;},
  subBusinessDays: function subBusinessDays() {return _subBusinessDays;},
  sub: function sub() {return _sub;},
  startOfYesterday: function startOfYesterday() {return _startOfYesterday;},
  startOfYear: function startOfYear() {return _startOfYear;},
  startOfWeekYear: function startOfWeekYear() {return _startOfWeekYear;},
  startOfWeek: function startOfWeek() {return _startOfWeek;},
  startOfTomorrow: function startOfTomorrow() {return _startOfTomorrow;},
  startOfToday: function startOfToday() {return _startOfToday;},
  startOfSecond: function startOfSecond() {return _startOfSecond;},
  startOfQuarter: function startOfQuarter() {return _startOfQuarter;},
  startOfMonth: function startOfMonth() {return _startOfMonth;},
  startOfMinute: function startOfMinute() {return _startOfMinute;},
  startOfISOWeekYear: function startOfISOWeekYear() {return _startOfISOWeekYear;},
  startOfISOWeek: function startOfISOWeek() {return _startOfISOWeek;},
  startOfHour: function startOfHour() {return _startOfHour;},
  startOfDecade: function startOfDecade() {return _startOfDecade;},
  startOfDay: function startOfDay() {return _startOfDay;},
  setYear: function setYear() {return _setYear;},
  setWeekYear: function setWeekYear() {return _setWeekYear;},
  setWeek: function setWeek() {return _setWeek;},
  setSeconds: function setSeconds() {return _setSeconds;},
  setQuarter: function setQuarter() {return _setQuarter;},
  setMonth: function setMonth() {return _setMonth;},
  setMinutes: function setMinutes() {return _setMinutes;},
  setMilliseconds: function setMilliseconds() {return _setMilliseconds;},
  setISOWeekYear: function setISOWeekYear() {return _setISOWeekYear;},
  setISOWeek: function setISOWeek() {return _setISOWeek;},
  setISODay: function setISODay() {return _setISODay;},
  setHours: function setHours() {return _setHours;},
  setDefaultOptions: function setDefaultOptions() {return setDefaultOptions2;},
  setDayOfYear: function setDayOfYear() {return _setDayOfYear;},
  setDay: function setDay() {return _setDay;},
  setDate: function setDate() {return _setDate;},
  set: function set() {return _set;},
  secondsToMinutes: function secondsToMinutes() {return _secondsToMinutes;},
  secondsToMilliseconds: function secondsToMilliseconds() {return _secondsToMilliseconds;},
  secondsToHours: function secondsToHours() {return _secondsToHours;},
  roundToNearestMinutes: function roundToNearestMinutes() {return _roundToNearestMinutes;},
  roundToNearestHours: function roundToNearestHours() {return _roundToNearestHours;},
  quartersToYears: function quartersToYears() {return _quartersToYears;},
  quartersToMonths: function quartersToMonths() {return _quartersToMonths;},
  previousWednesday: function previousWednesday() {return _previousWednesday;},
  previousTuesday: function previousTuesday() {return _previousTuesday;},
  previousThursday: function previousThursday() {return _previousThursday;},
  previousSunday: function previousSunday() {return _previousSunday;},
  previousSaturday: function previousSaturday() {return _previousSaturday;},
  previousMonday: function previousMonday() {return _previousMonday;},
  previousFriday: function previousFriday() {return _previousFriday;},
  previousDay: function previousDay() {return _previousDay;},
  parsers: function parsers() {return _parsers;},
  parseJSON: function parseJSON() {return _parseJSON;},
  parseISO: function parseISO() {return _parseISO;},
  parse: function parse() {return _parse;},
  nextWednesday: function nextWednesday() {return _nextWednesday;},
  nextTuesday: function nextTuesday() {return _nextTuesday;},
  nextThursday: function nextThursday() {return _nextThursday;},
  nextSunday: function nextSunday() {return _nextSunday;},
  nextSaturday: function nextSaturday() {return _nextSaturday;},
  nextMonday: function nextMonday() {return _nextMonday;},
  nextFriday: function nextFriday() {return _nextFriday;},
  nextDay: function nextDay() {return _nextDay;},
  monthsToYears: function monthsToYears() {return _monthsToYears;},
  monthsToQuarters: function monthsToQuarters() {return _monthsToQuarters;},
  minutesToSeconds: function minutesToSeconds() {return _minutesToSeconds;},
  minutesToMilliseconds: function minutesToMilliseconds() {return _minutesToMilliseconds;},
  minutesToHours: function minutesToHours() {return _minutesToHours;},
  min: function min() {return _min;},
  millisecondsToSeconds: function millisecondsToSeconds() {return _millisecondsToSeconds;},
  millisecondsToMinutes: function millisecondsToMinutes() {return _millisecondsToMinutes;},
  millisecondsToHours: function millisecondsToHours() {return _millisecondsToHours;},
  milliseconds: function milliseconds() {return _milliseconds;},
  max: function max() {return _max;},
  longFormatters: function longFormatters() {return _longFormatters;},
  lightFormatters: function lightFormatters() {return _lightFormatters;},
  lightFormat: function lightFormat() {return _lightFormat;},
  lastDayOfYear: function lastDayOfYear() {return _lastDayOfYear;},
  lastDayOfWeek: function lastDayOfWeek() {return _lastDayOfWeek;},
  lastDayOfQuarter: function lastDayOfQuarter() {return _lastDayOfQuarter;},
  lastDayOfMonth: function lastDayOfMonth() {return _lastDayOfMonth;},
  lastDayOfISOWeekYear: function lastDayOfISOWeekYear() {return _lastDayOfISOWeekYear;},
  lastDayOfISOWeek: function lastDayOfISOWeek() {return _lastDayOfISOWeek;},
  lastDayOfDecade: function lastDayOfDecade() {return _lastDayOfDecade;},
  isYesterday: function isYesterday() {return _isYesterday;},
  isWithinInterval: function isWithinInterval() {return _isWithinInterval;},
  isWeekend: function isWeekend() {return _isWeekend;},
  isWednesday: function isWednesday() {return _isWednesday;},
  isValid: function isValid() {return _isValid;},
  isTuesday: function isTuesday() {return _isTuesday;},
  isTomorrow: function isTomorrow() {return _isTomorrow;},
  isToday: function isToday() {return _isToday;},
  isThursday: function isThursday() {return _isThursday;},
  isThisYear: function isThisYear() {return _isThisYear;},
  isThisWeek: function isThisWeek() {return _isThisWeek;},
  isThisSecond: function isThisSecond() {return _isThisSecond;},
  isThisQuarter: function isThisQuarter() {return _isThisQuarter;},
  isThisMonth: function isThisMonth() {return _isThisMonth;},
  isThisMinute: function isThisMinute() {return _isThisMinute;},
  isThisISOWeek: function isThisISOWeek() {return _isThisISOWeek;},
  isThisHour: function isThisHour() {return _isThisHour;},
  isSunday: function isSunday() {return _isSunday;},
  isSaturday: function isSaturday() {return _isSaturday;},
  isSameYear: function isSameYear() {return _isSameYear;},
  isSameWeek: function isSameWeek() {return _isSameWeek;},
  isSameSecond: function isSameSecond() {return _isSameSecond;},
  isSameQuarter: function isSameQuarter() {return _isSameQuarter;},
  isSameMonth: function isSameMonth() {return _isSameMonth;},
  isSameMinute: function isSameMinute() {return _isSameMinute;},
  isSameISOWeekYear: function isSameISOWeekYear() {return _isSameISOWeekYear;},
  isSameISOWeek: function isSameISOWeek() {return _isSameISOWeek;},
  isSameHour: function isSameHour() {return _isSameHour;},
  isSameDay: function isSameDay() {return _isSameDay;},
  isPast: function isPast() {return _isPast;},
  isMonday: function isMonday() {return _isMonday;},
  isMatch: function isMatch() {return _isMatch;},
  isLeapYear: function isLeapYear() {return _isLeapYear;},
  isLastDayOfMonth: function isLastDayOfMonth() {return _isLastDayOfMonth;},
  isFuture: function isFuture() {return _isFuture;},
  isFriday: function isFriday() {return _isFriday;},
  isFirstDayOfMonth: function isFirstDayOfMonth() {return _isFirstDayOfMonth;},
  isExists: function isExists() {return _isExists;},
  isEqual: function isEqual() {return _isEqual;},
  isDate: function isDate() {return _isDate;},
  isBefore: function isBefore() {return _isBefore;},
  isAfter: function isAfter() {return _isAfter;},
  intlFormatDistance: function intlFormatDistance() {return _intlFormatDistance;},
  intlFormat: function intlFormat() {return _intlFormat;},
  intervalToDuration: function intervalToDuration() {return _intervalToDuration;},
  interval: function interval() {return _interval;},
  hoursToSeconds: function hoursToSeconds() {return _hoursToSeconds;},
  hoursToMinutes: function hoursToMinutes() {return _hoursToMinutes;},
  hoursToMilliseconds: function hoursToMilliseconds() {return _hoursToMilliseconds;},
  getYear: function getYear() {return _getYear;},
  getWeeksInMonth: function getWeeksInMonth() {return _getWeeksInMonth;},
  getWeekYear: function getWeekYear() {return _getWeekYear;},
  getWeekOfMonth: function getWeekOfMonth() {return _getWeekOfMonth;},
  getWeek: function getWeek() {return _getWeek;},
  getUnixTime: function getUnixTime() {return _getUnixTime;},
  getTime: function getTime() {return _getTime;},
  getSeconds: function getSeconds() {return _getSeconds;},
  getQuarter: function getQuarter() {return _getQuarter;},
  getOverlappingDaysInIntervals: function getOverlappingDaysInIntervals() {return _getOverlappingDaysInIntervals;},
  getMonth: function getMonth() {return _getMonth;},
  getMinutes: function getMinutes() {return _getMinutes;},
  getMilliseconds: function getMilliseconds() {return _getMilliseconds;},
  getISOWeeksInYear: function getISOWeeksInYear() {return _getISOWeeksInYear;},
  getISOWeekYear: function getISOWeekYear() {return _getISOWeekYear;},
  getISOWeek: function getISOWeek() {return _getISOWeek;},
  getISODay: function getISODay() {return _getISODay;},
  getHours: function getHours() {return _getHours;},
  getDefaultOptions: function getDefaultOptions() {return getDefaultOptions2;},
  getDecade: function getDecade() {return _getDecade;},
  getDaysInYear: function getDaysInYear() {return _getDaysInYear;},
  getDaysInMonth: function getDaysInMonth() {return _getDaysInMonth;},
  getDayOfYear: function getDayOfYear() {return _getDayOfYear;},
  getDay: function getDay() {return _getDay;},
  getDate: function getDate() {return _getDate;},
  fromUnixTime: function fromUnixTime() {return _fromUnixTime;},
  formatters: function formatters() {return _formatters;},
  formatRelative: function formatRelative() {return formatRelative3;},
  formatRFC7231: function formatRFC7231() {return _formatRFC;},
  formatRFC3339: function formatRFC3339() {return _formatRFC2;},
  formatISODuration: function formatISODuration() {return _formatISODuration;},
  formatISO9075: function formatISO9075() {return _formatISO;},
  formatISO: function formatISO() {return _formatISO2;},
  formatDuration: function formatDuration() {return _formatDuration;},
  formatDistanceToNowStrict: function formatDistanceToNowStrict() {return _formatDistanceToNowStrict;},
  formatDistanceToNow: function formatDistanceToNow() {return _formatDistanceToNow;},
  formatDistanceStrict: function formatDistanceStrict() {return _formatDistanceStrict;},
  formatDistance: function formatDistance() {return formatDistance3;},
  formatDate: function formatDate() {return _format;},
  format: function format() {return _format;},
  endOfYesterday: function endOfYesterday() {return _endOfYesterday;},
  endOfYear: function endOfYear() {return _endOfYear;},
  endOfWeek: function endOfWeek() {return _endOfWeek;},
  endOfTomorrow: function endOfTomorrow() {return _endOfTomorrow;},
  endOfToday: function endOfToday() {return _endOfToday;},
  endOfSecond: function endOfSecond() {return _endOfSecond;},
  endOfQuarter: function endOfQuarter() {return _endOfQuarter;},
  endOfMonth: function endOfMonth() {return _endOfMonth;},
  endOfMinute: function endOfMinute() {return _endOfMinute;},
  endOfISOWeekYear: function endOfISOWeekYear() {return _endOfISOWeekYear;},
  endOfISOWeek: function endOfISOWeek() {return _endOfISOWeek;},
  endOfHour: function endOfHour() {return _endOfHour;},
  endOfDecade: function endOfDecade() {return _endOfDecade;},
  endOfDay: function endOfDay() {return _endOfDay;},
  eachYearOfInterval: function eachYearOfInterval() {return _eachYearOfInterval;},
  eachWeekendOfYear: function eachWeekendOfYear() {return _eachWeekendOfYear;},
  eachWeekendOfMonth: function eachWeekendOfMonth() {return _eachWeekendOfMonth;},
  eachWeekendOfInterval: function eachWeekendOfInterval() {return _eachWeekendOfInterval;},
  eachWeekOfInterval: function eachWeekOfInterval() {return _eachWeekOfInterval;},
  eachQuarterOfInterval: function eachQuarterOfInterval() {return _eachQuarterOfInterval;},
  eachMonthOfInterval: function eachMonthOfInterval() {return _eachMonthOfInterval;},
  eachMinuteOfInterval: function eachMinuteOfInterval() {return _eachMinuteOfInterval;},
  eachHourOfInterval: function eachHourOfInterval() {return _eachHourOfInterval;},
  eachDayOfInterval: function eachDayOfInterval() {return _eachDayOfInterval;},
  differenceInYears: function differenceInYears() {return _differenceInYears;},
  differenceInWeeks: function differenceInWeeks() {return _differenceInWeeks;},
  differenceInSeconds: function differenceInSeconds() {return _differenceInSeconds;},
  differenceInQuarters: function differenceInQuarters() {return _differenceInQuarters;},
  differenceInMonths: function differenceInMonths() {return _differenceInMonths;},
  differenceInMinutes: function differenceInMinutes() {return _differenceInMinutes;},
  differenceInMilliseconds: function differenceInMilliseconds() {return _differenceInMilliseconds;},
  differenceInISOWeekYears: function differenceInISOWeekYears() {return _differenceInISOWeekYears;},
  differenceInHours: function differenceInHours() {return _differenceInHours;},
  differenceInDays: function differenceInDays() {return _differenceInDays;},
  differenceInCalendarYears: function differenceInCalendarYears() {return _differenceInCalendarYears;},
  differenceInCalendarWeeks: function differenceInCalendarWeeks() {return _differenceInCalendarWeeks;},
  differenceInCalendarQuarters: function differenceInCalendarQuarters() {return _differenceInCalendarQuarters;},
  differenceInCalendarMonths: function differenceInCalendarMonths() {return _differenceInCalendarMonths;},
  differenceInCalendarISOWeeks: function differenceInCalendarISOWeeks() {return _differenceInCalendarISOWeeks;},
  differenceInCalendarISOWeekYears: function differenceInCalendarISOWeekYears() {return _differenceInCalendarISOWeekYears;},
  differenceInCalendarDays: function differenceInCalendarDays() {return _differenceInCalendarDays;},
  differenceInBusinessDays: function differenceInBusinessDays() {return _differenceInBusinessDays;},
  daysToWeeks: function daysToWeeks() {return _daysToWeeks;},
  constructNow: function constructNow() {return _constructNow;},
  constructFrom: function constructFrom() {return _constructFrom;},
  compareDesc: function compareDesc() {return _compareDesc;},
  compareAsc: function compareAsc() {return _compareAsc;},
  closestTo: function closestTo() {return _closestTo;},
  closestIndexTo: function closestIndexTo() {return _closestIndexTo;},
  clamp: function clamp() {return _clamp;},
  areIntervalsOverlapping: function areIntervalsOverlapping() {return _areIntervalsOverlapping;},
  addYears: function addYears() {return _addYears;},
  addWeeks: function addWeeks() {return _addWeeks;},
  addSeconds: function addSeconds() {return _addSeconds;},
  addQuarters: function addQuarters() {return _addQuarters;},
  addMonths: function addMonths() {return _addMonths;},
  addMinutes: function addMinutes() {return _addMinutes;},
  addMilliseconds: function addMilliseconds() {return _addMilliseconds;},
  addISOWeekYears: function addISOWeekYears() {return _addISOWeekYears;},
  addHours: function addHours() {return _addHours;},
  addDays: function addDays() {return _addDays;},
  addBusinessDays: function addBusinessDays() {return _addBusinessDays;},
  add: function add() {return _add;}
});

// lib/constants.js
var daysInWeek = 7;
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;
var minTime = -maxTime;
var millisecondsInWeek = 604800000;
var millisecondsInDay = 86400000;
var millisecondsInMinute = 60000;
var millisecondsInHour = 3600000;
var millisecondsInSecond = 1000;
var minutesInYear = 525600;
var minutesInMonth = 43200;
var minutesInDay = 1440;
var minutesInHour = 60;
var monthsInQuarter = 3;
var monthsInYear = 12;
var quartersInYear = 4;
var secondsInHour = 3600;
var secondsInMinute = 60;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;
var constructFromSymbol = Symbol.for("constructDateFrom");

// lib/constructFrom.js
function _constructFrom(date, value) {
  if (typeof date === "function")
  return date(value);
  if (date && _typeof(date) === "object" && constructFromSymbol in date)
  return date[constructFromSymbol](value);
  if (date instanceof Date)
  return new date.constructor(value);
  return new Date(value);
}

// lib/toDate.js
function _toDate(argument, context) {
  return _constructFrom(context || argument, argument);
}

// lib/addDays.js
function _addDays(date, amount, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  if (isNaN(amount))
  return _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, NaN);
  if (!amount)
  return _date;
  _date.setDate(_date.getDate() + amount);
  return _date;
}

// lib/addMonths.js
function _addMonths(date, amount, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  if (isNaN(amount))
  return _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, NaN);
  if (!amount) {
    return _date;
  }
  var dayOfMonth = _date.getDate();
  var endOfDesiredMonth = _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    _date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return _date;
  }
}

// lib/add.js
function _add(date, duration, options) {
  var _duration$years =







    duration.years,years = _duration$years === void 0 ? 0 : _duration$years,_duration$months = duration.months,months = _duration$months === void 0 ? 0 : _duration$months,_duration$weeks = duration.weeks,weeks = _duration$weeks === void 0 ? 0 : _duration$weeks,_duration$days = duration.days,days = _duration$days === void 0 ? 0 : _duration$days,_duration$hours = duration.hours,hours = _duration$hours === void 0 ? 0 : _duration$hours,_duration$minutes = duration.minutes,minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,_duration$seconds = duration.seconds,seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  var dateWithMonths = months || years ? _addMonths(_date, months + years * 12) : _date;
  var dateWithDays = days || weeks ? _addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1000;
  return _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, +dateWithDays + msToAdd);
}
// lib/isSaturday.js
function _isSaturday(date, options) {
  return _toDate(date, options === null || options === void 0 ? void 0 : options.in).getDay() === 6;
}

// lib/isSunday.js
function _isSunday(date, options) {
  return _toDate(date, options === null || options === void 0 ? void 0 : options.in).getDay() === 0;
}

// lib/isWeekend.js
function _isWeekend(date, options) {
  var day = _toDate(date, options === null || options === void 0 ? void 0 : options.in).getDay();
  return day === 0 || day === 6;
}

// lib/addBusinessDays.js
function _addBusinessDays(date, amount, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  var startedOnWeekend = _isWeekend(_date, options);
  if (isNaN(amount))
  return _constructFrom(options === null || options === void 0 ? void 0 : options.in, NaN);
  var hours = _date.getHours();
  var sign = amount < 0 ? -1 : 1;
  var fullWeeks = Math.trunc(amount / 5);
  _date.setDate(_date.getDate() + fullWeeks * 7);
  var restDays = Math.abs(amount % 5);
  while (restDays > 0) {
    _date.setDate(_date.getDate() + sign);
    if (!_isWeekend(_date, options))
    restDays -= 1;
  }
  if (startedOnWeekend && _isWeekend(_date, options) && amount !== 0) {
    if (_isSaturday(_date, options))
    _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));
    if (_isSunday(_date, options))
    _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));
  }
  _date.setHours(hours);
  return _date;
}
// lib/addMilliseconds.js
function _addMilliseconds(date, amount, options) {
  return _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, +_toDate(date) + amount);
}

// lib/addHours.js
function _addHours(date, amount, options) {
  return _addMilliseconds(date, amount * millisecondsInHour, options);
}
// lib/_lib/defaultOptions.js
function getDefaultOptions() {
  return defaultOptions;
}
function setDefaultOptions(newOptions) {
  defaultOptions = newOptions;
}
var defaultOptions = {};

// lib/startOfWeek.js
function _startOfWeek(date, options) {var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _defaultOptions3$loca;
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = (_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 || (_options$locale = options.locale) === null || _options$locale === void 0 || (_options$locale = _options$locale.options) === null || _options$locale === void 0 ? void 0 : _options$locale.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions3$loca = defaultOptions3.locale) === null || _defaultOptions3$loca === void 0 || (_defaultOptions3$loca = _defaultOptions3$loca.options) === null || _defaultOptions3$loca === void 0 ? void 0 : _defaultOptions3$loca.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0;
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  var day = _date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// lib/startOfISOWeek.js
function _startOfISOWeek(date, options) {
  return _startOfWeek(date, _objectSpread(_objectSpread({}, options), {}, { weekStartsOn: 1 }));
}

// lib/getISOWeekYear.js
function _getISOWeekYear(date, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  var year = _date.getFullYear();
  var fourthOfJanuaryOfNextYear = _constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = _startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = _constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = _startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// lib/_lib/getTimezoneOffsetInMilliseconds.js
function getTimezoneOffsetInMilliseconds(date) {
  var _date = _toDate(date);
  var utcDate = new Date(Date.UTC(_date.getFullYear(), _date.getMonth(), _date.getDate(), _date.getHours(), _date.getMinutes(), _date.getSeconds(), _date.getMilliseconds()));
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}

// lib/_lib/normalizeDates.js
function normalizeDates(context) {for (var _len = arguments.length, dates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {dates[_key - 1] = arguments[_key];}
  var normalize = _constructFrom.bind(null, context || dates.find(function (date) {return _typeof(date) === "object";}));
  return dates.map(normalize);
}

// lib/startOfDay.js
function _startOfDay(date, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// lib/differenceInCalendarDays.js
function _differenceInCalendarDays(laterDate, earlierDate, options) {
  var _normalizeDates = normalizeDates(options === null || options === void 0 ? void 0 : options.in, laterDate, earlierDate),_normalizeDates2 = _slicedToArray(_normalizeDates, 2),laterDate_ = _normalizeDates2[0],earlierDate_ = _normalizeDates2[1];
  var laterStartOfDay = _startOfDay(laterDate_);
  var earlierStartOfDay = _startOfDay(earlierDate_);
  var laterTimestamp = +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);
  var earlierTimestamp = +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);
  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);
}

// lib/startOfISOWeekYear.js
function _startOfISOWeekYear(date, options) {
  var year = _getISOWeekYear(date, options);
  var fourthOfJanuary = _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return _startOfISOWeek(fourthOfJanuary);
}

// lib/setISOWeekYear.js
function _setISOWeekYear(date, weekYear, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  var diff = _differenceInCalendarDays(_date, _startOfISOWeekYear(_date, options));
  var fourthOfJanuary = _constructFrom((options === null || options === void 0 ? void 0 : options.in) || date, 0);
  fourthOfJanuary.setFullYear(weekYear, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  _date = _startOfISOWeekYear(fourthOfJanuary);
  _date.setDate(_date.getDate() + diff);
  return _date;
}

// lib/addISOWeekYears.js
function _addISOWeekYears(date, amount, options) {
  return _setISOWeekYear(date, _getISOWeekYear(date, options) + amount, options);
}
// lib/addMinutes.js
function _addMinutes(date, amount, options) {
  var _date = _toDate(date, options === null || options === void 0 ? void 0 : options.in);
  _date.setTime(_date.getTime() + amount * millisecondsInMinute);
  return _date;
}
// lib/addQuarters.js
function _addQuarters(date, amount, options) {
  return _addMonths(date, amount * 3, options);
}
// lib/addSeconds.js
function _addSeconds(date, amount, options) {
  return _addMilliseconds(date, amount * 1000, options);
}
// lib/addWeeks.js
function _addWeeks(date, amount, options) {
  return _addDays(date, amount * 7, options);
}
// lib/addYears.js
function _addYears(date, amount, options) {
  return _addMonths(date, amount * 12, options);
}
// lib/areIntervalsOverlapping.js
function _areIntervalsOverlapping(intervalLeft, intervalRight, options) {
  var _sort = [
    +_toDate(intervalLeft.start, options === null || options === void 0 ? void 0 : options.in),
    +_toDate(intervalLeft.end, options === null || options === void 0 ? void 0 : options.in)].
    sort(function (a, b) {return a - b;}),_sort2 = _slicedToArray(_sort, 2),leftStartTime = _sort2[0],leftEndTime = _sort2[1];
  var _sort3 = [
    +_toDate(intervalRight.start, options === null || options === void 0 ? void 0 : options.in),
    +_toDate(intervalRight.end, options === null || options === void 0 ? void 0 : options.in)].
    sort(function (a, b) {return a - b;}),_sort4 = _slicedToArray(_sort3, 2),rightStartTime = _sort4[0],rightEndTime = _sort4[1];
  if (options !== null && options !== void 0 && options.inclusive)
  return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;
  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
}
// lib/max.js
function _max(dates, options) {
  var result;
  var context = options === null || options === void 0 ? void 0 : options.in;
  dates.forEach(function (date) {
    if (!context && _typeof(date) === "object")
    context = _constructFrom.bind(null, date);
    var date_ = _toDate(date, context);
    if (!result || result < date_ || isNaN(+date_))
    result = date_;
  });
  return _constructFrom(context, result || NaN);
}

// lib/min.js
function _min(dates, options) {
  var result;
  var context = options === null || options === void 0 ? void 0 : options.in;
  dates.forEach(function (date) {
    if (!context && _typeof(date) === "object")
    context = _constructFrom.bind(null, date);
    var date_ = _toDate(date, context);
    if (!result || result > date_ || isNaN(+date_))
    result = date_;
  });
  return _constructFrom(context, result || NaN);
}

// lib/clamp.js
function _clamp(date, interval, options) {
  var _normalizeDates3 = normalizeDates(options === null || options === void 0 ? void 0 : options.in, date, interval.start, interval.end),_normalizeDates4 = _slicedToArray(_normalizeDates3, 3),date_ = _normalizeDates4[0],start = _normalizeDates4[1],end = _normalizeDates4[2];
  return _min([_max([date_, start], options), end], options);
}
// lib/closestIndexTo.js
function _closestIndexTo(dateToCompare, dates) {
  var timeToCompare = +_toDate(dateToCompare);
  if (isNaN(timeToCompare))
  return NaN;
  var result;
  var minDistance;
  dates.forEach(function (date, index) {
    var date_ = _toDate(date);
    if (isNaN(+date_)) {
      result = NaN;
      minDistance = NaN;
      return;
    }
    var distance = Math.abs(timeToCompare - +date_);
    if (result == null || distance < minDistance) {
      result = index;
      minDistance = distance;
    }

--- FILE: ./node_modules/date-fns/cdn.min.js ---
(()=>{function SX(K,G){var X=typeof Symbol!=="undefined"&&K[Symbol.iterator]||K["@@iterator"];if(!X){if(Array.isArray(K)||(X=DG(K))||G&&K&&typeof K.length==="number"){if(X)K=X;var B=0,U=function q(){};return{s:U,n:function q(){if(B>=K.length)return{done:!0};return{done:!1,value:K[B++]}},e:function q(Q){throw Q},f:U}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var Z=!0,j=!1,J;return{s:function q(){X=X.call(K)},n:function q(){var Q=X.next();return Z=Q.done,Q},e:function q(Q){j=!0,J=Q},f:function q(){try{if(!Z&&X.return!=null)X.return()}finally{if(j)throw J}}}}function W(K,G,X){return G=OG(G),JK(K,hX()?Reflect.construct(G,X||[],OG(K).constructor):G.apply(K,X))}function JK(K,G){if(G&&(n(G)==="object"||typeof G==="function"))return G;else if(G!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return R(K)}function R(K){if(K===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return K}function hX(){try{var K=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(G){}return(hX=function G(){return!!K})()}function OG(K){return OG=Object.setPrototypeOf?Object.getPrototypeOf.bind():function G(X){return X.__proto__||Object.getPrototypeOf(X)},OG(K)}function z(K,G){if(typeof G!=="function"&&G!==null)throw new TypeError("Super expression must either be null or a function");if(K.prototype=Object.create(G&&G.prototype,{constructor:{value:K,writable:!0,configurable:!0}}),Object.defineProperty(K,"prototype",{writable:!1}),G)BX(K,G)}function BX(K,G){return BX=Object.setPrototypeOf?Object.setPrototypeOf.bind():function X(B,U){return B.__proto__=U,B},BX(K,G)}function Y(K,G){if(!(K instanceof G))throw new TypeError("Cannot call a class as a function")}function yX(K,G){for(var X=0;X<G.length;X++){var B=G[X];if(B.enumerable=B.enumerable||!1,B.configurable=!0,"value"in B)B.writable=!0;Object.defineProperty(K,cX(B.key),B)}}function I(K,G,X){if(G)yX(K.prototype,G);if(X)yX(K,X);return Object.defineProperty(K,"prototype",{writable:!1}),K}function UX(K){return QK(K)||kX(K)||DG(K)||qK()}function qK(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function QK(K){if(Array.isArray(K))return ZX(K)}function HK(K){return fX(K)||kX(K)||DG(K)||gX()}function kX(K){if(typeof Symbol!=="undefined"&&K[Symbol.iterator]!=null||K["@@iterator"]!=null)return Array.from(K)}function $(K,G){return fX(K)||NK(K,G)||DG(K,G)||gX()}function gX(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function DG(K,G){if(!K)return;if(typeof K==="string")return ZX(K,G);var X=Object.prototype.toString.call(K).slice(8,-1);if(X==="Object"&&K.constructor)X=K.constructor.name;if(X==="Map"||X==="Set")return Array.from(K);if(X==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(X))return ZX(K,G)}function ZX(K,G){if(G==null||G>K.length)G=K.length;for(var X=0,B=new Array(G);X<G;X++)B[X]=K[X];return B}function NK(K,G){var X=K==null?null:typeof Symbol!="undefined"&&K[Symbol.iterator]||K["@@iterator"];if(X!=null){var B,U,Z,j,J=[],q=!0,Q=!1;try{if(Z=(X=X.call(K)).next,G===0){if(Object(X)!==X)return;q=!1}else for(;!(q=(B=Z.call(X)).done)&&(J.push(B.value),J.length!==G);q=!0);}catch(H){Q=!0,U=H}finally{try{if(!q&&X.return!=null&&(j=X.return(),Object(j)!==j))return}finally{if(Q)throw U}}return J}}function fX(K){if(Array.isArray(K))return K}function mX(K,G){var X=Object.keys(K);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(K);G&&(B=B.filter(function(U){return Object.getOwnPropertyDescriptor(K,U).enumerable})),X.push.apply(X,B)}return X}function s(K){for(var G=1;G<arguments.length;G++){var X=arguments[G]!=null?arguments[G]:{};G%2?mX(Object(X),!0).forEach(function(B){E(K,B,X[B])}):Object.getOwnPropertyDescriptors?Object.defineProperties(K,Object.getOwnPropertyDescriptors(X)):mX(Object(X)).forEach(function(B){Object.defineProperty(K,B,Object.getOwnPropertyDescriptor(X,B))})}return K}function E(K,G,X){if(G=cX(G),G in K)Object.defineProperty(K,G,{value:X,enumerable:!0,configurable:!0,writable:!0});else K[G]=X;return K}function cX(K){var G=VK(K,"string");return n(G)=="symbol"?G:String(G)}function VK(K,G){if(n(K)!="object"||!K)return K;var X=K[Symbol.toPrimitive];if(X!==void 0){var B=X.call(K,G||"default");if(n(B)!="object")return B;throw new TypeError("@@toPrimitive must return a primitive value.")}return(G==="string"?String:Number)(K)}function n(K){return n=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(G){return typeof G}:function(G){return G&&typeof Symbol=="function"&&G.constructor===Symbol&&G!==Symbol.prototype?"symbol":typeof G},n(K)}var xK=Object.defineProperty,EK=function K(G,X){for(var B in X)xK(G,B,{get:X[B],enumerable:!0,configurable:!0,set:function U(Z){return X[B]=function(){return Z}}})},uX={};EK(uX,{yearsToQuarters:function K(){return HJ},yearsToMonths:function K(){return QJ},yearsToDays:function K(){return qJ},weeksToDays:function K(){return JJ},transpose:function K(){return h0},toDate:function K(){return N},subYears:function K(){return jJ},subWeeks:function K(){return ZJ},subSeconds:function K(){return UJ},subQuarters:function K(){return BJ},subMonths:function K(){return t0},subMinutes:function K(){return KJ},subMilliseconds:function K(){return XJ},subISOWeekYears:function K(){return x0},subHours:function K(){return GJ},subDays:function K(){return oG},subBusinessDays:function K(){return tj},sub:function K(){return ej},startOfYesterday:function K(){return oj},startOfYear:function K(){return LX},startOfWeekYear:function K(){return rG},startOfWeek:function K(){return _},startOfTomorrow:function K(){return aj},startOfToday:function K(){return nj},startOfSecond:function K(){return $X},startOfQuarter:function K(){return EG},startOfMonth:function K(){return pG},startOfMinute:function K(){return zX},startOfISOWeekYear:function K(){return QG},startOfISOWeek:function K(){return a},startOfHour:function K(){return TX},startOfDecade:function K(){return sj},startOfDay:function K(){return wG},setYear:function K(){return ij},setWeekYear:function K(){return rj},setWeek:function K(){return m0},setSeconds:function K(){return dj},setQuarter:function K(){return pj},setMonth:function K(){return vX},setMinutes:function K(){return lj},setMilliseconds:function K(){return _j},setISOWeekYear:function K(){return B0},setISOWeek:function K(){return c0},setISODay:function K(){return u0},setHours:function K(){return uj},setDefaultOptions:function K(){return cj},setDayOfYear:function K(){return mj},setDay:function K(){return aG},setDate:function K(){return fj},set:function K(){return gj},secondsToMinutes:function K(){return kj},secondsToMilliseconds:function K(){return yj},secondsToHours:function K(){return hj},roundToNearestMinutes:function K(){return Sj},roundToNearestHours:function K(){return Dj},quartersToYears:function K(){return Oj},quartersToMonths:function K(){return vj},previousWednesday:function K(){return Pj},previousTuesday:function K(){return $j},previousThursday:function K(){return zj},previousSunday:function K(){return Wj},previousSaturday:function K(){return Tj},previousMonday:function K(){return Ij},previousFriday:function K(){return Yj},previousDay:function K(){return VG},parsers:function K(){return _0},parseJSON:function K(){return bj},parseISO:function K(){return jj},parse:function K(){return l0},nextWednesday:function K(){return Zj},nextTuesday:function K(){return Uj},nextThursday:function K(){return Bj},nextSunday:function K(){return Kj},nextSaturday:function K(){return Xj},nextMonday:function K(){return Gj},nextFriday:function K(){return tZ},nextDay:function K(){return NG},monthsToYears:function K(){return eZ},monthsToQuarters:function K(){return oZ},minutesToSeconds:function K(){return aZ},minutesToMilliseconds:function K(){return nZ},minutesToHours:function K(){return sZ},min:function K(){return q0},millisecondsToSeconds:function K(){return iZ},millisecondsToMinutes:function K(){return rZ},millisecondsToHours:function K(){return dZ},milliseconds:function K(){return pZ},max:function K(){return J0},longFormatters:function K(){return iG},lightFormatters:function K(){return GG},lightFormat:function K(){return fZ},lastDayOfYear:function K(){return gZ},lastDayOfWeek:function K(){return o0},lastDayOfQuarter:function K(){return kZ},lastDayOfMonth:function K(){return S0},lastDayOfISOWeekYear:function K(){return yZ},lastDayOfISOWeek:function K(){return hZ},lastDayOfDecade:function K(){return SZ},isYesterday:function K(){return DZ},isWithinInterval:function K(){return OZ},isWeekend:function K(){return FG},isWednesday:function K(){return vZ},isValid:function K(){return UG},isTuesday:function K(){return PZ},isTomorrow:function K(){return $Z},isToday:function K(){return zZ},isThursday:function K(){return WZ},isThisYear:function K(){return TZ},isThisWeek:function K(){return IZ},isThisSecond:function K(){return YZ},isThisQuarter:function K(){return bZ},isThisMonth:function K(){return MZ},isThisMinute:function K(){return CZ},isThisISOWeek:function K(){return wZ},isThisHour:function K(){return FZ},isSunday:function K(){return tX},isSaturday:function K(){return eX},isSameYear:function K(){return a0},isSameWeek:function K(){return WX},isSameSecond:function K(){return n0},isSameQuarter:function K(){return s0},isSameMonth:function K(){return i0},isSameMinute:function K(){return r0},isSameISOWeekYear:function K(){return LZ},isSameISOWeek:function K(){return d0},isSameHour:function K(){return p0},isSameDay:function K(){return WG},isPast:function K(){return AZ},isMonday:function K(){return RZ},isMatch:function K(){return EZ},isLeapYear:function K(){return v0},isLastDayOfMonth:function K(){return E0},isFuture:function K(){return YU},isFriday:function K(){return bU},isFirstDayOfMonth:function K(){return MU},isExists:function K(){return CU},isEqual:function K(){return wU},isDate:function K(){return H0},isBefore:function K(){return FU},isAfter:function K(){return LU},intlFormatDistance:function K(){return AU},intlFormat:function K(){return EU},intervalToDuration:function K(){return xU},interval:function K(){return VU},hoursToSeconds:function K(){return NU},hoursToMinutes:function K(){return HU},hoursToMilliseconds:function K(){return QU},getYear:function K(){return qU},getWeeksInMonth:function K(){return JU},getWeekYear:function K(){return dG},getWeekOfMonth:function K(){return jU},getWeek:function K(){return CX},getUnixTime:function K(){return ZU},getTime:function K(){return UU},getSeconds:function K(){return BU},getQuarter:function K(){return NX},getOverlappingDaysInIntervals:function K(){return KU},getMonth:function K(){return XU},getMinutes:function K(){return GU},getMilliseconds:function K(){return tB},getISOWeeksInYear:function K(){return eB},getISOWeekYear:function K(){return qG},getISOWeek:function K(){return wX},getISODay:function K(){return D0},getHours:function K(){return oB},getDefaultOptions:function K(){return O0},getDecade:function K(){return aB},getDaysInYear:function K(){return nB},getDaysInMonth:function K(){return P0},getDayOfYear:function K(){return w0},getDay:function K(){return sG},getDate:function K(){return $0},fromUnixTime:function K(){return sB},formatters:function K(){return MX},formatRelative:function K(){return iB},formatRFC7231:function K(){return pB},formatRFC3339:function K(){return lB},formatISODuration:function K(){return _B},formatISO9075:function K(){return uB},formatISO:function K(){return cB},formatDuration:function K(){return fB},formatDistanceToNowStrict:function K(){return gB},formatDistanceToNow:function K(){return kB},formatDistanceStrict:function K(){return z0},formatDistance:function K(){return W0},formatDate:function K(){return YX},format:function K(){return YX},endOfYesterday:function K(){return rK},endOfYear:function K(){return L0},endOfWeek:function K(){return F0},endOfTomorrow:function K(){return dK},endOfToday:function K(){return pK},endOfSecond:function K(){return lK},endOfQuarter:function K(){return _K},endOfMonth:function K(){return RX},endOfMinute:function K(){return uK},endOfISOWeekYear:function K(){return cK},endOfISOWeek:function K(){return mK},endOfHour:function K(){return fK},endOfDecade:function K(){return gK},endOfDay:function K(){return EX},eachYearOfInterval:function K(){return kK},eachWeekendOfYear:function K(){return yK},eachWeekendOfMonth:function K(){return hK},eachWeekendOfInterval:function K(){return AX},eachWeekOfInterval:function K(){return SK},eachQuarterOfInterval:function K(){return DK},eachMonthOfInterval:function K(){return OK},eachMinuteOfInterval:function K(){return vK},eachHourOfInterval:function K(){return PK},eachDayOfInterval:function K(){return A0},differenceInYears:function K(){return R0},differenceInWeeks:function K(){return $K},differenceInSeconds:function K(){return CG},differenceInQuarters:function K(){return zK},differenceInMonths:function K(){return lG},differenceInMinutes:function K(){return _G},differenceInMilliseconds:function K(){return xX},differenceInISOWeekYears:function K(){return WK},differenceInHours:function K(){return uG},differenceInDays:function K(){return VX},differenceInCalendarYears:function K(){return zG},differenceInCalendarWeeks:function K(){return cG},differenceInCalendarQuarters:function K(){return mG},differenceInCalendarMonths:function K(){return fG},differenceInCalendarISOWeeks:function K(){return TK},differenceInCalendarISOWeekYears:function K(){return N0},differenceInCalendarDays:function K(){return e},differenceInBusinessDays:function K(){return IK},daysToWeeks:function K(){return YK},constructNow:function K(){return f},constructFrom:function K(){return L},compareDesc:function K(){return bK},compareAsc:function K(){return t},closestTo:function K(){return MK},closestIndexTo:function K(){return Q0},clamp:function K(){return CK},areIntervalsOverlapping:function K(){return wK},addYears:function K(){return j0},addWeeks:function K(){return gG},addSeconds:function K(){return Z0},addQuarters:function K(){return HX},addMonths:function K(){return TG},addMinutes:function K(){return QX},addMilliseconds:function K(){return kG},addISOWeekYears:function K(){return U0},addHours:function K(){return X0},addDays:function K(){return o},addBusinessDays:function K(){return G0},add:function K(){return LG}});var _X=7,SG=365.2425,RK=Math.pow(10,8)*24*60*60*1000,xJ=-RK,IG=604800000,lX=86400000,BG=60000,xG=3600000,jX=1000,pX=525600,AG=43200,hG=1440,dX=60,rX=3,iX=12,sX=4,yG=3600,JX=60,qX=yG*24,AK=qX*7,nX=qX*SG,aX=nX/12,LK=aX*3,oX=Symbol.for("constructDateFrom");function L(K,G){if(typeof K==="function")return K(G);if(K&&n(K)==="object"&&oX in K)return K[oX](G);if(K instanceof Date)return new K.constructor(G);return new Date(G)}function N(K,G){return L(G||K,K)}function o(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);if(isNaN(G))return L((X===null||X===void 0?void 0:X.in)||K,NaN);if(!G)return B;return B.setDate(B.getDate()+G),B}function TG(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);if(isNaN(G))return L((X===null||X===void 0?void 0:X.in)||K,NaN);if(!G)return B;var U=B.getDate(),Z=L((X===null||X===void 0?void 0:X.in)||K,B.getTime());Z.setMonth(B.getMonth()+G+1,0);var j=Z.getDate();if(U>=j)return Z;else return B.setFullYear(Z.getFullYear(),Z.getMonth(),U),B}function LG(K,G,X){var B=G.years,U=B===void 0?0:B,Z=G.months,j=Z===void 0?0:Z,J=G.weeks,q=J===void 0?0:J,Q=G.days,H=Q===void 0?0:Q,V=G.hours,x=V===void 0?0:V,C=G.minutes,w=C===void 0?0:C,M=G.seconds,A=M===void 0?0:M,T=N(K,X===null||X===void 0?void 0:X.in),b=j||U?TG(T,j+U*12):T,v=H||q?o(b,H+q*7):b,D=w+x*60,l=A+D*60,d=l*1000;return L((X===null||X===void 0?void 0:X.in)||K,+v+d)}function eX(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===6}function tX(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===0}function FG(K,G){var X=N(K,G===null||G===void 0?void 0:G.in).getDay();return X===0||X===6}function G0(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=FG(B,X);if(isNaN(G))return L(X===null||X===void 0?void 0:X.in,NaN);var Z=B.getHours(),j=G<0?-1:1,J=Math.trunc(G/5);B.setDate(B.getDate()+J*7);var q=Math.abs(G%5);while(q>0)if(B.setDate(B.getDate()+j),!FG(B,X))q-=1;if(U&&FG(B,X)&&G!==0){if(eX(B,X))B.setDate(B.getDate()+(j<0?2:-1));if(tX(B,X))B.setDate(B.getDate()+(j<0?1:-2))}return B.setHours(Z),B}function kG(K,G,X){return L((X===null||X===void 0?void 0:X.in)||K,+N(K)+G)}function X0(K,G,X){return kG(K,G*xG,X)}function p(){return K0}function FK(K){K0=K}var K0={};function _(K,G){var X,B,U,Z,j,J,q=p(),Q=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.weekStartsOn)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.weekStartsOn)!==null&&U!==void 0?U:q.weekStartsOn)!==null&&B!==void 0?B:(J=q.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.weekStartsOn)!==null&&X!==void 0?X:0,H=N(K,G===null||G===void 0?void 0:G.in),V=H.getDay(),x=(V<Q?7:0)+V-Q;return H.setDate(H.getDate()-x),H.setHours(0,0,0,0),H}function a(K,G){return _(K,s(s({},G),{},{weekStartsOn:1}))}function qG(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=L(X,0);U.setFullYear(B+1,0,4),U.setHours(0,0,0,0);var Z=a(U),j=L(X,0);j.setFullYear(B,0,4),j.setHours(0,0,0,0);var J=a(j);if(X.getTime()>=Z.getTime())return B+1;else if(X.getTime()>=J.getTime())return B;else return B-1}function r(K){var G=N(K),X=new Date(Date.UTC(G.getFullYear(),G.getMonth(),G.getDate(),G.getHours(),G.getMinutes(),G.getSeconds(),G.getMilliseconds()));return X.setUTCFullYear(G.getFullYear()),+K-+X}function O(K){for(var G=arguments.length,X=new Array(G>1?G-1:0),B=1;B<G;B++)X[B-1]=arguments[B];var U=L.bind(null,K||X.find(function(Z){return n(Z)==="object"}));return X.map(U)}function wG(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setHours(0,0,0,0),X}function e(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=wG(Z),q=wG(j),Q=+J-r(J),H=+q-r(q);return Math.round((Q-H)/lX)}function QG(K,G){var X=qG(K,G),B=L((G===null||G===void 0?void 0:G.in)||K,0);return B.setFullYear(X,0,4),B.setHours(0,0,0,0),a(B)}function B0(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=e(B,QG(B,X)),Z=L((X===null||X===void 0?void 0:X.in)||K,0);return Z.setFullYear(G,0,4),Z.setHours(0,0,0,0),B=QG(Z),B.setDate(B.getDate()+U),B}function U0(K,G,X){return B0(K,qG(K,X)+G,X)}function QX(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setTime(B.getTime()+G*BG),B}function HX(K,G,X){return TG(K,G*3,X)}function Z0(K,G,X){return kG(K,G*1000,X)}function gG(K,G,X){return o(K,G*7,X)}function j0(K,G,X){return TG(K,G*12,X)}function wK(K,G,X){var B=[+N(K.start,X===null||X===void 0?void 0:X.in),+N(K.end,X===null||X===void 0?void 0:X.in)].sort(function(V,x){return V-x}),U=$(B,2),Z=U[0],j=U[1],J=[+N(G.start,X===null||X===void 0?void 0:X.in),+N(G.end,X===null||X===void 0?void 0:X.in)].sort(function(V,x){return V-x}),q=$(J,2),Q=q[0],H=q[1];if(X!==null&&X!==void 0&&X.inclusive)return Z<=H&&Q<=j;return Z<H&&Q<j}function J0(K,G){var X,B=G===null||G===void 0?void 0:G.in;return K.forEach(function(U){if(!B&&n(U)==="object")B=L.bind(null,U);var Z=N(U,B);if(!X||X<Z||isNaN(+Z))X=Z}),L(B,X||NaN)}function q0(K,G){var X,B=G===null||G===void 0?void 0:G.in;return K.forEach(function(U){if(!B&&n(U)==="object")B=L.bind(null,U);var Z=N(U,B);if(!X||X>Z||isNaN(+Z))X=Z}),L(B,X||NaN)}function CK(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G.start,G.end),U=$(B,3),Z=U[0],j=U[1],J=U[2];return q0([J0([Z,j],X),J],X)}function Q0(K,G){var X=+N(K);if(isNaN(X))return NaN;var B,U;return G.forEach(function(Z,j){var J=N(Z);if(isNaN(+J)){B=NaN,U=NaN;return}var q=Math.abs(X-+J);if(B==null||q<U)B=j,U=q}),B}function MK(K,G,X){var B=O.apply(void 0,[X===null||X===void 0?void 0:X.in,K].concat(UX(G))),U=HK(B),Z=U[0],j=U.slice(1),J=Q0(Z,j);if(typeof J==="number"&&isNaN(J))return L(Z,NaN);if(J!==void 0)return j[J]}function t(K,G){var X=+N(K)-+N(G);if(X<0)return-1;else if(X>0)return 1;return X}function bK(K,G){var X=+N(K)-+N(G);if(X>0)return-1;else if(X<0)return 1;return X}function f(K){return L(K,Date.now())}function YK(K){var G=Math.trunc(K/_X);return G===0?0:G}function WG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return+wG(Z)===+wG(j)}function H0(K){return K instanceof Date||n(K)==="object"&&Object.prototype.toString.call(K)==="[object Date]"}function UG(K){return!(!H0(K)&&typeof K!=="number"||isNaN(+N(K)))}function IK(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];if(!UG(Z)||!UG(j))return NaN;var J=e(Z,j),q=J<0?-1:1,Q=Math.trunc(J/7),H=Q*5,V=o(j,Q*7);while(!WG(Z,V))H+=FG(V,X)?0:q,V=o(V,q);return H===0?0:H}function N0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return qG(Z,X)-qG(j,X)}function TK(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=a(Z),q=a(j),Q=+J-r(J),H=+q-r(q);return Math.round((Q-H)/IG)}function fG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=Z.getFullYear()-j.getFullYear(),q=Z.getMonth()-j.getMonth();return J*12+q}function NX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=Math.trunc(X.getMonth()/3)+1;return B}function mG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=Z.getFullYear()-j.getFullYear(),q=NX(Z)-NX(j);return J*4+q}function cG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=_(Z,X),q=_(j,X),Q=+J-r(J),H=+q-r(q);return Math.round((Q-H)/IG)}function zG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return Z.getFullYear()-j.getFullYear()}function VX(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=V0(Z,j),q=Math.abs(e(Z,j));Z.setDate(Z.getDate()-J*q);var Q=Number(V0(Z,j)===-J),H=J*(q-Q);return H===0?0:H}function V0(K,G){var X=K.getFullYear()-G.getFullYear()||K.getMonth()-G.getMonth()||K.getDate()-G.getDate()||K.getHours()-G.getHours()||K.getMinutes()-G.getMinutes()||K.getSeconds()-G.getSeconds()||K.getMilliseconds()-G.getMilliseconds();if(X<0)return-1;if(X>0)return 1;return X}function HG(K){return function(G){var X=K?Math[K]:Math.trunc,B=X(G);return B===0?0:B}}function uG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=(+Z-+j)/xG;return HG(X===null||X===void 0?void 0:X.roundingMethod)(J)}function x0(K,G,X){return U0(K,-G,X)}function WK(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=t(Z,j),q=Math.abs(N0(Z,j,X)),Q=x0(Z,J*q,X),H=Number(t(Q,j)===-J),V=J*(q-H);return V===0?0:V}function xX(K,G){return+N(K)-+N(G)}function _G(K,G,X){var B=xX(K,G)/BG;return HG(X===null||X===void 0?void 0:X.roundingMethod)(B)}function EX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setHours(23,59,59,999),X}function RX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getMonth();return X.setFullYear(X.getFullYear(),B+1,0),X.setHours(23,59,59,999),X}function E0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return+EX(X,G)===+RX(X,G)}function lG(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,K,G),U=$(B,3),Z=U[0],j=U[1],J=U[2],q=t(j,J),Q=Math.abs(fG(j,J));if(Q<1)return 0;if(j.getMonth()===1&&j.getDate()>27)j.setDate(30);j.setMonth(j.getMonth()-q*Q);var H=t(j,J)===-q;if(E0(Z)&&Q===1&&t(Z,J)===1)H=!1;var V=q*(Q-+H);return V===0?0:V}function zK(K,G,X){var B=lG(K,G,X)/3;return HG(X===null||X===void 0?void 0:X.roundingMethod)(B)}function CG(K,G,X){var B=xX(K,G)/1000;return HG(X===null||X===void 0?void 0:X.roundingMethod)(B)}function $K(K,G,X){var B=VX(K,G,X)/7;return HG(X===null||X===void 0?void 0:X.roundingMethod)(B)}function R0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1],J=t(Z,j),q=Math.abs(zG(Z,j));Z.setFullYear(1584),j.setFullYear(1584);var Q=t(Z,j)===-J,H=J*(q-+Q);return H===0?0:H}function ZG(K,G){var X=O(K,G.start,G.end),B=$(X,2),U=B[0],Z=B[1];return{start:U,end:Z}}function A0(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?+U:+Z,q=j?Z:U;q.setHours(0,0,0,0);var Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q.setDate(q.getDate()+Q),q.setHours(0,0,0,0);return j?H.reverse():H}function PK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?+U:+Z,q=j?Z:U;q.setMinutes(0,0,0);var Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q.setHours(q.getHours()+Q);return j?H.reverse():H}function vK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end;U.setSeconds(0,0);var j=+U>+Z,J=j?+U:+Z,q=j?Z:U,Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q=QX(q,Q);return j?H.reverse():H}function OK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?+U:+Z,q=j?Z:U;q.setHours(0,0,0,0),q.setDate(1);var Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q.setMonth(q.getMonth()+Q);return j?H.reverse():H}function EG(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getMonth(),U=B-B%3;return X.setMonth(U,1),X.setHours(0,0,0,0),X}function DK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?+EG(U):+EG(Z),q=j?EG(Z):EG(U),Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q=HX(q,Q);return j?H.reverse():H}function SK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?_(Z,G):_(U,G),q=j?_(U,G):_(Z,G);J.setHours(15),q.setHours(15);var Q=+q.getTime(),H=J,V=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!V)return[];if(V<0)V=-V,j=!j;var x=[];while(+H<=Q)H.setHours(0),x.push(L(U,H)),H=gG(H,V),H.setHours(15);return j?x.reverse():x}function AX(K,G){var X=ZG(G===null||G===void 0?void 0:G.in,K),B=X.start,U=X.end,Z=A0({start:B,end:U},G),j=[],J=0;while(J<Z.length){var q=Z[J++];if(FG(q))j.push(L(B,q))}return j}function pG(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setDate(1),X.setHours(0,0,0,0),X}function hK(K,G){var X=pG(K,G),B=RX(K,G);return AX({start:X,end:B},G)}function L0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear();return X.setFullYear(B+1,0,0),X.setHours(23,59,59,999),X}function LX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setFullYear(X.getFullYear(),0,1),X.setHours(0,0,0,0),X}function yK(K,G){var X=LX(K,G),B=L0(K,G);return AX({start:X,end:B},G)}function kK(K,G){var X,B=ZG(G===null||G===void 0?void 0:G.in,K),U=B.start,Z=B.end,j=+U>+Z,J=j?+U:+Z,q=j?Z:U;q.setHours(0,0,0,0),q.setMonth(0,1);var Q=(X=G===null||G===void 0?void 0:G.step)!==null&&X!==void 0?X:1;if(!Q)return[];if(Q<0)Q=-Q,j=!j;var H=[];while(+q<=J)H.push(L(U,q)),q.setFullYear(q.getFullYear()+Q);return j?H.reverse():H}function gK(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=9+Math.floor(B/10)*10;return X.setFullYear(U,11,31),X.setHours(23,59,59,999),X}function fK(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setMinutes(59,59,999),X}function F0(K,G){var X,B,U,Z,j,J,q=p(),Q=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.weekStartsOn)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.weekStartsOn)!==null&&U!==void 0?U:q.weekStartsOn)!==null&&B!==void 0?B:(J=q.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.weekStartsOn)!==null&&X!==void 0?X:0,H=N(K,G===null||G===void 0?void 0:G.in),V=H.getDay(),x=(V<Q?-7:0)+6-(V-Q);return H.setDate(H.getDate()+x),H.setHours(23,59,59,999),H}function mK(K,G){return F0(K,s(s({},G),{},{weekStartsOn:1}))}function cK(K,G){var X=qG(K,G),B=L((G===null||G===void 0?void 0:G.in)||K,0);B.setFullYear(X+1,0,4),B.setHours(0,0,0,0);var U=a(B,G);return U.setMilliseconds(U.getMilliseconds()-1),U}function uK(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setSeconds(59,999),X}function _K(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getMonth(),U=B-B%3+3;return X.setMonth(U,0),X.setHours(23,59,59,999),X}function lK(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setMilliseconds(999),X}function pK(K){return EX(Date.now(),K)}function dK(K){var G=f(K===null||K===void 0?void 0:K.in),X=G.getFullYear(),B=G.getMonth(),U=G.getDate(),Z=f(K===null||K===void 0?void 0:K.in);return Z.setFullYear(X,B,U+1),Z.setHours(23,59,59,999),K!==null&&K!==void 0&&K.in?K.in(Z):Z}function rK(K){var G=f(K===null||K===void 0?void 0:K.in),X=L(K===null||K===void 0?void 0:K.in,0);return X.setFullYear(G.getFullYear(),G.getMonth(),G.getDate()-1),X.setHours(23,59,59,999),X}var iK={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}},sK=function K(G,X,B){var U,Z=iK[G];if(typeof Z==="string")U=Z;else if(X===1)U=Z.one;else U=Z.other.replace("{{count}}",X.toString());if(B!==null&&B!==void 0&&B.addSuffix)if(B.comparison&&B.comparison>0)return"in "+U;else return U+" ago";return U};function FX(K){return function(){var G=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},X=G.width?String(G.width):K.defaultWidth,B=K.formats[X]||K.formats[K.defaultWidth];return B}}var nK={full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},aK={full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},oK={full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},eK={date:FX({formats:nK,defaultWidth:"full"}),time:FX({formats:aK,defaultWidth:"full"}),dateTime:FX({formats:oK,defaultWidth:"full"})},tK={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"},GB=function K(G,X,B,U){return tK[G]};function $G(K){return function(G,X){var B=X!==null&&X!==void 0&&X.context?String(X.context):"standalone",U;if(B==="formatting"&&K.formattingValues){var Z=K.defaultFormattingWidth||K.defaultWidth,j=X!==null&&X!==void 0&&X.width?String(X.width):Z;U=K.formattingValues[j]||K.formattingValues[Z]}else{var J=K.defaultWidth,q=X!==null&&X!==void 0&&X.width?String(X.width):K.defaultWidth;U=K.values[q]||K.values[J]}var Q=K.argumentCallback?K.argumentCallback(G):G;return U[Q]}}var XB={narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},KB={narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},BB={narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},UB={narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},ZB={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},jB={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},JB=function K(G,X){var B=Number(G),U=B%100;if(U>20||U<10)switch(U%10){case 1:return B+"st";case 2:return B+"nd";case 3:return B+"rd"}return B+"th"},qB={ordinalNumber:JB,era:$G({values:XB,defaultWidth:"wide"}),quarter:$G({values:KB,defaultWidth:"wide",argumentCallback:function K(G){return G-1}}),month:$G({values:BB,defaultWidth:"wide"}),day:$G({values:UB,defaultWidth:"wide"}),dayPeriod:$G({values:ZB,defaultWidth:"wide",formattingValues:jB,defaultFormattingWidth:"wide"})};function PG(K){return function(G){var X=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},B=X.width,U=B&&K.matchPatterns[B]||K.matchPatterns[K.defaultMatchWidth],Z=G.match(U);if(!Z)return null;var j=Z[0],J=B&&K.parsePatterns[B]||K.parsePatterns[K.defaultParseWidth],q=Array.isArray(J)?HB(J,function(V){return V.test(j)}):QB(J,function(V){return V.test(j)}),Q;Q=K.valueCallback?K.valueCallback(q):q,Q=X.valueCallback?X.valueCallback(Q):Q;var H=G.slice(j.length);return{value:Q,rest:H}}}function QB(K,G){for(var X in K)if(Object.prototype.hasOwnProperty.call(K,X)&&G(K[X]))return X;return}function HB(K,G){for(var X=0;X<K.length;X++)if(G(K[X]))return X;return}function NB(K){return function(G){var X=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},B=G.match(K.matchPattern);if(!B)return null;var U=B[0],Z=G.match(K.parsePattern);if(!Z)return null;var j=K.valueCallback?K.valueCallback(Z[0]):Z[0];j=X.valueCallback?X.valueCallback(j):j;var J=G.slice(U.length);return{value:j,rest:J}}}var VB=/^(\d+)(th|st|nd|rd)?/i,xB=/\d+/i,EB={narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},RB={any:[/^b/i,/^(a|c)/i]},AB={narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},LB={any:[/1/i,/2/i,/3/i,/4/i]},FB={narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},wB={narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},CB={narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},MB={narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},bB={narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},YB={any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},IB={ordinalNumber:NB({matchPattern:VB,parsePattern:xB,valueCallback:function K(G){return parseInt(G,10)}}),era:PG({matchPatterns:EB,defaultMatchWidth:"wide",parsePatterns:RB,defaultParseWidth:"any"}),quarter:PG({matchPatterns:AB,defaultMatchWidth:"wide",parsePatterns:LB,defaultParseWidth:"any",valueCallback:function K(G){return G+1}}),month:PG({matchPatterns:FB,defaultMatchWidth:"wide",parsePatterns:wB,defaultParseWidth:"any"}),day:PG({matchPatterns:CB,defaultMatchWidth:"wide",parsePatterns:MB,defaultParseWidth:"any"}),dayPeriod:PG({matchPatterns:bB,defaultMatchWidth:"any",parsePatterns:YB,defaultParseWidth:"any"})},MG={code:"en-US",formatDistance:sK,formatLong:eK,formatRelative:GB,localize:qB,match:IB,options:{weekStartsOn:0,firstWeekContainsDate:1}};function w0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=e(X,LX(X)),U=B+1;return U}function wX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=+a(X)-+QG(X);return Math.round(B/IG)+1}function dG(K,G){var X,B,U,Z,j,J,q=N(K,G===null||G===void 0?void 0:G.in),Q=q.getFullYear(),H=p(),V=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.firstWeekContainsDate)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.firstWeekContainsDate)!==null&&U!==void 0?U:H.firstWeekContainsDate)!==null&&B!==void 0?B:(J=H.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.firstWeekContainsDate)!==null&&X!==void 0?X:1,x=L((G===null||G===void 0?void 0:G.in)||K,0);x.setFullYear(Q+1,0,V),x.setHours(0,0,0,0);var C=_(x,G),w=L((G===null||G===void 0?void 0:G.in)||K,0);w.setFullYear(Q,0,V),w.setHours(0,0,0,0);var M=_(w,G);if(+q>=+C)return Q+1;else if(+q>=+M)return Q;else return Q-1}function rG(K,G){var X,B,U,Z,j,J,q=p(),Q=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.firstWeekContainsDate)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.firstWeekContainsDate)!==null&&U!==void 0?U:q.firstWeekContainsDate)!==null&&B!==void 0?B:(J=q.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.firstWeekContainsDate)!==null&&X!==void 0?X:1,H=dG(K,G),V=L((G===null||G===void 0?void 0:G.in)||K,0);V.setFullYear(H,0,Q),V.setHours(0,0,0,0);var x=_(V,G);return x}function CX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=+_(X,G)-+rG(X,G);return Math.round(B/IG)+1}function F(K,G){var X=K<0?"-":"",B=Math.abs(K).toString().padStart(G,"0");return X+B}var GG={y:function K(G,X){var B=G.getFullYear(),U=B>0?B:1-B;return F(X==="yy"?U%100:U,X.length)},M:function K(G,X){var B=G.getMonth();return X==="M"?String(B+1):F(B+1,2)},d:function K(G,X){return F(G.getDate(),X.length)},a:function K(G,X){var B=G.getHours()/12>=1?"pm":"am";switch(X){case"a":case"aa":return B.toUpperCase();case"aaa":return B;case"aaaaa":return B[0];case"aaaa":default:return B==="am"?"a.m.":"p.m."}},h:function K(G,X){return F(G.getHours()%12||12,X.length)},H:function K(G,X){return F(G.getHours(),X.length)},m:function K(G,X){return F(G.getMinutes(),X.length)},s:function K(G,X){return F(G.getSeconds(),X.length)},S:function K(G,X){var B=X.length,U=G.getMilliseconds(),Z=Math.trunc(U*Math.pow(10,B-3));return F(Z,X.length)}};function C0(K){var G=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",X=K>0?"-":"+",B=Math.abs(K),U=Math.trunc(B/60),Z=B%60;if(Z===0)return X+String(U);return X+String(U)+G+F(Z,2)}function M0(K,G){if(K%60===0){var X=K>0?"-":"+";return X+F(Math.abs(K)/60,2)}return RG(K,G)}function RG(K){var G=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",X=K>0?"-":"+",B=Math.abs(K),U=F(Math.trunc(B/60),2),Z=F(B%60,2);return X+U+G+Z}var bG={am:"am",pm:"pm",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},MX={G:function K(G,X,B){var U=G.getFullYear()>0?1:0;switch(X){case"G":case"GG":case"GGG":return B.era(U,{width:"abbreviated"});case"GGGGG":return B.era(U,{width:"narrow"});case"GGGG":default:return B.era(U,{width:"wide"})}},y:function K(G,X,B){if(X==="yo"){var U=G.getFullYear(),Z=U>0?U:1-U;return B.ordinalNumber(Z,{unit:"year"})}return GG.y(G,X)},Y:function K(G,X,B,U){var Z=dG(G,U),j=Z>0?Z:1-Z;if(X==="YY"){var J=j%100;return F(J,2)}if(X==="Yo")return B.ordinalNumber(j,{unit:"year"});return F(j,X.length)},R:function K(G,X){var B=qG(G);return F(B,X.length)},u:function K(G,X){var B=G.getFullYear();return F(B,X.length)},Q:function K(G,X,B){var U=Math.ceil((G.getMonth()+1)/3);switch(X){case"Q":return String(U);case"QQ":return F(U,2);case"Qo":return B.ordinalNumber(U,{unit:"quarter"});case"QQQ":return B.quarter(U,{width:"abbreviated",context:"formatting"});case"QQQQQ":return B.quarter(U,{width:"narrow",context:"formatting"});case"QQQQ":default:return B.quarter(U,{width:"wide",context:"formatting"})}},q:function K(G,X,B){var U=Math.ceil((G.getMonth()+1)/3);switch(X){case"q":return String(U);case"qq":return F(U,2);case"qo":return B.ordinalNumber(U,{unit:"quarter"});case"qqq":return B.quarter(U,{width:"abbreviated",context:"standalone"});case"qqqqq":return B.quarter(U,{width:"narrow",context:"standalone"});case"qqqq":default:return B.quarter(U,{width:"wide",context:"standalone"})}},M:function K(G,X,B){var U=G.getMonth();switch(X){case"M":case"MM":return GG.M(G,X);case"Mo":return B.ordinalNumber(U+1,{unit:"month"});case"MMM":return B.month(U,{width:"abbreviated",context:"formatting"});case"MMMMM":return B.month(U,{width:"narrow",context:"formatting"});case"MMMM":default:return B.month(U,{width:"wide",context:"formatting"})}},L:function K(G,X,B){var U=G.getMonth();switch(X){case"L":return String(U+1);case"LL":return F(U+1,2);case"Lo":return B.ordinalNumber(U+1,{unit:"month"});case"LLL":return B.month(U,{width:"abbreviated",context:"standalone"});case"LLLLL":return B.month(U,{width:"narrow",context:"standalone"});case"LLLL":default:return B.month(U,{width:"wide",context:"standalone"})}},w:function K(G,X,B,U){var Z=CX(G,U);if(X==="wo")return B.ordinalNumber(Z,{unit:"week"});return F(Z,X.length)},I:function K(G,X,B){var U=wX(G);if(X==="Io")return B.ordinalNumber(U,{unit:"week"});return F(U,X.length)},d:function K(G,X,B){if(X==="do")return B.ordinalNumber(G.getDate(),{unit:"date"});return GG.d(G,X)},D:function K(G,X,B){var U=w0(G);if(X==="Do")return B.ordinalNumber(U,{unit:"dayOfYear"});return F(U,X.length)},E:function K(G,X,B){var U=G.getDay();switch(X){case"E":case"EE":case"EEE":return B.day(U,{width:"abbreviated",context:"formatting"});case"EEEEE":return B.day(U,{width:"narrow",context:"formatting"});case"EEEEEE":return B.day(U,{width:"short",context:"formatting"});case"EEEE":default:return B.day(U,{width:"wide",context:"formatting"})}},e:function K(G,X,B,U){var Z=G.getDay(),j=(Z-U.weekStartsOn+8)%7||7;switch(X){case"e":return String(j);case"ee":return F(j,2);case"eo":return B.ordinalNumber(j,{unit:"day"});case"eee":return B.day(Z,{width:"abbreviated",context:"formatting"});case"eeeee":return B.day(Z,{width:"narrow",context:"formatting"});case"eeeeee":return B.day(Z,{width:"short",context:"formatting"});case"eeee":default:return B.day(Z,{width:"wide",context:"formatting"})}},c:function K(G,X,B,U){var Z=G.getDay(),j=(Z-U.weekStartsOn+8)%7||7;switch(X){case"c":return String(j);case"cc":return F(j,X.length);case"co":return B.ordinalNumber(j,{unit:"day"});case"ccc":return B.day(Z,{width:"abbreviated",context:"standalone"});case"ccccc":return B.day(Z,{width:"narrow",context:"standalone"});case"cccccc":return B.day(Z,{width:"short",context:"standalone"});case"cccc":default:return B.day(Z,{width:"wide",context:"standalone"})}},i:function K(G,X,B){var U=G.getDay(),Z=U===0?7:U;switch(X){case"i":return String(Z);case"ii":return F(Z,X.length);case"io":return B.ordinalNumber(Z,{unit:"day"});case"iii":return B.day(U,{width:"abbreviated",context:"formatting"});case"iiiii":return B.day(U,{width:"narrow",context:"formatting"});case"iiiiii":return B.day(U,{width:"short",context:"formatting"});case"iiii":default:return B.day(U,{width:"wide",context:"formatting"})}},a:function K(G,X,B){var U=G.getHours(),Z=U/12>=1?"pm":"am";switch(X){case"a":case"aa":return B.dayPeriod(Z,{width:"abbreviated",context:"formatting"});case"aaa":return B.dayPeriod(Z,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return B.dayPeriod(Z,{width:"narrow",context:"formatting"});case"aaaa":default:return B.dayPeriod(Z,{width:"wide",context:"formatting"})}},b:function K(G,X,B){var U=G.getHours(),Z;if(U===12)Z=bG.noon;else if(U===0)Z=bG.midnight;else Z=U/12>=1?"pm":"am";switch(X){case"b":case"bb":return B.dayPeriod(Z,{width:"abbreviated",context:"formatting"});case"bbb":return B.dayPeriod(Z,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return B.dayPeriod(Z,{width:"narrow",context:"formatting"});case"bbbb":default:return B.dayPeriod(Z,{width:"wide",context:"formatting"})}},B:function K(G,X,B){var U=G.getHours(),Z;if(U>=17)Z=bG.evening;else if(U>=12)Z=bG.afternoon;else if(U>=4)Z=bG.morning;else Z=bG.night;switch(X){case"B":case"BB":case"BBB":return B.dayPeriod(Z,{width:"abbreviated",context:"formatting"});case"BBBBB":return B.dayPeriod(Z,{width:"narrow",context:"formatting"});case"BBBB":default:return B.dayPeriod(Z,{width:"wide",context:"formatting"})}},h:function K(G,X,B){if(X==="ho"){var U=G.getHours()%12;if(U===0)U=12;return B.ordinalNumber(U,{unit:"hour"})}return GG.h(G,X)},H:function K(G,X,B){if(X==="Ho")return B.ordinalNumber(G.getHours(),{unit:"hour"});return GG.H(G,X)},K:function K(G,X,B){var U=G.getHours()%12;if(X==="Ko")return B.ordinalNumber(U,{unit:"hour"});return F(U,X.length)},k:function K(G,X,B){var U=G.getHours();if(U===0)U=24;if(X==="ko")return B.ordinalNumber(U,{unit:"hour"});return F(U,X.length)},m:function K(G,X,B){if(X==="mo")return B.ordinalNumber(G.getMinutes(),{unit:"minute"});return GG.m(G,X)},s:function K(G,X,B){if(X==="so")return B.ordinalNumber(G.getSeconds(),{unit:"second"});return GG.s(G,X)},S:function K(G,X){return GG.S(G,X)},X:function K(G,X,B){var U=G.getTimezoneOffset();if(U===0)return"Z";switch(X){case"X":return M0(U);case"XXXX":case"XX":return RG(U);case"XXXXX":case"XXX":default:return RG(U,":")}},x:function K(G,X,B){var U=G.getTimezoneOffset();switch(X){case"x":return M0(U);case"xxxx":case"xx":return RG(U);case"xxxxx":case"xxx":default:return RG(U,":")}},O:function K(G,X,B){var U=G.getTimezoneOffset();switch(X){case"O":case"OO":case"OOO":return"GMT"+C0(U,":");case"OOOO":default:return"GMT"+RG(U,":")}},z:function K(G,X,B){var U=G.getTimezoneOffset();switch(X){case"z":case"zz":case"zzz":return"GMT"+C0(U,":");case"zzzz":default:return"GMT"+RG(U,":")}},t:function K(G,X,B){var U=Math.trunc(+G/1000);return F(U,X.length)},T:function K(G,X,B){return F(+G,X.length)}},b0=function K(G,X){switch(G){case"P":return X.date({width:"short"});case"PP":return X.date({width:"medium"});case"PPP":return X.date({width:"long"});case"PPPP":default:return X.date({width:"full"})}},Y0=function K(G,X){switch(G){case"p":return X.time({width:"short"});case"pp":return X.time({width:"medium"});case"ppp":return X.time({width:"long"});case"pppp":default:return X.time({width:"full"})}},TB=function K(G,X){var B=G.match(/(P+)(p+)?/)||[],U=B[1],Z=B[2];if(!Z)return b0(G,X);var j;switch(U){case"P":j=X.dateTime({width:"short"});break;case"PP":j=X.dateTime({width:"medium"});break;case"PPP":j=X.dateTime({width:"long"});break;case"PPPP":default:j=X.dateTime({width:"full"});break}return j.replace("{{date}}",b0(U,X)).replace("{{time}}",Y0(Z,X))},iG={p:Y0,P:TB};function I0(K){return zB.test(K)}function T0(K){return $B.test(K)}function bX(K,G,X){var B=WB(K,G,X);if(console.warn(B),PB.includes(K))throw new RangeError(B)}function WB(K,G,X){var B=K[0]==="Y"?"years":"days of the month";return"Use `".concat(K.toLowerCase(),"` instead of `").concat(K,"` (in `").concat(G,"`) for formatting ").concat(B," to the input `").concat(X,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md")}var zB=/^D+$/,$B=/^Y+$/,PB=["D","DD","YY","YYYY"];function YX(K,G,X){var B,U,Z,j,J,q,Q,H,V,x,C,w,M,A,T=p(),b=(B=(U=X===null||X===void 0?void 0:X.locale)!==null&&U!==void 0?U:T.locale)!==null&&B!==void 0?B:MG,v=(Z=(j=(J=(q=X===null||X===void 0?void 0:X.firstWeekContainsDate)!==null&&q!==void 0?q:X===null||X===void 0||(Q=X.locale)===null||Q===void 0||(Q=Q.options)===null||Q===void 0?void 0:Q.firstWeekContainsDate)!==null&&J!==void 0?J:T.firstWeekContainsDate)!==null&&j!==void 0?j:(H=T.locale)===null||H===void 0||(H=H.options)===null||H===void 0?void 0:H.firstWeekContainsDate)!==null&&Z!==void 0?Z:1,D=(V=(x=(C=(w=X===null||X===void 0?void 0:X.weekStartsOn)!==null&&w!==void 0?w:X===null||X===void 0||(M=X.locale)===null||M===void 0||(M=M.options)===null||M===void 0?void 0:M.weekStartsOn)!==null&&C!==void 0?C:T.weekStartsOn)!==null&&x!==void 0?x:(A=T.locale)===null||A===void 0||(A=A.options)===null||A===void 0?void 0:A.weekStartsOn)!==null&&V!==void 0?V:0,l=N(K,X===null||X===void 0?void 0:X.in);if(!UG(l))throw new RangeError("Invalid time value");var d=G.match(DB).map(function(m){var c=m[0];if(c==="p"||c==="P"){var JG=iG[c];return JG(m,b.formatLong)}return m}).join("").match(OB).map(function(m){if(m==="''")return{isToken:!1,value:"'"};var c=m[0];if(c==="'")return{isToken:!1,value:vB(m)};if(MX[c])return{isToken:!0,value:m};if(c.match(yB))throw new RangeError("Format string contains an unescaped latin alphabet character `"+c+"`");return{isToken:!1,value:m}});if(b.localize.preprocessor)d=b.localize.preprocessor(l,d);var jG={firstWeekContainsDate:v,weekStartsOn:D,locale:b};return d.map(function(m){if(!m.isToken)return m.value;var c=m.value;if(!(X!==null&&X!==void 0&&X.useAdditionalWeekYearTokens)&&T0(c)||!(X!==null&&X!==void 0&&X.useAdditionalDayOfYearTokens)&&I0(c))bX(c,G,String(K));var JG=MX[c[0]];return JG(l,c,b.localize,jG)}).join("")}function vB(K){var G=K.match(SB);if(!G)return K;return G[1].replace(hB,"'")}var OB=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,DB=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,SB=/^'([^]*?)'?$/,hB=/''/g,yB=/[a-zA-Z]/;function W0(K,G,X){var B,U,Z=p(),j=(B=(U=X===null||X===void 0?void 0:X.locale)!==null&&U!==void 0?U:Z.locale)!==null&&B!==void 0?B:MG,J=2520,q=t(K,G);if(isNaN(q))throw new RangeError("Invalid time value");var Q=Object.assign({},X,{addSuffix:X===null||X===void 0?void 0:X.addSuffix,comparison:q}),H=O.apply(void 0,[X===null||X===void 0?void 0:X.in].concat(UX(q>0?[G,K]:[K,G]))),V=$(H,2),x=V[0],C=V[1],w=CG(C,x),M=(r(C)-r(x))/1000,A=Math.round((w-M)/60),T;if(A<2)if(X!==null&&X!==void 0&&X.includeSeconds)if(w<5)return j.formatDistance("lessThanXSeconds",5,Q);else if(w<10)return j.formatDistance("lessThanXSeconds",10,Q);else if(w<20)return j.formatDistance("lessThanXSeconds",20,Q);else if(w<40)return j.formatDistance("halfAMinute",0,Q);else if(w<60)return j.formatDistance("lessThanXMinutes",1,Q);else return j.formatDistance("xMinutes",1,Q);else if(A===0)return j.formatDistance("lessThanXMinutes",1,Q);else return j.formatDistance("xMinutes",A,Q);else if(A<45)return j.formatDistance("xMinutes",A,Q);else if(A<90)return j.formatDistance("aboutXHours",1,Q);else if(A<hG){var b=Math.round(A/60);return j.formatDistance("aboutXHours",b,Q)}else if(A<J)return j.formatDistance("xDays",1,Q);else if(A<AG){var v=Math.round(A/hG);return j.formatDistance("xDays",v,Q)}else if(A<AG*2)return T=Math.round(A/AG),j.formatDistance("aboutXMonths",T,Q);if(T=lG(C,x),T<12){var D=Math.round(A/AG);return j.formatDistance("xMonths",D,Q)}else{var l=T%12,d=Math.trunc(T/12);if(l<3)return j.formatDistance("aboutXYears",d,Q);else if(l<9)return j.formatDistance("overXYears",d,Q);else return j.formatDistance("almostXYears",d+1,Q)}}function z0(K,G,X){var B,U,Z,j=p(),J=(B=(U=X===null||X===void 0?void 0:X.locale)!==null&&U!==void 0?U:j.locale)!==null&&B!==void 0?B:MG,q=t(K,G);if(isNaN(q))throw new RangeError("Invalid time value");var Q=Object.assign({},X,{addSuffix:X===null||X===void 0?void 0:X.addSuffix,comparison:q}),H=O.apply(void 0,[X===null||X===void 0?void 0:X.in].concat(UX(q>0?[G,K]:[K,G]))),V=$(H,2),x=V[0],C=V[1],w=HG((Z=X===null||X===void 0?void 0:X.roundingMethod)!==null&&Z!==void 0?Z:"round"),M=C.getTime()-x.getTime(),A=M/BG,T=r(C)-r(x),b=(M-T)/BG,v=X===null||X===void 0?void 0:X.unit,D;if(!v)if(A<1)D="second";else if(A<60)D="minute";else if(A<hG)D="hour";else if(b<AG)D="day";else if(b<pX)D="month";else D="year";else D=v;if(D==="second"){var l=w(M/1000);return J.formatDistance("xSeconds",l,Q)}else if(D==="minute"){var d=w(A);return J.formatDistance("xMinutes",d,Q)}else if(D==="hour"){var jG=w(A/60);return J.formatDistance("xHours",jG,Q)}else if(D==="day"){var m=w(b/hG);return J.formatDistance("xDays",m,Q)}else if(D==="month"){var c=w(b/AG);return c===12&&v!=="month"?J.formatDistance("xYears",1,Q):J.formatDistance("xMonths",c,Q)}else{var JG=w(b/pX);return J.formatDistance("xYears",JG,Q)}}function kB(K,G){return W0(K,f(K),G)}function gB(K,G){return z0(K,f(K),G)}function fB(K,G){var X,B,U,Z,j,J=p(),q=(X=(B=G===null||G===void 0?void 0:G.locale)!==null&&B!==void 0?B:J.locale)!==null&&X!==void 0?X:MG,Q=(U=G===null||G===void 0?void 0:G.format)!==null&&U!==void 0?U:mB,H=(Z=G===null||G===void 0?void 0:G.zero)!==null&&Z!==void 0?Z:!1,V=(j=G===null||G===void 0?void 0:G.delimiter)!==null&&j!==void 0?j:" ";if(!q.formatDistance)return"";var x=Q.reduce(function(C,w){var M="x".concat(w.replace(/(^.)/,function(T){return T.toUpperCase()})),A=K[w];if(A!==void 0&&(H||K[w]))return C.concat(q.formatDistance(M,A));return C},[]).join(V);return x}var mB=["years","months","weeks","days","hours","minutes","seconds"];function cB(K,G){var X,B,U=N(K,G===null||G===void 0?void 0:G.in);if(isNaN(+U))throw new RangeError("Invalid time value");var Z=(X=G===null||G===void 0?void 0:G.format)!==null&&X!==void 0?X:"extended",j=(B=G===null||G===void 0?void 0:G.representation)!==null&&B!==void 0?B:"complete",J="",q="",Q=Z==="extended"?"-":"",H=Z==="extended"?":":"";if(j!=="time"){var V=F(U.getDate(),2),x=F(U.getMonth()+1,2),C=F(U.getFullYear(),4);J="".concat(C).concat(Q).concat(x).concat(Q).concat(V)}if(j!=="date"){var w=U.getTimezoneOffset();if(w!==0){var M=Math.abs(w),A=F(Math.trunc(M/60),2),T=F(M%60,2),b=w<0?"+":"-";q="".concat(b).concat(A,":").concat(T)}else q="Z";var v=F(U.getHours(),2),D=F(U.getMinutes(),2),l=F(U.getSeconds(),2),d=J===""?"":"T",jG=[v,D,l].join(H);J="".concat(J).concat(d).concat(jG).concat(q)}return J}function uB(K,G){var X,B,U=N(K,G===null||G===void 0?void 0:G.in);if(!UG(U))throw new RangeError("Invalid time value");var Z=(X=G===null||G===void 0?void 0:G.format)!==null&&X!==void 0?X:"extended",j=(B=G===null||G===void 0?void 0:G.representation)!==null&&B!==void 0?B:"complete",J="",q=Z==="extended"?"-":"",Q=Z==="extended"?":":"";if(j!=="time"){var H=F(U.getDate(),2),V=F(U.getMonth()+1,2),x=F(U.getFullYear(),4);J="".concat(x).concat(q).concat(V).concat(q).concat(H)}if(j!=="date"){var C=F(U.getHours(),2),w=F(U.getMinutes(),2),M=F(U.getSeconds(),2),A=J===""?"":" ";J="".concat(J).concat(A).concat(C).concat(Q).concat(w).concat(Q).concat(M)}return J}function _B(K){var G=K.years,X=G===void 0?0:G,B=K.months,U=B===void 0?0:B,Z=K.days,j=Z===void 0?0:Z,J=K.hours,q=J===void 0?0:J,Q=K.minutes,H=Q===void 0?0:Q,V=K.seconds,x=V===void 0?0:V;return"P".concat(X,"Y").concat(U,"M").concat(j,"DT").concat(q,"H").concat(H,"M").concat(x,"S")}function lB(K,G){var X,B=N(K,G===null||G===void 0?void 0:G.in);if(!UG(B))throw new RangeError("Invalid time value");var U=(X=G===null||G===void 0?void 0:G.fractionDigits)!==null&&X!==void 0?X:0,Z=F(B.getDate(),2),j=F(B.getMonth()+1,2),J=B.getFullYear(),q=F(B.getHours(),2),Q=F(B.getMinutes(),2),H=F(B.getSeconds(),2),V="";if(U>0){var x=B.getMilliseconds(),C=Math.trunc(x*Math.pow(10,U-3));V="."+F(C,U)}var w="",M=B.getTimezoneOffset();if(M!==0){var A=Math.abs(M),T=F(Math.trunc(A/60),2),b=F(A%60,2),v=M<0?"+":"-";w="".concat(v).concat(T,":").concat(b)}else w="Z";return"".concat(J,"-").concat(j,"-").concat(Z,"T").concat(q,":").concat(Q,":").concat(H).concat(V).concat(w)}function pB(K){var G=N(K);if(!UG(G))throw new RangeError("Invalid time value");var X=dB[G.getUTCDay()],B=F(G.getUTCDate(),2),U=rB[G.getUTCMonth()],Z=G.getUTCFullYear(),j=F(G.getUTCHours(),2),J=F(G.getUTCMinutes(),2),q=F(G.getUTCSeconds(),2);return"".concat(X,", ").concat(B," ").concat(U," ").concat(Z," ").concat(j,":").concat(J,":").concat(q," GMT")}var dB=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],rB=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function iB(K,G,X){var B,U,Z,j,J,q,Q,H,V=O(X===null||X===void 0?void 0:X.in,K,G),x=$(V,2),C=x[0],w=x[1],M=p(),A=(B=(U=X===null||X===void 0?void 0:X.locale)!==null&&U!==void 0?U:M.locale)!==null&&B!==void 0?B:MG,T=(Z=(j=(J=(q=X===null||X===void 0?void 0:X.weekStartsOn)!==null&&q!==void 0?q:X===null||X===void 0||(Q=X.locale)===null||Q===void 0||(Q=Q.options)===null||Q===void 0?void 0:Q.weekStartsOn)!==null&&J!==void 0?J:M.weekStartsOn)!==null&&j!==void 0?j:(H=M.locale)===null||H===void 0||(H=H.options)===null||H===void 0?void 0:H.weekStartsOn)!==null&&Z!==void 0?Z:0,b=e(C,w);if(isNaN(b))throw new RangeError("Invalid time value");var v;if(b<-6)v="other";else if(b<-1)v="lastWeek";else if(b<0)v="yesterday";else if(b<1)v="today";else if(b<2)v="tomorrow";else if(b<7)v="nextWeek";else v="other";var D=A.formatRelative(v,C,w,{locale:A,weekStartsOn:T});return YX(C,D,{locale:A,weekStartsOn:T})}function sB(K,G){return N(K*1000,G===null||G===void 0?void 0:G.in)}function $0(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDate()}function sG(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()}function P0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=X.getMonth(),Z=L(X,0);return Z.setFullYear(B,U+1,0),Z.setHours(0,0,0,0),Z.getDate()}function v0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear();return B%400===0||B%4===0&&B%100!==0}function nB(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);if(Number.isNaN(+X))return NaN;return v0(X)?366:365}function aB(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=Math.floor(B/10)*10;return U}function O0(){return Object.assign({},p())}function oB(K,G){return N(K,G===null||G===void 0?void 0:G.in).getHours()}function D0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in).getDay();return X===0?7:X}function eB(K,G){var X=QG(K,G),B=QG(gG(X,60)),U=+B-+X;return Math.round(U/IG)}function tB(K){return N(K).getMilliseconds()}function GU(K,G){return N(K,G===null||G===void 0?void 0:G.in).getMinutes()}function XU(K,G){return N(K,G===null||G===void 0?void 0:G.in).getMonth()}function KU(K,G){var X=[+N(K.start),+N(K.end)].sort(function(M,A){return M-A}),B=$(X,2),U=B[0],Z=B[1],j=[+N(G.start),+N(G.end)].sort(function(M,A){return M-A}),J=$(j,2),q=J[0],Q=J[1],H=U<Q&&q<Z;if(!H)return 0;var V=q<U?U:q,x=V-r(V),C=Q>Z?Z:Q,w=C-r(C);return Math.ceil((w-x)/lX)}function BU(K){return N(K).getSeconds()}function UU(K){return+N(K)}function ZU(K){return Math.trunc(+N(K)/1000)}function jU(K,G){var X,B,U,Z,j,J,q=p(),Q=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.weekStartsOn)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.weekStartsOn)!==null&&U!==void 0?U:q.weekStartsOn)!==null&&B!==void 0?B:(J=q.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.weekStartsOn)!==null&&X!==void 0?X:0,H=$0(N(K,G===null||G===void 0?void 0:G.in));if(isNaN(H))return NaN;var V=sG(pG(K,G)),x=Q-V;if(x<=0)x+=7;var C=H-x;return Math.ceil(C/7)+1}function S0(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getMonth();return X.setFullYear(X.getFullYear(),B+1,0),X.setHours(0,0,0,0),N(X,G===null||G===void 0?void 0:G.in)}function JU(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return cG(S0(X,G),pG(X,G),G)+1}function qU(K,G){return N(K,G===null||G===void 0?void 0:G.in).getFullYear()}function QU(K){return Math.trunc(K*xG)}function HU(K){return Math.trunc(K*dX)}function NU(K){return Math.trunc(K*yG)}function VU(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];if(isNaN(+Z))throw new TypeError("Start date is invalid");if(isNaN(+j))throw new TypeError("End date is invalid");if(X!==null&&X!==void 0&&X.assertPositive&&+Z>+j)throw new TypeError("End date must be after start date");return{start:Z,end:j}}function xU(K,G){var X=ZG(G===null||G===void 0?void 0:G.in,K),B=X.start,U=X.end,Z={},j=R0(U,B);if(j)Z.years=j;var J=LG(B,{years:Z.years}),q=lG(U,J);if(q)Z.months=q;var Q=LG(J,{months:Z.months}),H=VX(U,Q);if(H)Z.days=H;var V=LG(Q,{days:Z.days}),x=uG(U,V);if(x)Z.hours=x;var C=LG(V,{hours:Z.hours}),w=_G(U,C);if(w)Z.minutes=w;var M=LG(C,{minutes:Z.minutes}),A=CG(U,M);if(A)Z.seconds=A;return Z}function EU(K,G,X){var B,U;if(RU(G))U=G;else X=G;return new Intl.DateTimeFormat((B=X)===null||B===void 0?void 0:B.locale,U).format(N(K))}function RU(K){return K!==void 0&&!("locale"in K)}function AU(K,G,X){var B=0,U,Z=O(X===null||X===void 0?void 0:X.in,K,G),j=$(Z,2),J=j[0],q=j[1];if(!(X!==null&&X!==void 0&&X.unit)){var Q=CG(J,q);if(Math.abs(Q)<JX)B=CG(J,q),U="second";else if(Math.abs(Q)<yG)B=_G(J,q),U="minute";else if(Math.abs(Q)<qX&&Math.abs(e(J,q))<1)B=uG(J,q),U="hour";else if(Math.abs(Q)<AK&&(B=e(J,q))&&Math.abs(B)<7)U="day";else if(Math.abs(Q)<aX)B=cG(J,q),U="week";else if(Math.abs(Q)<LK)B=fG(J,q),U="month";else if(Math.abs(Q)<nX)if(mG(J,q)<4)B=mG(J,q),U="quarter";else B=zG(J,q),U="year";else B=zG(J,q),U="year"}else if(U=X===null||X===void 0?void 0:X.unit,U==="second")B=CG(J,q);else if(U==="minute")B=_G(J,q);else if(U==="hour")B=uG(J,q);else if(U==="day")B=e(J,q);else if(U==="week")B=cG(J,q);else if(U==="month")B=fG(J,q);else if(U==="quarter")B=mG(J,q);else if(U==="year")B=zG(J,q);var H=new Intl.RelativeTimeFormat(X===null||X===void 0?void 0:X.locale,s({numeric:"auto"},X));return H.format(B,U)}function LU(K,G){return+N(K)>+N(G)}function FU(K,G){return+N(K)<+N(G)}function wU(K,G){return+N(K)===+N(G)}function CU(K,G,X){var B=new Date(K,G,X);return B.getFullYear()===K&&B.getMonth()===G&&B.getDate()===X}function MU(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDate()===1}function bU(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===5}function YU(K){return+N(K)>Date.now()}function h0(K,G){var X=IU(G)?new G(0):L(G,0);return X.setFullYear(K.getFullYear(),K.getMonth(),K.getDate()),X.setHours(K.getHours(),K.getMinutes(),K.getSeconds(),K.getMilliseconds()),X}function IU(K){var G;return typeof K==="function"&&((G=K.prototype)===null||G===void 0?void 0:G.constructor)===K}var TU=10,y0=function(){function K(){Y(this,K),E(this,"subPriority",0)}return I(K,[{key:"validate",value:function G(X,B){return!0}}]),K}(),WU=function(K){z(G,K);function G(X,B,U,Z,j){var J;if(Y(this,G),J=W(this,G),J.value=X,J.validateValue=B,J.setValue=U,J.priority=Z,j)J.subPriority=j;return J}return I(G,[{key:"validate",value:function X(B,U){return this.validateValue(B,this.value,U)}},{key:"set",value:function X(B,U,Z){return this.setValue(B,U,this.value,Z)}}]),G}(y0),zU=function(K){z(G,K);function G(X,B){var U;return Y(this,G),U=W(this,G),E(R(U),"priority",TU),E(R(U),"subPriority",-1),U.context=X||function(Z){return L(B,Z)},U}return I(G,[{key:"set",value:function X(B,U){if(U.timestampIsSet)return B;return L(B,h0(B,this.context))}}]),G}(y0),P=function(){function K(){Y(this,K)}return I(K,[{key:"run",value:function G(X,B,U,Z){var j=this.parse(X,B,U,Z);if(!j)return null;return{setter:new WU(j.value,this.validate,this.set,this.priority,this.subPriority),rest:j.rest}}},{key:"validate",value:function G(X,B,U){return!0}}]),K}(),$U=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",140),E(R(X),"incompatibleTokens",["R","u","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"G":case"GG":case"GGG":return Z.era(B,{width:"abbreviated"})||Z.era(B,{width:"narrow"});case"GGGGG":return Z.era(B,{width:"narrow"});case"GGGG":default:return Z.era(B,{width:"wide"})||Z.era(B,{width:"abbreviated"})||Z.era(B,{width:"narrow"})}}},{key:"set",value:function X(B,U,Z){return U.era=Z,B.setFullYear(Z,0,1),B.setHours(0,0,0,0),B}}]),G}(P),k={month:/^(1[0-2]|0?\d)/,date:/^(3[0-1]|[0-2]?\d)/,dayOfYear:/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,week:/^(5[0-3]|[0-4]?\d)/,hour23h:/^(2[0-3]|[0-1]?\d)/,hour24h:/^(2[0-4]|[0-1]?\d)/,hour11h:/^(1[0-1]|0?\d)/,hour12h:/^(1[0-2]|0?\d)/,minute:/^[0-5]?\d/,second:/^[0-5]?\d/,singleDigit:/^\d/,twoDigits:/^\d{1,2}/,threeDigits:/^\d{1,3}/,fourDigits:/^\d{1,4}/,anyDigitsSigned:/^-?\d+/,singleDigitSigned:/^-?\d/,twoDigitsSigned:/^-?\d{1,2}/,threeDigitsSigned:/^-?\d{1,3}/,fourDigitsSigned:/^-?\d{1,4}/},XG={basicOptionalMinutes:/^([+-])(\d{2})(\d{2})?|Z/,basic:/^([+-])(\d{2})(\d{2})|Z/,basicOptionalSeconds:/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,extended:/^([+-])(\d{2}):(\d{2})|Z/,extendedOptionalSeconds:/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/};function g(K,G){if(!K)return K;return{value:G(K.value),rest:K.rest}}function h(K,G){var X=G.match(K);if(!X)return null;return{value:parseInt(X[0],10),rest:G.slice(X[0].length)}}function KG(K,G){var X=G.match(K);if(!X)return null;if(X[0]==="Z")return{value:0,rest:G.slice(1)};var B=X[1]==="+"?1:-1,U=X[2]?parseInt(X[2],10):0,Z=X[3]?parseInt(X[3],10):0,j=X[5]?parseInt(X[5],10):0;return{value:B*(U*xG+Z*BG+j*jX),rest:G.slice(X[0].length)}}function k0(K){return h(k.anyDigitsSigned,K)}function y(K,G){switch(K){case 1:return h(k.singleDigit,G);case 2:return h(k.twoDigits,G);case 3:return h(k.threeDigits,G);case 4:return h(k.fourDigits,G);default:return h(new RegExp("^\\d{1,"+K+"}"),G)}}function nG(K,G){switch(K){case 1:return h(k.singleDigitSigned,G);case 2:return h(k.twoDigitsSigned,G);case 3:return h(k.threeDigitsSigned,G);case 4:return h(k.fourDigitsSigned,G);default:return h(new RegExp("^-?\\d{1,"+K+"}"),G)}}function IX(K){switch(K){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;case"am":case"midnight":case"night":default:return 0}}function g0(K,G){var X=G>0,B=X?G:1-G,U;if(B<=50)U=K||100;else{var Z=B+50,j=Math.trunc(Z/100)*100,J=K>=Z%100;U=K+j-(J?100:0)}return X?U:1-U}function f0(K){return K%400===0||K%4===0&&K%100!==0}var PU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",130),E(R(X),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){var j=function J(q){return{year:q,isTwoDigitYear:U==="yy"}};switch(U){case"y":return g(y(4,B),j);case"yo":return g(Z.ordinalNumber(B,{unit:"year"}),j);default:return g(y(U.length,B),j)}}},{key:"validate",value:function X(B,U){return U.isTwoDigitYear||U.year>0}},{key:"set",value:function X(B,U,Z){var j=B.getFullYear();if(Z.isTwoDigitYear){var J=g0(Z.year,j);return B.setFullYear(J,0,1),B.setHours(0,0,0,0),B}var q=!("era"in U)||U.era===1?Z.year:1-Z.year;return B.setFullYear(q,0,1),B.setHours(0,0,0,0),B}}]),G}(P),vU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",130),E(R(X),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){var j=function J(q){return{year:q,isTwoDigitYear:U==="YY"}};switch(U){case"Y":return g(y(4,B),j);case"Yo":return g(Z.ordinalNumber(B,{unit:"year"}),j);default:return g(y(U.length,B),j)}}},{key:"validate",value:function X(B,U){return U.isTwoDigitYear||U.year>0}},{key:"set",value:function X(B,U,Z,j){var J=dG(B,j);if(Z.isTwoDigitYear){var q=g0(Z.year,J);return B.setFullYear(q,0,j.firstWeekContainsDate),B.setHours(0,0,0,0),_(B,j)}var Q=!("era"in U)||U.era===1?Z.year:1-Z.year;return B.setFullYear(Q,0,j.firstWeekContainsDate),B.setHours(0,0,0,0),_(B,j)}}]),G}(P),OU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",130),E(R(X),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U){if(U==="R")return nG(4,B);return nG(U.length,B)}},{key:"set",value:function X(B,U,Z){var j=L(B,0);return j.setFullYear(Z,0,4),j.setHours(0,0,0,0),a(j)}}]),G}(P),DU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",130),E(R(X),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U){if(U==="u")return nG(4,B);return nG(U.length,B)}},{key:"set",value:function X(B,U,Z){return B.setFullYear(Z,0,1),B.setHours(0,0,0,0),B}}]),G}(P),SU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",120),E(R(X),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"Q":case"QQ":return y(U.length,B);case"Qo":return Z.ordinalNumber(B,{unit:"quarter"});case"QQQ":return Z.quarter(B,{width:"abbreviated",context:"formatting"})||Z.quarter(B,{width:"narrow",context:"formatting"});case"QQQQQ":return Z.quarter(B,{width:"narrow",context:"formatting"});case"QQQQ":default:return Z.quarter(B,{width:"wide",context:"formatting"})||Z.quarter(B,{width:"abbreviated",context:"formatting"})||Z.quarter(B,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function X(B,U){return U>=1&&U<=4}},{key:"set",value:function X(B,U,Z){return B.setMonth((Z-1)*3,1),B.setHours(0,0,0,0),B}}]),G}(P),hU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",120),E(R(X),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"q":case"qq":return y(U.length,B);case"qo":return Z.ordinalNumber(B,{unit:"quarter"});case"qqq":return Z.quarter(B,{width:"abbreviated",context:"standalone"})||Z.quarter(B,{width:"narrow",context:"standalone"});case"qqqqq":return Z.quarter(B,{width:"narrow",context:"standalone"});case"qqqq":default:return Z.quarter(B,{width:"wide",context:"standalone"})||Z.quarter(B,{width:"abbreviated",context:"standalone"})||Z.quarter(B,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function X(B,U){return U>=1&&U<=4}},{key:"set",value:function X(B,U,Z){return B.setMonth((Z-1)*3,1),B.setHours(0,0,0,0),B}}]),G}(P),yU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),E(R(X),"priority",110),X}return I(G,[{key:"parse",value:function X(B,U,Z){var j=function J(q){return q-1};switch(U){case"M":return g(h(k.month,B),j);case"MM":return g(y(2,B),j);case"Mo":return g(Z.ordinalNumber(B,{unit:"month"}),j);case"MMM":return Z.month(B,{width:"abbreviated",context:"formatting"})||Z.month(B,{width:"narrow",context:"formatting"});case"MMMMM":return Z.month(B,{width:"narrow",context:"formatting"});case"MMMM":default:return Z.month(B,{width:"wide",context:"formatting"})||Z.month(B,{width:"abbreviated",context:"formatting"})||Z.month(B,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function X(B,U){return U>=0&&U<=11}},{key:"set",value:function X(B,U,Z){return B.setMonth(Z,1),B.setHours(0,0,0,0),B}}]),G}(P),kU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",110),E(R(X),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){var j=function J(q){return q-1};switch(U){case"L":return g(h(k.month,B),j);case"LL":return g(y(2,B),j);case"Lo":return g(Z.ordinalNumber(B,{unit:"month"}),j);case"LLL":return Z.month(B,{width:"abbreviated",context:"standalone"})||Z.month(B,{width:"narrow",context:"standalone"});case"LLLLL":return Z.month(B,{width:"narrow",context:"standalone"});case"LLLL":default:return Z.month(B,{width:"wide",context:"standalone"})||Z.month(B,{width:"abbreviated",context:"standalone"})||Z.month(B,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function X(B,U){return U>=0&&U<=11}},{key:"set",value:function X(B,U,Z){return B.setMonth(Z,1),B.setHours(0,0,0,0),B}}]),G}(P);function m0(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=CX(B,X)-G;return B.setDate(B.getDate()-U*7),N(B,X===null||X===void 0?void 0:X.in)}var gU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",100),E(R(X),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"w":return h(k.week,B);case"wo":return Z.ordinalNumber(B,{unit:"week"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=1&&U<=53}},{key:"set",value:function X(B,U,Z,j){return _(m0(B,Z,j),j)}}]),G}(P);function c0(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=wX(B,X)-G;return B.setDate(B.getDate()-U*7),B}var fU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",100),E(R(X),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"I":return h(k.week,B);case"Io":return Z.ordinalNumber(B,{unit:"week"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=1&&U<=53}},{key:"set",value:function X(B,U,Z){return a(c0(B,Z))}}]),G}(P),mU=[31,28,31,30,31,30,31,31,30,31,30,31],cU=[31,29,31,30,31,30,31,31,30,31,30,31],uU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"subPriority",1),E(R(X),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"d":return h(k.date,B);case"do":return Z.ordinalNumber(B,{unit:"date"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){var Z=B.getFullYear(),j=f0(Z),J=B.getMonth();if(j)return U>=1&&U<=cU[J];else return U>=1&&U<=mU[J]}},{key:"set",value:function X(B,U,Z){return B.setDate(Z),B.setHours(0,0,0,0),B}}]),G}(P),_U=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"subpriority",1),E(R(X),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"D":case"DD":return h(k.dayOfYear,B);case"Do":return Z.ordinalNumber(B,{unit:"date"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){var Z=B.getFullYear(),j=f0(Z);if(j)return U>=1&&U<=366;else return U>=1&&U<=365}},{key:"set",value:function X(B,U,Z){return B.setMonth(0,Z),B.setHours(0,0,0,0),B}}]),G}(P);function aG(K,G,X){var B,U,Z,j,J,q,Q=p(),H=(B=(U=(Z=(j=X===null||X===void 0?void 0:X.weekStartsOn)!==null&&j!==void 0?j:X===null||X===void 0||(J=X.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.weekStartsOn)!==null&&Z!==void 0?Z:Q.weekStartsOn)!==null&&U!==void 0?U:(q=Q.locale)===null||q===void 0||(q=q.options)===null||q===void 0?void 0:q.weekStartsOn)!==null&&B!==void 0?B:0,V=N(K,X===null||X===void 0?void 0:X.in),x=V.getDay(),C=G%7,w=(C+7)%7,M=7-H,A=G<0||G>6?G-(x+M)%7:(w+M)%7-(x+M)%7;return o(V,A,X)}var lU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"incompatibleTokens",["D","i","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"E":case"EE":case"EEE":return Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"});case"EEEEE":return Z.day(B,{width:"narrow",context:"formatting"});case"EEEEEE":return Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"});case"EEEE":default:return Z.day(B,{width:"wide",context:"formatting"})||Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function X(B,U){return U>=0&&U<=6}},{key:"set",value:function X(B,U,Z,j){return B=aG(B,Z,j),B.setHours(0,0,0,0),B}}]),G}(P),pU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z,j){var J=function q(Q){var H=Math.floor((Q-1)/7)*7;return(Q+j.weekStartsOn+6)%7+H};switch(U){case"e":case"ee":return g(y(U.length,B),J);case"eo":return g(Z.ordinalNumber(B,{unit:"day"}),J);case"eee":return Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"});case"eeeee":return Z.day(B,{width:"narrow",context:"formatting"});case"eeeeee":return Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"});case"eeee":default:return Z.day(B,{width:"wide",context:"formatting"})||Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function X(B,U){return U>=0&&U<=6}},{key:"set",value:function X(B,U,Z,j){return B=aG(B,Z,j),B.setHours(0,0,0,0),B}}]),G}(P),dU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z,j){var J=function q(Q){var H=Math.floor((Q-1)/7)*7;return(Q+j.weekStartsOn+6)%7+H};switch(U){case"c":case"cc":return g(y(U.length,B),J);case"co":return g(Z.ordinalNumber(B,{unit:"day"}),J);case"ccc":return Z.day(B,{width:"abbreviated",context:"standalone"})||Z.day(B,{width:"short",context:"standalone"})||Z.day(B,{width:"narrow",context:"standalone"});case"ccccc":return Z.day(B,{width:"narrow",context:"standalone"});case"cccccc":return Z.day(B,{width:"short",context:"standalone"})||Z.day(B,{width:"narrow",context:"standalone"});case"cccc":default:return Z.day(B,{width:"wide",context:"standalone"})||Z.day(B,{width:"abbreviated",context:"standalone"})||Z.day(B,{width:"short",context:"standalone"})||Z.day(B,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function X(B,U){return U>=0&&U<=6}},{key:"set",value:function X(B,U,Z,j){return B=aG(B,Z,j),B.setHours(0,0,0,0),B}}]),G}(P);function u0(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=D0(B,X),Z=G-U;return o(B,Z,X)}var rU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",90),E(R(X),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){var j=function J(q){if(q===0)return 7;return q};switch(U){case"i":case"ii":return y(U.length,B);case"io":return Z.ordinalNumber(B,{unit:"day"});case"iii":return g(Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"}),j);case"iiiii":return g(Z.day(B,{width:"narrow",context:"formatting"}),j);case"iiiiii":return g(Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"}),j);case"iiii":default:return g(Z.day(B,{width:"wide",context:"formatting"})||Z.day(B,{width:"abbreviated",context:"formatting"})||Z.day(B,{width:"short",context:"formatting"})||Z.day(B,{width:"narrow",context:"formatting"}),j)}}},{key:"validate",value:function X(B,U){return U>=1&&U<=7}},{key:"set",value:function X(B,U,Z){return B=u0(B,Z),B.setHours(0,0,0,0),B}}]),G}(P),iU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",80),E(R(X),"incompatibleTokens",["b","B","H","k","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"a":case"aa":case"aaa":return Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"aaaaa":return Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"aaaa":default:return Z.dayPeriod(B,{width:"wide",context:"formatting"})||Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"})}}},{key:"set",value:function X(B,U,Z){return B.setHours(IX(Z),0,0,0),B}}]),G}(P),sU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",80),E(R(X),"incompatibleTokens",["a","B","H","k","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"b":case"bb":case"bbb":return Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"bbbbb":return Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"bbbb":default:return Z.dayPeriod(B,{width:"wide",context:"formatting"})||Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"})}}},{key:"set",value:function X(B,U,Z){return B.setHours(IX(Z),0,0,0),B}}]),G}(P),nU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",80),E(R(X),"incompatibleTokens",["a","b","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"B":case"BB":case"BBB":return Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"BBBBB":return Z.dayPeriod(B,{width:"narrow",context:"formatting"});case"BBBB":default:return Z.dayPeriod(B,{width:"wide",context:"formatting"})||Z.dayPeriod(B,{width:"abbreviated",context:"formatting"})||Z.dayPeriod(B,{width:"narrow",context:"formatting"})}}},{key:"set",value:function X(B,U,Z){return B.setHours(IX(Z),0,0,0),B}}]),G}(P),aU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",70),E(R(X),"incompatibleTokens",["H","K","k","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"h":return h(k.hour12h,B);case"ho":return Z.ordinalNumber(B,{unit:"hour"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=1&&U<=12}},{key:"set",value:function X(B,U,Z){var j=B.getHours()>=12;if(j&&Z<12)B.setHours(Z+12,0,0,0);else if(!j&&Z===12)B.setHours(0,0,0,0);else B.setHours(Z,0,0,0);return B}}]),G}(P),oU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",70),E(R(X),"incompatibleTokens",["a","b","h","K","k","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"H":return h(k.hour23h,B);case"Ho":return Z.ordinalNumber(B,{unit:"hour"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=0&&U<=23}},{key:"set",value:function X(B,U,Z){return B.setHours(Z,0,0,0),B}}]),G}(P),eU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",70),E(R(X),"incompatibleTokens",["h","H","k","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"K":return h(k.hour11h,B);case"Ko":return Z.ordinalNumber(B,{unit:"hour"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=0&&U<=11}},{key:"set",value:function X(B,U,Z){var j=B.getHours()>=12;if(j&&Z<12)B.setHours(Z+12,0,0,0);else B.setHours(Z,0,0,0);return B}}]),G}(P),tU=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",70),E(R(X),"incompatibleTokens",["a","b","h","H","K","t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"k":return h(k.hour24h,B);case"ko":return Z.ordinalNumber(B,{unit:"hour"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=1&&U<=24}},{key:"set",value:function X(B,U,Z){var j=Z<=24?Z%24:Z;return B.setHours(j,0,0,0),B}}]),G}(P),GZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",60),E(R(X),"incompatibleTokens",["t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"m":return h(k.minute,B);case"mo":return Z.ordinalNumber(B,{unit:"minute"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=0&&U<=59}},{key:"set",value:function X(B,U,Z){return B.setMinutes(Z,0,0),B}}]),G}(P),XZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",50),E(R(X),"incompatibleTokens",["t","T"]),X}return I(G,[{key:"parse",value:function X(B,U,Z){switch(U){case"s":return h(k.second,B);case"so":return Z.ordinalNumber(B,{unit:"second"});default:return y(U.length,B)}}},{key:"validate",value:function X(B,U){return U>=0&&U<=59}},{key:"set",value:function X(B,U,Z){return B.setSeconds(Z,0),B}}]),G}(P),KZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",30),E(R(X),"incompatibleTokens",["t","T"]),X}return I(G,[{key:"parse",value:function X(B,U){var Z=function j(J){return Math.trunc(J*Math.pow(10,-U.length+3))};return g(y(U.length,B),Z)}},{key:"set",value:function X(B,U,Z){return B.setMilliseconds(Z),B}}]),G}(P),BZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",10),E(R(X),"incompatibleTokens",["t","T","x"]),X}return I(G,[{key:"parse",value:function X(B,U){switch(U){case"X":return KG(XG.basicOptionalMinutes,B);case"XX":return KG(XG.basic,B);case"XXXX":return KG(XG.basicOptionalSeconds,B);case"XXXXX":return KG(XG.extendedOptionalSeconds,B);case"XXX":default:return KG(XG.extended,B)}}},{key:"set",value:function X(B,U,Z){if(U.timestampIsSet)return B;return L(B,B.getTime()-r(B)-Z)}}]),G}(P),UZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",10),E(R(X),"incompatibleTokens",["t","T","X"]),X}return I(G,[{key:"parse",value:function X(B,U){switch(U){case"x":return KG(XG.basicOptionalMinutes,B);case"xx":return KG(XG.basic,B);case"xxxx":return KG(XG.basicOptionalSeconds,B);case"xxxxx":return KG(XG.extendedOptionalSeconds,B);case"xxx":default:return KG(XG.extended,B)}}},{key:"set",value:function X(B,U,Z){if(U.timestampIsSet)return B;return L(B,B.getTime()-r(B)-Z)}}]),G}(P),ZZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",40),E(R(X),"incompatibleTokens","*"),X}return I(G,[{key:"parse",value:function X(B){return k0(B)}},{key:"set",value:function X(B,U,Z){return[L(B,Z*1000),{timestampIsSet:!0}]}}]),G}(P),jZ=function(K){z(G,K);function G(){var X;Y(this,G);for(var B=arguments.length,U=new Array(B),Z=0;Z<B;Z++)U[Z]=arguments[Z];return X=W(this,G,[].concat(U)),E(R(X),"priority",20),E(R(X),"incompatibleTokens","*"),X}return I(G,[{key:"parse",value:function X(B){return k0(B)}},{key:"set",value:function X(B,U,Z){return[L(B,Z),{timestampIsSet:!0}]}}]),G}(P),_0={G:new $U,y:new PU,Y:new vU,R:new OU,u:new DU,Q:new SU,q:new hU,M:new yU,L:new kU,w:new gU,I:new fU,d:new uU,D:new _U,E:new lU,e:new pU,c:new dU,i:new rU,a:new iU,b:new sU,B:new nU,h:new aU,H:new oU,K:new eU,k:new tU,m:new GZ,s:new XZ,S:new KZ,X:new BZ,x:new UZ,t:new ZZ,T:new jZ};function l0(K,G,X,B){var U,Z,j,J,q,Q,H,V,x,C,w,M,A,T,b=function u(){return L((B===null||B===void 0?void 0:B.in)||X,NaN)},v=O0(),D=(U=(Z=B===null||B===void 0?void 0:B.locale)!==null&&Z!==void 0?Z:v.locale)!==null&&U!==void 0?U:MG,l=(j=(J=(q=(Q=B===null||B===void 0?void 0:B.firstWeekContainsDate)!==null&&Q!==void 0?Q:B===null||B===void 0||(H=B.locale)===null||H===void 0||(H=H.options)===null||H===void 0?void 0:H.firstWeekContainsDate)!==null&&q!==void 0?q:v.firstWeekContainsDate)!==null&&J!==void 0?J:(V=v.locale)===null||V===void 0||(V=V.options)===null||V===void 0?void 0:V.firstWeekContainsDate)!==null&&j!==void 0?j:1,d=(x=(C=(w=(M=B===null||B===void 0?void 0:B.weekStartsOn)!==null&&M!==void 0?M:B===null||B===void 0||(A=B.locale)===null||A===void 0||(A=A.options)===null||A===void 0?void 0:A.weekStartsOn)!==null&&w!==void 0?w:v.weekStartsOn)!==null&&C!==void 0?C:(T=v.locale)===null||T===void 0||(T=T.options)===null||T===void 0?void 0:T.weekStartsOn)!==null&&x!==void 0?x:0;if(!G)return K?b():N(X,B===null||B===void 0?void 0:B.in);var jG={firstWeekContainsDate:l,weekStartsOn:d,locale:D},m=[new zU(B===null||B===void 0?void 0:B.in,X)],c=G.match(QZ).map(function(u){var S=u[0];if(S in iG){var i=iG[S];return i(u,D.formatLong)}return u}).join("").match(qZ),JG=[],tG=SX(c),GK;try{var NJ=function u(){var S=GK.value;if(!(B!==null&&B!==void 0&&B.useAdditionalWeekYearTokens)&&T0(S))bX(S,G,K);if(!(B!==null&&B!==void 0&&B.useAdditionalDayOfYearTokens)&&I0(S))bX(S,G,K);var i=S[0],KX=_0[i];if(KX){var UK=KX.incompatibleTokens;if(Array.isArray(UK)){var ZK=JG.find(function(jK){return UK.includes(jK.token)||jK.token===i});if(ZK)throw new RangeError("The format string mustn't contain `".concat(ZK.fullToken,"` and `").concat(S,"` at the same time"))}else if(KX.incompatibleTokens==="*"&&JG.length>0)throw new RangeError("The format string mustn't contain `".concat(S,"` and any other token at the same time"));JG.push({token:i,fullToken:S});var DX=KX.run(K,S,D.match,jG);if(!DX)return{v:b()};m.push(DX.setter),K=DX.rest}else{if(i.match(xZ))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");if(S==="''")S="'";else if(i==="'")S=JZ(S);if(K.indexOf(S)===0)K=K.slice(S.length);else return{v:b()}}},OX;for(tG.s();!(GK=tG.n()).done;)if(OX=NJ(),OX)return OX.v}catch(u){tG.e(u)}finally{tG.f()}if(K.length>0&&VZ.test(K))return b();var VJ=m.map(function(u){return u.priority}).sort(function(u,S){return S-u}).filter(function(u,S,i){return i.indexOf(u)===S}).map(function(u){return m.filter(function(S){return S.priority===u}).sort(function(S,i){return i.subPriority-S.subPriority})}).map(function(u){return u[0]}),YG=N(X,B===null||B===void 0?void 0:B.in);if(isNaN(+YG))return b();var XK={},GX=SX(VJ),KK;try{for(GX.s();!(KK=GX.n()).done;){var BK=KK.value;if(!BK.validate(YG,jG))return b();var XX=BK.set(YG,XK,jG);if(Array.isArray(XX))YG=XX[0],Object.assign(XK,XX[1]);else YG=XX}}catch(u){GX.e(u)}finally{GX.f()}return YG}function JZ(K){return K.match(HZ)[1].replace(NZ,"'")}var qZ=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,QZ=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,HZ=/^'([^]*?)'?$/,NZ=/''/g,VZ=/\S/,xZ=/[a-zA-Z]/;function EZ(K,G,X){return UG(l0(K,G,new Date,X))}function RZ(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===1}function AZ(K){return+N(K)<Date.now()}function TX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setMinutes(0,0,0),X}function p0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return+TX(Z)===+TX(j)}function WX(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return+_(Z,X)===+_(j,X)}function d0(K,G,X){return WX(K,G,s(s({},X),{},{weekStartsOn:1}))}function LZ(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return+QG(Z)===+QG(j)}function zX(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setSeconds(0,0),X}function r0(K,G){return+zX(K)===+zX(G)}function i0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return Z.getFullYear()===j.getFullYear()&&Z.getMonth()===j.getMonth()}function s0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return+EG(Z)===+EG(j)}function $X(K,G){var X=N(K,G===null||G===void 0?void 0:G.in);return X.setMilliseconds(0),X}function n0(K,G){return+$X(K)===+$X(G)}function a0(K,G,X){var B=O(X===null||X===void 0?void 0:X.in,K,G),U=$(B,2),Z=U[0],j=U[1];return Z.getFullYear()===j.getFullYear()}function FZ(K,G){return p0(N(K,G===null||G===void 0?void 0:G.in),f((G===null||G===void 0?void 0:G.in)||K))}function wZ(K,G){return d0(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K))}function CZ(K){return r0(K,f(K))}function MZ(K,G){return i0(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K))}function bZ(K,G){return s0(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K))}function YZ(K){return n0(K,f(K))}function IZ(K,G){return WX(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K),G)}function TZ(K,G){return a0(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K))}function WZ(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===4}function zZ(K,G){return WG(L((G===null||G===void 0?void 0:G.in)||K,K),f((G===null||G===void 0?void 0:G.in)||K))}function $Z(K,G){return WG(K,o(f((G===null||G===void 0?void 0:G.in)||K),1),G)}function PZ(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===2}function vZ(K,G){return N(K,G===null||G===void 0?void 0:G.in).getDay()===3}function OZ(K,G,X){var B=+N(K,X===null||X===void 0?void 0:X.in),U=[+N(G.start,X===null||X===void 0?void 0:X.in),+N(G.end,X===null||X===void 0?void 0:X.in)].sort(function(q,Q){return q-Q}),Z=$(U,2),j=Z[0],J=Z[1];return B>=j&&B<=J}function oG(K,G,X){return o(K,-G,X)}function DZ(K,G){return WG(L((G===null||G===void 0?void 0:G.in)||K,K),oG(f((G===null||G===void 0?void 0:G.in)||K),1))}function SZ(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=9+Math.floor(B/10)*10;return X.setFullYear(U+1,0,0),X.setHours(0,0,0,0),N(X,G===null||G===void 0?void 0:G.in)}function o0(K,G){var X,B,U,Z,j,J,q=p(),Q=(X=(B=(U=(Z=G===null||G===void 0?void 0:G.weekStartsOn)!==null&&Z!==void 0?Z:G===null||G===void 0||(j=G.locale)===null||j===void 0||(j=j.options)===null||j===void 0?void 0:j.weekStartsOn)!==null&&U!==void 0?U:q.weekStartsOn)!==null&&B!==void 0?B:(J=q.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.weekStartsOn)!==null&&X!==void 0?X:0,H=N(K,G===null||G===void 0?void 0:G.in),V=H.getDay(),x=(V<Q?-7:0)+6-(V-Q);return H.setHours(0,0,0,0),H.setDate(H.getDate()+x),H}function hZ(K,G){return o0(K,s(s({},G),{},{weekStartsOn:1}))}function yZ(K,G){var X=qG(K,G),B=L((G===null||G===void 0?void 0:G.in)||K,0);B.setFullYear(X+1,0,4),B.setHours(0,0,0,0);var U=a(B,G);return U.setDate(U.getDate()-1),U}function kZ(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getMonth(),U=B-B%3+3;return X.setMonth(U,0),X.setHours(0,0,0,0),X}function gZ(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear();return X.setFullYear(B+1,0,0),X.setHours(0,0,0,0),X}function fZ(K,G){var X=N(K);if(!UG(X))throw new RangeError("Invalid time value");var B=G.match(cZ);if(!B)return"";var U=B.map(function(Z){if(Z==="''")return"'";var j=Z[0];if(j==="'")return mZ(Z);var J=GG[j];if(J)return J(X,Z);if(j.match(lZ))throw new RangeError("Format string contains an unescaped latin alphabet character `"+j+"`");return Z}).join("");return U}function mZ(K){var G=K.match(uZ);if(!G)return K;return G[1].replace(_Z,"'")}var cZ=/(\w)\1*|''|'(''|[^'])+('|$)|./g,uZ=/^'([^]*?)'?$/,_Z=/''/g,lZ=/[a-zA-Z]/;function pZ(K){var{years:G,months:X,weeks:B,days:U,hours:Z,minutes:j,seconds:J}=K,q=0;if(G)q+=G*SG;if(X)q+=X*(SG/12);if(B)q+=B*7;if(U)q+=U;var Q=q*24*60*60;if(Z)Q+=Z*60*60;if(j)Q+=j*60;if(J)Q+=J;return Math.trunc(Q*1000)}function dZ(K){var G=K/xG;return Math.trunc(G)}function rZ(K){var G=K/BG;return Math.trunc(G)}function iZ(K){var G=K/jX;return Math.trunc(G)}function sZ(K){var G=K/dX;return Math.trunc(G)}function nZ(K){return Math.trunc(K*BG)}function aZ(K){return Math.trunc(K*JX)}function oZ(K){var G=K/rX;return Math.trunc(G)}function eZ(K){var G=K/iX;return Math.trunc(G)}function NG(K,G,X){var B=G-sG(K,X);if(B<=0)B+=7;return o(K,B,X)}function tZ(K,G){return NG(K,5,G)}function Gj(K,G){return NG(K,1,G)}function Xj(K,G){return NG(K,6,G)}function Kj(K,G){return NG(K,0,G)}function Bj(K,G){return NG(K,4,G)}function Uj(K,G){return NG(K,2,G)}function Zj(K,G){return NG(K,3,G)}function jj(K,G){var X,B=function C(){return L(G===null||G===void 0?void 0:G.in,NaN)},U=(X=G===null||G===void 0?void 0:G.additionalDigits)!==null&&X!==void 0?X:2,Z=Jj(K),j;if(Z.date){var J=qj(Z.date,U);j=Qj(J.restDateString,J.year)}if(!j||isNaN(+j))return B();var q=+j,Q=0,H;if(Z.time){if(Q=Hj(Z.time),isNaN(Q))return B()}if(Z.timezone){if(H=Nj(Z.timezone),isNaN(H))return B()}else{var V=new Date(q+Q),x=N(0,G===null||G===void 0?void 0:G.in);return x.setFullYear(V.getUTCFullYear(),V.getUTCMonth(),V.getUTCDate()),x.setHours(V.getUTCHours(),V.getUTCMinutes(),V.getUTCSeconds(),V.getUTCMilliseconds()),x}return N(q+Q+H,G===null||G===void 0?void 0:G.in)}function Jj(K){var G={},X=K.split(eG.dateTimeDelimiter),B;if(X.length>2)return G;if(/:/.test(X[0]))B=X[0];else if(G.date=X[0],B=X[1],eG.timeZoneDelimiter.test(G.date))G.date=K.split(eG.timeZoneDelimiter)[0],B=K.substr(G.date.length,K.length);if(B){var U=eG.timezone.exec(B);if(U)G.time=B.replace(U[1],""),G.timezone=U[1];else G.time=B}return G}function qj(K,G){var X=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+G)+"})|(\\d{2}|[+-]\\d{"+(2+G)+"})$)"),B=K.match(X);if(!B)return{year:NaN,restDateString:""};var U=B[1]?parseInt(B[1]):null,Z=B[2]?parseInt(B[2]):null;return{year:Z===null?U:Z*100,restDateString:K.slice((B[1]||B[2]).length)}}function Qj(K,G){if(G===null)return new Date(NaN);var X=K.match(Fj);if(!X)return new Date(NaN);var B=!!X[4],U=vG(X[1]),Z=vG(X[2])-1,j=vG(X[3]),J=vG(X[4]),q=vG(X[5])-1;if(B){if(!Rj(G,J,q))return new Date(NaN);return Vj(G,J,q)}else{var Q=new Date(0);if(!xj(G,Z,j)||!Ej(G,U))return new Date(NaN);return Q.setUTCFullYear(G,Z,Math.max(U,j)),Q}}function vG(K){return K?parseInt(K):1}function Hj(K){var G=K.match(wj);if(!G)return NaN;var X=PX(G[1]),B=PX(G[2]),U=PX(G[3]);if(!Aj(X,B,U))return NaN;return X*xG+B*BG+U*1000}function PX(K){return K&&parseFloat(K.replace(",","."))||0}function Nj(K){if(K==="Z")return 0;var G=K.match(Cj);if(!G)return 0;var X=G[1]==="+"?-1:1,B=parseInt(G[2]),U=G[3]&&parseInt(G[3])||0;if(!Lj(B,U))return NaN;return X*(B*xG+U*BG)}function Vj(K,G,X){var B=new Date(0);B.setUTCFullYear(K,0,4);var U=B.getUTCDay()||7,Z=(G-1)*7+X+1-U;return B.setUTCDate(B.getUTCDate()+Z),B}function e0(K){return K%400===0||K%4===0&&K%100!==0}function xj(K,G,X){return G>=0&&G<=11&&X>=1&&X<=(Mj[G]||(e0(K)?29:28))}function Ej(K,G){return G>=1&&G<=(e0(K)?366:365)}function Rj(K,G,X){return G>=1&&G<=53&&X>=0&&X<=6}function Aj(K,G,X){if(K===24)return G===0&&X===0;return X>=0&&X<60&&G>=0&&G<60&&K>=0&&K<25}function Lj(K,G){return G>=0&&G<=59}var eG={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Fj=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,wj=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Cj=/^([+-])(\d{2})(?::?(\d{2}))?$/,Mj=[31,null,31,30,31,30,31,31,30,31,30,31];function bj(K,G){var X=K.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);if(!X)return N(NaN,G===null||G===void 0?void 0:G.in);return N(Date.UTC(+X[1],+X[2]-1,+X[3],+X[4]-(+X[9]||0)*(X[8]=="-"?-1:1),+X[5]-(+X[10]||0)*(X[8]=="-"?-1:1),+X[6],+((X[7]||"0")+"00").substring(0,3)),G===null||G===void 0?void 0:G.in)}function VG(K,G,X){var B=sG(K,X)-G;if(B<=0)B+=7;return oG(K,B,X)}function Yj(K,G){return VG(K,5,G)}function Ij(K,G){return VG(K,1,G)}function Tj(K,G){return VG(K,6,G)}function Wj(K,G){return VG(K,0,G)}function zj(K,G){return VG(K,4,G)}function $j(K,G){return VG(K,2,G)}function Pj(K,G){return VG(K,3,G)}function vj(K){return Math.trunc(K*rX)}function Oj(K){var G=K/sX;return Math.trunc(G)}function Dj(K,G){var X,B,U=(X=G===null||G===void 0?void 0:G.nearestTo)!==null&&X!==void 0?X:1;if(U<1||U>12)return L((G===null||G===void 0?void 0:G.in)||K,NaN);var Z=N(K,G===null||G===void 0?void 0:G.in),j=Z.getMinutes()/60,J=Z.getSeconds()/60/60,q=Z.getMilliseconds()/1000/60/60,Q=Z.getHours()+j+J+q,H=(B=G===null||G===void 0?void 0:G.roundingMethod)!==null&&B!==void 0?B:"round",V=HG(H),x=V(Q/U)*U;return Z.setHours(x,0,0,0),Z}function Sj(K,G){var X,B,U=(X=G===null||G===void 0?void 0:G.nearestTo)!==null&&X!==void 0?X:1;if(U<1||U>30)return L(K,NaN);var Z=N(K,G===null||G===void 0?void 0:G.in),j=Z.getSeconds()/60,J=Z.getMilliseconds()/1000/60,q=Z.getMinutes()+j+J,Q=(B=G===null||G===void 0?void 0:G.roundingMethod)!==null&&B!==void 0?B:"round",H=HG(Q),V=H(q/U)*U;return Z.setMinutes(V,0,0),Z}function hj(K){var G=K/yG;return Math.trunc(G)}function yj(K){return K*jX}function kj(K){var G=K/JX;return Math.trunc(G)}function vX(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=B.getFullYear(),Z=B.getDate(),j=L((X===null||X===void 0?void 0:X.in)||K,0);j.setFullYear(U,G,15),j.setHours(0,0,0,0);var J=P0(j);return B.setMonth(G,Math.min(Z,J)),B}function gj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);if(isNaN(+B))return L((X===null||X===void 0?void 0:X.in)||K,NaN);if(G.year!=null)B.setFullYear(G.year);if(G.month!=null)B=vX(B,G.month);if(G.date!=null)B.setDate(G.date);if(G.hours!=null)B.setHours(G.hours);if(G.minutes!=null)B.setMinutes(G.minutes);if(G.seconds!=null)B.setSeconds(G.seconds);if(G.milliseconds!=null)B.setMilliseconds(G.milliseconds);return B}function fj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setDate(G),B}function mj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setMonth(0),B.setDate(G),B}function cj(K){var G={},X=p();for(var B in X)if(Object.prototype.hasOwnProperty.call(X,B))G[B]=X[B];for(var U in K)if(Object.prototype.hasOwnProperty.call(K,U))if(K[U]===void 0)delete G[U];else G[U]=K[U];FK(G)}function uj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setHours(G),B}function _j(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setMilliseconds(G),B}function lj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setMinutes(G),B}function pj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in),U=Math.trunc(B.getMonth()/3)+1,Z=G-U;return vX(B,B.getMonth()+Z*3)}function dj(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);return B.setSeconds(G),B}function rj(K,G,X){var B,U,Z,j,J,q,Q=p(),H=(B=(U=(Z=(j=X===null||X===void 0?void 0:X.firstWeekContainsDate)!==null&&j!==void 0?j:X===null||X===void 0||(J=X.locale)===null||J===void 0||(J=J.options)===null||J===void 0?void 0:J.firstWeekContainsDate)!==null&&Z!==void 0?Z:Q.firstWeekContainsDate)!==null&&U!==void 0?U:(q=Q.locale)===null||q===void 0||(q=q.options)===null||q===void 0?void 0:q.firstWeekContainsDate)!==null&&B!==void 0?B:1,V=e(N(K,X===null||X===void 0?void 0:X.in),rG(K,X),X),x=L((X===null||X===void 0?void 0:X.in)||K,0);x.setFullYear(G,0,H),x.setHours(0,0,0,0);var C=rG(x,X);return C.setDate(C.getDate()+V),C}function ij(K,G,X){var B=N(K,X===null||X===void 0?void 0:X.in);if(isNaN(+B))return L((X===null||X===void 0?void 0:X.in)||K,NaN);return B.setFullYear(G),B}function sj(K,G){var X=N(K,G===null||G===void 0?void 0:G.in),B=X.getFullYear(),U=Math.floor(B/10)*10;return X.setFullYear(U,0,1),X.setHours(0,0,0,0),X}function nj(K){return wG(Date.now(),K)}function aj(K){var G=f(K===null||K===void 0?void 0:K.in),X=G.getFullYear(),B=G.getMonth(),U=G.getDate(),Z=L(K===null||K===void 0?void 0:K.in,0);return Z.setFullYear(X,B,U+1),Z.setHours(0,0,0,0),Z}function oj(K){var G=f(K===null||K===void 0?void 0:K.in),X=G.getFullYear(),B=G.getMonth(),U=G.getDate(),Z=f(K===null||K===void 0?void 0:K.in);return Z.setFullYear(X,B,U-1),Z.setHours(0,0,0,0),Z}function t0(K,G,X){return TG(K,-G,X)}function ej(K,G,X){var B=G.years,U=B===void 0?0:B,Z=G.months,j=Z===void 0?0:Z,J=G.weeks,q=J===void 0?0:J,Q=G.days,H=Q===void 0?0:Q,V=G.hours,x=V===void 0?0:V,C=G.minutes,w=C===void 0?0:C,M=G.seconds,A=M===void 0?0:M,T=t0(K,j+U*12,X),b=oG(T,H+q*7,X),v=w+x*60,D=A+v*60,l=D*1000;return L((X===null||X===void 0?void 0:X.in)||K,+b-l)}function tj(K,G,X){return G0(K,-G,X)}function GJ(K,G,X){return X0(K,-G,X)}function XJ(K,G,X){return kG(K,-G,X)}function KJ(K,G,X){return QX(K,-G,X)}function BJ(K,G,X){return HX(K,-G,X)}function UJ(K,G,X){return Z0(K,-G,X)}function ZJ(K,G,X){return gG(K,-G,X)}function jJ(K,G,X){return j0(K,-G,X)}function JJ(K){return Math.trunc(K*_X)}function qJ(K){return Math.trunc(K*SG)}function QJ(K){return Math.trunc(K*iX)}function HJ(K){return Math.trunc(K*sX)}window.dateFns=s(s({},window.dateFns),uX)})();

//# debugId=B4330B5F171A262E64756E2164756E21

--- FILE: ./node_modules/date-fns/clamp.cjs ---
"use strict";
exports.clamp = clamp;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./max.cjs");
var _index3 = require("./min.cjs");

/**
 * The {@link clamp} function options.
 */

/**
 * The {@link clamp} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name clamp
 * @category Interval Helpers
 * @summary Return a date bounded by the start and the end of the given interval.
 *
 * @description
 * Clamps a date to the lower bound with the start of the interval and the upper
 * bound with the end of the interval.
 *
 * - When the date is less than the start of the interval, the start is returned.
 * - When the date is greater than the end of the interval, the end is returned.
 * - Otherwise the date is returned.
 *
 * @typeParam DateType - Date argument type.
 * @typeParam IntervalType - Interval argument type.
 * @typeParam Options - Options type.
 *
 * @param date - The date to be bounded
 * @param interval - The interval to bound to
 * @param options - An object with options
 *
 * @returns The date bounded by the start and the end of the interval
 *
 * @example
 * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021
 * const result = clamp(new Date(2021, 2, 21), {
 *   start: new Date(2021, 2, 22),
 *   end: new Date(2021, 3, 1),
 * })
 * //=> Mon Mar 22 2021 00:00:00
 */
function clamp(date, interval, options) {
  const [date_, start, end] = (0, _index.normalizeDates)(
    options?.in,
    date,
    interval.start,
    interval.end,
  );

  return (0, _index3.min)(
    [(0, _index2.max)([date_, start], options), end],
    options,
  );
}

--- FILE: ./node_modules/date-fns/clamp.d.ts ---
import type { ContextOptions, DateArg, Interval } from "./types.js";
/**
 * The {@link clamp} function options.
 */
export interface ClampOptions<ContextDate extends Date = Date>
  extends ContextOptions<ContextDate> {}
/**
 * The {@link clamp} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type ClampResult<
  DateType extends DateArg<Date>,
  IntervalType extends Interval,
  Options extends ClampOptions | undefined,
> =
  Options extends ClampOptions<infer DateType extends Date>
    ? DateType
    : DateType extends Date
      ? DateType
      : IntervalType["start"] extends Date
        ? IntervalType["start"]
        : IntervalType["end"] extends Date
          ? IntervalType["end"]
          : Date;
/**
 * @name clamp
 * @category Interval Helpers
 * @summary Return a date bounded by the start and the end of the given interval.
 *
 * @description
 * Clamps a date to the lower bound with the start of the interval and the upper
 * bound with the end of the interval.
 *
 * - When the date is less than the start of the interval, the start is returned.
 * - When the date is greater than the end of the interval, the end is returned.
 * - Otherwise the date is returned.
 *
 * @typeParam DateType - Date argument type.
 * @typeParam IntervalType - Interval argument type.
 * @typeParam Options - Options type.
 *
 * @param date - The date to be bounded
 * @param interval - The interval to bound to
 * @param options - An object with options
 *
 * @returns The date bounded by the start and the end of the interval
 *
 * @example
 * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021
 * const result = clamp(new Date(2021, 2, 21), {
 *   start: new Date(2021, 2, 22),
 *   end: new Date(2021, 3, 1),
 * })
 * //=> Mon Mar 22 2021 00:00:00
 */
export declare function clamp<
  DateType extends DateArg<Date>,
  IntervalType extends Interval,
  Options extends ClampOptions | undefined = undefined,
>(
  date: DateType,
  interval: IntervalType,
  options?: Options,
): ClampResult<DateType, IntervalType, Options>;

--- FILE: ./node_modules/date-fns/clamp.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { max } from "./max.js";
import { min } from "./min.js";

/**
 * The {@link clamp} function options.
 */

/**
 * The {@link clamp} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name clamp
 * @category Interval Helpers
 * @summary Return a date bounded by the start and the end of the given interval.
 *
 * @description
 * Clamps a date to the lower bound with the start of the interval and the upper
 * bound with the end of the interval.
 *
 * - When the date is less than the start of the interval, the start is returned.
 * - When the date is greater than the end of the interval, the end is returned.
 * - Otherwise the date is returned.
 *
 * @typeParam DateType - Date argument type.
 * @typeParam IntervalType - Interval argument type.
 * @typeParam Options - Options type.
 *
 * @param date - The date to be bounded
 * @param interval - The interval to bound to
 * @param options - An object with options
 *
 * @returns The date bounded by the start and the end of the interval
 *
 * @example
 * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021
 * const result = clamp(new Date(2021, 2, 21), {
 *   start: new Date(2021, 2, 22),
 *   end: new Date(2021, 3, 1),
 * })
 * //=> Mon Mar 22 2021 00:00:00
 */
export function clamp(date, interval, options) {
  const [date_, start, end] = normalizeDates(
    options?.in,
    date,
    interval.start,
    interval.end,
  );

  return min([max([date_, start], options), end], options);
}

// Fallback for modularized imports:
export default clamp;

--- FILE: ./node_modules/date-fns/closestIndexTo.cjs ---
"use strict";
exports.closestIndexTo = closestIndexTo;
var _index = require("./toDate.cjs");

/**
 * @name closestIndexTo
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns An index of the date closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * const dateToCompare = new Date(2015, 8, 6)
 * const datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * const result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */
function closestIndexTo(dateToCompare, dates) {
  // [TODO] It would be better to return -1 here rather than undefined, as this
  // is how JS behaves, but it would be a breaking change, so we need
  // to consider it for v4.
  const timeToCompare = +(0, _index.toDate)(dateToCompare);

  if (isNaN(timeToCompare)) return NaN;

  let result;
  let minDistance;
  dates.forEach((date, index) => {
    const date_ = (0, _index.toDate)(date);

    if (isNaN(+date_)) {
      result = NaN;
      minDistance = NaN;
      return;
    }

    const distance = Math.abs(timeToCompare - +date_);
    if (result == null || distance < minDistance) {
      result = index;
      minDistance = distance;
    }
  });

  return result;
}

--- FILE: ./node_modules/date-fns/closestIndexTo.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name closestIndexTo
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns An index of the date closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * const dateToCompare = new Date(2015, 8, 6)
 * const datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * const result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */
export declare function closestIndexTo(
  dateToCompare: DateArg<Date> & {},
  dates: Array<DateArg<Date> & {}>,
): number | undefined;

--- FILE: ./node_modules/date-fns/closestIndexTo.js ---
import { toDate } from "./toDate.js";

/**
 * @name closestIndexTo
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns An index of the date closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * const dateToCompare = new Date(2015, 8, 6)
 * const datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * const result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */
export function closestIndexTo(dateToCompare, dates) {
  // [TODO] It would be better to return -1 here rather than undefined, as this
  // is how JS behaves, but it would be a breaking change, so we need
  // to consider it for v4.
  const timeToCompare = +toDate(dateToCompare);

  if (isNaN(timeToCompare)) return NaN;

  let result;
  let minDistance;
  dates.forEach((date, index) => {
    const date_ = toDate(date);

    if (isNaN(+date_)) {
      result = NaN;
      minDistance = NaN;
      return;
    }

    const distance = Math.abs(timeToCompare - +date_);
    if (result == null || distance < minDistance) {
      result = index;
      minDistance = distance;
    }
  });

  return result;
}

// Fallback for modularized imports:
export default closestIndexTo;

--- FILE: ./node_modules/date-fns/closestTo.cjs ---
"use strict";
exports.closestTo = closestTo;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./closestIndexTo.cjs");
var _index3 = require("./constructFrom.cjs");

/**
 * The {@link closestTo} function options.
 */

/**
 * The {@link closestTo} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name closestTo
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @typeParam DateToCompare - Date to compare argument type.
 * @typeParam DatesType - Dates array argument type.
 * @typeParam Options - Options type.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns The date from the array closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * const dateToCompare = new Date(2015, 8, 6)
 * const result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */
function closestTo(dateToCompare, dates, options) {
  const [dateToCompare_, ...dates_] = (0, _index.normalizeDates)(
    options?.in,
    dateToCompare,
    ...dates,
  );

  const index = (0, _index2.closestIndexTo)(dateToCompare_, dates_);

  if (typeof index === "number" && isNaN(index))
    return (0, _index3.constructFrom)(dateToCompare_, NaN);

  if (index !== undefined) return dates_[index];
}

--- FILE: ./node_modules/date-fns/closestTo.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link closestTo} function options.
 */
export interface ClosestToOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * The {@link closestTo} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type ClosestToResult<
  DateToCompare extends DateArg<Date>,
  DatesType extends DateArg<Date>[],
  Options extends ClosestToOptions | undefined,
> =
  Options extends ClosestToOptions<infer DateType extends Date>
    ? DateType
    : DateToCompare extends Date
      ? DateToCompare
      : DatesType extends DateArg<infer DateType>[]
        ? DateType
        : Date;
/**
 * @name closestTo
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @typeParam DateToCompare - Date to compare argument type.
 * @typeParam DatesType - Dates array argument type.
 * @typeParam Options - Options type.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns The date from the array closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * const dateToCompare = new Date(2015, 8, 6)
 * const result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */
export declare function closestTo<
  DateToCompare extends DateArg<Date>,
  DatesType extends DateArg<Date>[],
  Options extends ClosestToOptions | undefined = undefined,
>(
  dateToCompare: DateToCompare,
  dates: DatesType,
  options?: Options | undefined,
): ClosestToResult<DateToCompare, DatesType, Options> | undefined;

--- FILE: ./node_modules/date-fns/closestTo.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { closestIndexTo } from "./closestIndexTo.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link closestTo} function options.
 */

/**
 * The {@link closestTo} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name closestTo
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @typeParam DateToCompare - Date to compare argument type.
 * @typeParam DatesType - Dates array argument type.
 * @typeParam Options - Options type.
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns The date from the array closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * const dateToCompare = new Date(2015, 8, 6)
 * const result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */
export function closestTo(dateToCompare, dates, options) {
  const [dateToCompare_, ...dates_] = normalizeDates(
    options?.in,
    dateToCompare,
    ...dates,
  );

  const index = closestIndexTo(dateToCompare_, dates_);

  if (typeof index === "number" && isNaN(index))
    return constructFrom(dateToCompare_, NaN);

  if (index !== undefined) return dates_[index];
}

// Fallback for modularized imports:
export default closestTo;

--- FILE: ./node_modules/date-fns/compareAsc.cjs ---
"use strict";
exports.compareAsc = compareAsc;
var _index = require("./toDate.cjs");

/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc(dateLeft, dateRight) {
  const diff = +(0, _index.toDate)(dateLeft) - +(0, _index.toDate)(dateRight);

  if (diff < 0) return -1;
  else if (diff > 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

--- FILE: ./node_modules/date-fns/compareAsc.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
export declare function compareAsc(
  dateLeft: DateArg<Date> & {},
  dateRight: DateArg<Date> & {},
): number;

--- FILE: ./node_modules/date-fns/compareAsc.js ---
import { toDate } from "./toDate.js";

/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
export function compareAsc(dateLeft, dateRight) {
  const diff = +toDate(dateLeft) - +toDate(dateRight);

  if (diff < 0) return -1;
  else if (diff > 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

// Fallback for modularized imports:
export default compareAsc;

--- FILE: ./node_modules/date-fns/compareDesc.cjs ---
"use strict";
exports.compareDesc = compareDesc;
var _index = require("./toDate.cjs");

/**
 * @name compareDesc
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */
function compareDesc(dateLeft, dateRight) {
  const diff = +(0, _index.toDate)(dateLeft) - +(0, _index.toDate)(dateRight);

  if (diff > 0) return -1;
  else if (diff < 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

--- FILE: ./node_modules/date-fns/compareDesc.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name compareDesc
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */
export declare function compareDesc(
  dateLeft: DateArg<Date> & {},
  dateRight: DateArg<Date> & {},
): number;

--- FILE: ./node_modules/date-fns/compareDesc.js ---
import { toDate } from "./toDate.js";

/**
 * @name compareDesc
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */
export function compareDesc(dateLeft, dateRight) {
  const diff = +toDate(dateLeft) - +toDate(dateRight);

  if (diff > 0) return -1;
  else if (diff < 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

// Fallback for modularized imports:
export default compareDesc;

--- FILE: ./node_modules/date-fns/constants.cjs ---
"use strict";
exports.secondsInYear =
  exports.secondsInWeek =
  exports.secondsInQuarter =
  exports.secondsInMonth =
  exports.secondsInMinute =
  exports.secondsInHour =
  exports.secondsInDay =
  exports.quartersInYear =
  exports.monthsInYear =
  exports.monthsInQuarter =
  exports.minutesInYear =
  exports.minutesInMonth =
  exports.minutesInHour =
  exports.minutesInDay =
  exports.minTime =
  exports.millisecondsInWeek =
  exports.millisecondsInSecond =
  exports.millisecondsInMinute =
  exports.millisecondsInHour =
  exports.millisecondsInDay =
  exports.maxTime =
  exports.daysInYear =
  exports.daysInWeek =
  exports.constructFromSymbol =
    void 0; /**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */

/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */
const daysInWeek = (exports.daysInWeek = 7);

/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */
const daysInYear = (exports.daysInYear = 365.2425);

/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */
const maxTime = (exports.maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000);

/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */
const minTime = (exports.minTime = -maxTime);

/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
const millisecondsInWeek = (exports.millisecondsInWeek = 604800000);

/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
const millisecondsInDay = (exports.millisecondsInDay = 86400000);

/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */
const millisecondsInMinute = (exports.millisecondsInMinute = 60000);

/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */
const millisecondsInHour = (exports.millisecondsInHour = 3600000);

/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */
const millisecondsInSecond = (exports.millisecondsInSecond = 1000);

/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */
const minutesInYear = (exports.minutesInYear = 525600);

/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */
const minutesInMonth = (exports.minutesInMonth = 43200);

/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */
const minutesInDay = (exports.minutesInDay = 1440);

/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */
const minutesInHour = (exports.minutesInHour = 60);

/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */
const monthsInQuarter = (exports.monthsInQuarter = 3);

/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */
const monthsInYear = (exports.monthsInYear = 12);

/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */
const quartersInYear = (exports.quartersInYear = 4);

/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */
const secondsInHour = (exports.secondsInHour = 3600);

/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */
const secondsInMinute = (exports.secondsInMinute = 60);

/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */
const secondsInDay = (exports.secondsInDay = secondsInHour * 24);

/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */
const secondsInWeek = (exports.secondsInWeek = secondsInDay * 7);

/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */
const secondsInYear = (exports.secondsInYear = secondsInDay * daysInYear);

/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */
const secondsInMonth = (exports.secondsInMonth = secondsInYear / 12);

/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */
const secondsInQuarter = (exports.secondsInQuarter = secondsInMonth * 3);

/**
 * @constant
 * @name constructFromSymbol
 * @summary Symbol enabling Date extensions to inherit properties from the reference date.
 *
 * The symbol is used to enable the `constructFrom` function to construct a date
 * using a reference date and a value. It allows to transfer extra properties
 * from the reference date to the new date. It's useful for extensions like
 * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as
 * a constructor argument.
 */
const constructFromSymbol = (exports.constructFromSymbol =
  Symbol.for("constructDateFrom"));

--- FILE: ./node_modules/date-fns/constants.d.ts ---
/**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */
/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */
export declare const daysInWeek = 7;
/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */
export declare const daysInYear = 365.2425;
/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "./constants/date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */
export declare const maxTime: number;
/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "./constants/date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */
export declare const minTime: number;
/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
export declare const millisecondsInWeek = 604800000;
/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
export declare const millisecondsInDay = 86400000;
/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */
export declare const millisecondsInMinute = 60000;
/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */
export declare const millisecondsInHour = 3600000;
/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */
export declare const millisecondsInSecond = 1000;
/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */
export declare const minutesInYear = 525600;
/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */
export declare const minutesInMonth = 43200;
/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */
export declare const minutesInDay = 1440;
/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */
export declare const minutesInHour = 60;
/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */
export declare const monthsInQuarter = 3;
/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */
export declare const monthsInYear = 12;
/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */
export declare const quartersInYear = 4;
/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */
export declare const secondsInHour = 3600;
/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */
export declare const secondsInMinute = 60;
/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */
export declare const secondsInDay: number;
/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */
export declare const secondsInWeek: number;
/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */
export declare const secondsInYear: number;
/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */
export declare const secondsInMonth: number;
/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */
export declare const secondsInQuarter: number;
/**
 * @constant
 * @name constructFromSymbol
 * @summary Symbol enabling Date extensions to inherit properties from the reference date.
 *
 * The symbol is used to enable the `constructFrom` function to construct a date
 * using a reference date and a value. It allows to transfer extra properties
 * from the reference date to the new date. It's useful for extensions like
 * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as
 * a constructor argument.
 */
export declare const constructFromSymbol: unique symbol;

--- FILE: ./node_modules/date-fns/constants.js ---
/**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */

/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */
export const daysInWeek = 7;

/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */
export const daysInYear = 365.2425;

/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "./constants/date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */
export const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;

/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "./constants/date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */
export const minTime = -maxTime;

/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
export const millisecondsInWeek = 604800000;

/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
export const millisecondsInDay = 86400000;

/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */
export const millisecondsInMinute = 60000;

/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */
export const millisecondsInHour = 3600000;

/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */
export const millisecondsInSecond = 1000;

/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */
export const minutesInYear = 525600;

/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */
export const minutesInMonth = 43200;

/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */
export const minutesInDay = 1440;

/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */
export const minutesInHour = 60;

/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */
export const monthsInQuarter = 3;

/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */
export const monthsInYear = 12;

/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */
export const quartersInYear = 4;

/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */
export const secondsInHour = 3600;

/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */
export const secondsInMinute = 60;

/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */
export const secondsInDay = secondsInHour * 24;

/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */
export const secondsInWeek = secondsInDay * 7;

/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */
export const secondsInYear = secondsInDay * daysInYear;

/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */
export const secondsInMonth = secondsInYear / 12;

/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */
export const secondsInQuarter = secondsInMonth * 3;

/**
 * @constant
 * @name constructFromSymbol
 * @summary Symbol enabling Date extensions to inherit properties from the reference date.
 *
 * The symbol is used to enable the `constructFrom` function to construct a date
 * using a reference date and a value. It allows to transfer extra properties
 * from the reference date to the new date. It's useful for extensions like
 * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as
 * a constructor argument.
 */
export const constructFromSymbol = Symbol.for("constructDateFrom");

--- FILE: ./node_modules/date-fns/constructFrom.cjs ---
"use strict";
exports.constructFrom = constructFrom;
var _index = require("./constants.cjs");

/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from "date-fns";
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date>(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use constructor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   );
 * }
 */
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);

  if (date && typeof date === "object" && _index.constructFromSymbol in date)
    return date[_index.constructFromSymbol](value);

  if (date instanceof Date) return new date.constructor(value);

  return new Date(value);
}

--- FILE: ./node_modules/date-fns/constructFrom.d.ts ---
import type { ConstructableDate, ContextFn, DateArg } from "./types.js";
/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from "./constructFrom/date-fns";
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date>(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use constructor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   );
 * }
 */
export declare function constructFrom<
  DateType extends Date | ConstructableDate,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType> | ContextFn<ResultDate> | undefined,
  value: DateArg<Date> & {},
): ResultDate;

--- FILE: ./node_modules/date-fns/constructFrom.js ---
import { constructFromSymbol } from "./constants.js";

/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from "./constructFrom/date-fns";
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date>(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use constructor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   );
 * }
 */
export function constructFrom(date, value) {
  if (typeof date === "function") return date(value);

  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);

  if (date instanceof Date) return new date.constructor(value);

  return new Date(value);
}

// Fallback for modularized imports:
export default constructFrom;

--- FILE: ./node_modules/date-fns/constructNow.cjs ---
"use strict";
exports.constructNow = constructNow;
var _index = require("./constructFrom.cjs");

/**
 * @name constructNow
 * @category Generic Helpers
 * @summary Constructs a new current date using the passed value constructor.
 * @pure false
 *
 * @description
 * The function constructs a new current date using the constructor from
 * the reference date. It helps to build generic functions that accept date
 * extensions and use the current date.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @param date - The reference date to take constructor from
 *
 * @returns Current date initialized using the given date constructor
 *
 * @example
 * import { constructNow, isSameDay } from 'date-fns'
 *
 * function isToday<DateType extends Date>(
 *   date: DateArg<DateType>,
 * ): boolean {
 *   // If we were to use `new Date()` directly, the function would  behave
 *   // differently in different timezones and return false for the same date.
 *   return isSameDay(date, constructNow(date));
 * }
 */
function constructNow(date) {
  return (0, _index.constructFrom)(date, Date.now());
}

--- FILE: ./node_modules/date-fns/constructNow.d.ts ---
import type { ContextFn, DateArg } from "./types.js";
/**
 * @name constructNow
 * @category Generic Helpers
 * @summary Constructs a new current date using the passed value constructor.
 * @pure false
 *
 * @description
 * The function constructs a new current date using the constructor from
 * the reference date. It helps to build generic functions that accept date
 * extensions and use the current date.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @param date - The reference date to take constructor from
 *
 * @returns Current date initialized using the given date constructor
 *
 * @example
 * import { constructNow, isSameDay } from 'date-fns'
 *
 * function isToday<DateType extends Date>(
 *   date: DateArg<DateType>,
 * ): boolean {
 *   // If we were to use `new Date()` directly, the function would  behave
 *   // differently in different timezones and return false for the same date.
 *   return isSameDay(date, constructNow(date));
 * }
 */
export declare function constructNow<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(date: DateArg<DateType> | ContextFn<ResultDate> | undefined): ResultDate;

--- FILE: ./node_modules/date-fns/constructNow.js ---
import { constructFrom } from "./constructFrom.js";

/**
 * @name constructNow
 * @category Generic Helpers
 * @summary Constructs a new current date using the passed value constructor.
 * @pure false
 *
 * @description
 * The function constructs a new current date using the constructor from
 * the reference date. It helps to build generic functions that accept date
 * extensions and use the current date.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @param date - The reference date to take constructor from
 *
 * @returns Current date initialized using the given date constructor
 *
 * @example
 * import { constructNow, isSameDay } from 'date-fns'
 *
 * function isToday<DateType extends Date>(
 *   date: DateArg<DateType>,
 * ): boolean {
 *   // If we were to use `new Date()` directly, the function would  behave
 *   // differently in different timezones and return false for the same date.
 *   return isSameDay(date, constructNow(date));
 * }
 */
export function constructNow(date) {
  return constructFrom(date, Date.now());
}

// Fallback for modularized imports:
export default constructNow;

--- FILE: ./node_modules/date-fns/daysToWeeks.cjs ---
"use strict";
exports.daysToWeeks = daysToWeeks;
var _index = require("./constants.cjs");

/**
 * @name daysToWeeks
 * @category Conversion Helpers
 * @summary Convert days to weeks.
 *
 * @description
 * Convert a number of days to a full number of weeks.
 *
 * @param days - The number of days to be converted
 *
 * @returns The number of days converted in weeks
 *
 * @example
 * // Convert 14 days to weeks:
 * const result = daysToWeeks(14)
 * //=> 2
 *
 * @example
 * // It uses trunc rounding:
 * const result = daysToWeeks(13)
 * //=> 1
 */
function daysToWeeks(days) {
  const result = Math.trunc(days / _index.daysInWeek);
  // Prevent negative zero
  return result === 0 ? 0 : result;
}

--- FILE: ./node_modules/date-fns/daysToWeeks.d.ts ---
/**
 * @name daysToWeeks
 * @category Conversion Helpers
 * @summary Convert days to weeks.
 *
 * @description
 * Convert a number of days to a full number of weeks.
 *
 * @param days - The number of days to be converted
 *
 * @returns The number of days converted in weeks
 *
 * @example
 * // Convert 14 days to weeks:
 * const result = daysToWeeks(14)
 * //=> 2
 *
 * @example
 * // It uses trunc rounding:
 * const result = daysToWeeks(13)
 * //=> 1
 */
export declare function daysToWeeks(days: number): number;

--- FILE: ./node_modules/date-fns/daysToWeeks.js ---
import { daysInWeek } from "./constants.js";

/**
 * @name daysToWeeks
 * @category Conversion Helpers
 * @summary Convert days to weeks.
 *
 * @description
 * Convert a number of days to a full number of weeks.
 *
 * @param days - The number of days to be converted
 *
 * @returns The number of days converted in weeks
 *
 * @example
 * // Convert 14 days to weeks:
 * const result = daysToWeeks(14)
 * //=> 2
 *
 * @example
 * // It uses trunc rounding:
 * const result = daysToWeeks(13)
 * //=> 1
 */
export function daysToWeeks(days) {
  const result = Math.trunc(days / daysInWeek);
  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
export default daysToWeeks;

--- FILE: ./node_modules/date-fns/differenceInBusinessDays.cjs ---
"use strict";
exports.differenceInBusinessDays = differenceInBusinessDays;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./addDays.cjs");
var _index3 = require("./differenceInCalendarDays.cjs");
var _index4 = require("./isSameDay.cjs");
var _index5 = require("./isValid.cjs");
var _index6 = require("./isWeekend.cjs");

/**
 * The {@link differenceInBusinessDays} function options.
 */

/**
 * @name differenceInBusinessDays
 * @category Day Helpers
 * @summary Get the number of business days between the given dates.
 *
 * @description
 * Get the number of business day periods between the given dates.
 * Business days being days that aren't in the weekend.
 * Like `differenceInCalendarDays`, the function removes the times from
 * the dates before calculating the difference.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of business days
 *
 * @example
 * // How many business days are between
 * // 10 January 2014 and 20 July 2014?
 * const result = differenceInBusinessDays(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 0, 10)
 * )
 * //=> 136
 *
 * // How many business days are between
 * // 30 November 2021 and 1 November 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 30),
 *   new Date(2021, 10, 1)
 * )
 * //=> 21
 *
 * // How many business days are between
 * // 1 November 2021 and 1 December 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 11, 1)
 * )
 * //=> -22
 *
 * // How many business days are between
 * // 1 November 2021 and 1 November 2021 ?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 10, 1)
 * )
 * //=> 0
 */
function differenceInBusinessDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  if (!(0, _index5.isValid)(laterDate_) || !(0, _index5.isValid)(earlierDate_))
    return NaN;

  const diff = (0, _index3.differenceInCalendarDays)(laterDate_, earlierDate_);
  const sign = diff < 0 ? -1 : 1;
  const weeks = Math.trunc(diff / 7);

  let result = weeks * 5;
  let movingDate = (0, _index2.addDays)(earlierDate_, weeks * 7);

  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week
  while (!(0, _index4.isSameDay)(laterDate_, movingDate)) {
    // sign is used to account for both negative and positive differences
    result += (0, _index6.isWeekend)(movingDate, options) ? 0 : sign;
    movingDate = (0, _index2.addDays)(movingDate, sign);
  }

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

--- FILE: ./node_modules/date-fns/differenceInBusinessDays.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInBusinessDays} function options.
 */
export interface DifferenceInBusinessDaysOptions extends ContextOptions<Date> {}
/**
 * @name differenceInBusinessDays
 * @category Day Helpers
 * @summary Get the number of business days between the given dates.
 *
 * @description
 * Get the number of business day periods between the given dates.
 * Business days being days that aren't in the weekend.
 * Like `differenceInCalendarDays`, the function removes the times from
 * the dates before calculating the difference.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of business days
 *
 * @example
 * // How many business days are between
 * // 10 January 2014 and 20 July 2014?
 * const result = differenceInBusinessDays(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 0, 10)
 * )
 * //=> 136
 *
 * // How many business days are between
 * // 30 November 2021 and 1 November 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 30),
 *   new Date(2021, 10, 1)
 * )
 * //=> 21
 *
 * // How many business days are between
 * // 1 November 2021 and 1 December 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 11, 1)
 * )
 * //=> -22
 *
 * // How many business days are between
 * // 1 November 2021 and 1 November 2021 ?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 10, 1)
 * )
 * //=> 0
 */
export declare function differenceInBusinessDays(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInBusinessDaysOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInBusinessDays.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { addDays } from "./addDays.js";
import { differenceInCalendarDays } from "./differenceInCalendarDays.js";
import { isSameDay } from "./isSameDay.js";
import { isValid } from "./isValid.js";
import { isWeekend } from "./isWeekend.js";

/**
 * The {@link differenceInBusinessDays} function options.
 */

/**
 * @name differenceInBusinessDays
 * @category Day Helpers
 * @summary Get the number of business days between the given dates.
 *
 * @description
 * Get the number of business day periods between the given dates.
 * Business days being days that aren't in the weekend.
 * Like `differenceInCalendarDays`, the function removes the times from
 * the dates before calculating the difference.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of business days
 *
 * @example
 * // How many business days are between
 * // 10 January 2014 and 20 July 2014?
 * const result = differenceInBusinessDays(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 0, 10)
 * )
 * //=> 136
 *
 * // How many business days are between
 * // 30 November 2021 and 1 November 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 30),
 *   new Date(2021, 10, 1)
 * )
 * //=> 21
 *
 * // How many business days are between
 * // 1 November 2021 and 1 December 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 11, 1)
 * )
 * //=> -22
 *
 * // How many business days are between
 * // 1 November 2021 and 1 November 2021 ?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 10, 1)
 * )
 * //=> 0
 */
export function differenceInBusinessDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  if (!isValid(laterDate_) || !isValid(earlierDate_)) return NaN;

  const diff = differenceInCalendarDays(laterDate_, earlierDate_);
  const sign = diff < 0 ? -1 : 1;
  const weeks = Math.trunc(diff / 7);

  let result = weeks * 5;
  let movingDate = addDays(earlierDate_, weeks * 7);

  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week
  while (!isSameDay(laterDate_, movingDate)) {
    // sign is used to account for both negative and positive differences
    result += isWeekend(movingDate, options) ? 0 : sign;
    movingDate = addDays(movingDate, sign);
  }

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
export default differenceInBusinessDays;

--- FILE: ./node_modules/date-fns/differenceInCalendarDays.cjs ---
"use strict";
exports.differenceInCalendarDays = differenceInCalendarDays;
var _index = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index2 = require("./_lib/normalizeDates.cjs");
var _index3 = require("./constants.cjs");
var _index4 = require("./startOfDay.cjs");

/**
 * The {@link differenceInCalendarDays} function options.
 */

/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options object
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
function differenceInCalendarDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index2.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const laterStartOfDay = (0, _index4.startOfDay)(laterDate_);
  const earlierStartOfDay = (0, _index4.startOfDay)(earlierDate_);

  const laterTimestamp =
    +laterStartOfDay -
    (0, _index.getTimezoneOffsetInMilliseconds)(laterStartOfDay);
  const earlierTimestamp =
    +earlierStartOfDay -
    (0, _index.getTimezoneOffsetInMilliseconds)(earlierStartOfDay);

  // Round the number of days to the nearest integer because the number of
  // milliseconds in a day is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(
    (laterTimestamp - earlierTimestamp) / _index3.millisecondsInDay,
  );
}

--- FILE: ./node_modules/date-fns/differenceInCalendarDays.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarDays} function options.
 */
export interface DifferenceInCalendarDaysOptions extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options object
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
export declare function differenceInCalendarDays(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarDaysOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarDays.js ---
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { millisecondsInDay } from "./constants.js";
import { startOfDay } from "./startOfDay.js";

/**
 * The {@link differenceInCalendarDays} function options.
 */

/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options object
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
export function differenceInCalendarDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const laterStartOfDay = startOfDay(laterDate_);
  const earlierStartOfDay = startOfDay(earlierDate_);

  const laterTimestamp =
    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);
  const earlierTimestamp =
    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);

  // Round the number of days to the nearest integer because the number of
  // milliseconds in a day is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);
}

// Fallback for modularized imports:
export default differenceInCalendarDays;

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeekYears.cjs ---
"use strict";
exports.differenceInCalendarISOWeekYears = differenceInCalendarISOWeekYears;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./getISOWeekYear.cjs");

/**
 * The {@link differenceInCalendarISOWeekYears} function options.
 */

/**
 * @name differenceInCalendarISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * const result = differenceInCalendarISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */
function differenceInCalendarISOWeekYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  return (
    (0, _index2.getISOWeekYear)(laterDate_, options) -
    (0, _index2.getISOWeekYear)(earlierDate_, options)
  );
}

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeekYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarISOWeekYears} function options.
 */
export interface DifferenceInCalendarISOWeekYearsOptions
  extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * const result = differenceInCalendarISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */
export declare function differenceInCalendarISOWeekYears(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarISOWeekYearsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeekYears.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { getISOWeekYear } from "./getISOWeekYear.js";

/**
 * The {@link differenceInCalendarISOWeekYears} function options.
 */

/**
 * @name differenceInCalendarISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * const result = differenceInCalendarISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */
export function differenceInCalendarISOWeekYears(
  laterDate,
  earlierDate,
  options,
) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );
  return (
    getISOWeekYear(laterDate_, options) - getISOWeekYear(earlierDate_, options)
  );
}

// Fallback for modularized imports:
export default differenceInCalendarISOWeekYears;

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeeks.cjs ---
"use strict";
exports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;
var _index = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index2 = require("./_lib/normalizeDates.cjs");
var _index3 = require("./constants.cjs");
var _index4 = require("./startOfISOWeek.cjs");

/**
 * The {@link differenceInCalendarISOWeeks} function options.
 */

/**
 * @name differenceInCalendarISOWeeks
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * const result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6),
 * );
 * //=> 3
 */
function differenceInCalendarISOWeeks(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index2.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const startOfISOWeekLeft = (0, _index4.startOfISOWeek)(laterDate_);
  const startOfISOWeekRight = (0, _index4.startOfISOWeek)(earlierDate_);

  const timestampLeft =
    +startOfISOWeekLeft -
    (0, _index.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);
  const timestampRight =
    +startOfISOWeekRight -
    (0, _index.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(
    (timestampLeft - timestampRight) / _index3.millisecondsInWeek,
  );
}

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeeks.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarISOWeeks} function options.
 */
export interface DifferenceInCalendarISOWeeksOptions
  extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarISOWeeks
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * const result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6),
 * );
 * //=> 3
 */
export declare function differenceInCalendarISOWeeks(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarISOWeeksOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarISOWeeks.js ---
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { millisecondsInWeek } from "./constants.js";
import { startOfISOWeek } from "./startOfISOWeek.js";

/**
 * The {@link differenceInCalendarISOWeeks} function options.
 */

/**
 * @name differenceInCalendarISOWeeks
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * const result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6),
 * );
 * //=> 3
 */
export function differenceInCalendarISOWeeks(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const startOfISOWeekLeft = startOfISOWeek(laterDate_);
  const startOfISOWeekRight = startOfISOWeek(earlierDate_);

  const timestampLeft =
    +startOfISOWeekLeft - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);
  const timestampRight =
    +startOfISOWeekRight - getTimezoneOffsetInMilliseconds(startOfISOWeekRight);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);
}

// Fallback for modularized imports:
export default differenceInCalendarISOWeeks;

--- FILE: ./node_modules/date-fns/differenceInCalendarMonths.cjs ---
"use strict";
exports.differenceInCalendarMonths = differenceInCalendarMonths;
var _index = require("./_lib/normalizeDates.cjs");

/**
 * The {@link differenceInCalendarMonths} function options.
 */

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();

  return yearsDiff * 12 + monthsDiff;
}

--- FILE: ./node_modules/date-fns/differenceInCalendarMonths.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarMonths} function options.
 */
export interface DifferenceInCalendarMonthsOptions
  extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
export declare function differenceInCalendarMonths(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarMonthsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarMonths.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";

/**
 * The {@link differenceInCalendarMonths} function options.
 */

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
export function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();

  return yearsDiff * 12 + monthsDiff;
}

// Fallback for modularized imports:
export default differenceInCalendarMonths;

--- FILE: ./node_modules/date-fns/differenceInCalendarQuarters.cjs ---
"use strict";
exports.differenceInCalendarQuarters = differenceInCalendarQuarters;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./getQuarter.cjs");

/**
 * The {@link differenceInCalendarQuarters} function options.
 */

/**
 * @name differenceInCalendarQuarters
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */
function differenceInCalendarQuarters(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const quartersDiff =
    (0, _index2.getQuarter)(laterDate_) - (0, _index2.getQuarter)(earlierDate_);

  return yearsDiff * 4 + quartersDiff;
}

--- FILE: ./node_modules/date-fns/differenceInCalendarQuarters.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarQuarters} function options.
 */
export interface DifferenceInCalendarQuartersOptions
  extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarQuarters
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */
export declare function differenceInCalendarQuarters(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarQuartersOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarQuarters.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { getQuarter } from "./getQuarter.js";

/**
 * The {@link differenceInCalendarQuarters} function options.
 */

/**
 * @name differenceInCalendarQuarters
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */
export function differenceInCalendarQuarters(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const quartersDiff = getQuarter(laterDate_) - getQuarter(earlierDate_);

  return yearsDiff * 4 + quartersDiff;
}

// Fallback for modularized imports:
export default differenceInCalendarQuarters;

--- FILE: ./node_modules/date-fns/differenceInCalendarWeeks.cjs ---
"use strict";
exports.differenceInCalendarWeeks = differenceInCalendarWeeks;
var _index = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index2 = require("./_lib/normalizeDates.cjs");
var _index3 = require("./constants.cjs");
var _index4 = require("./startOfWeek.cjs");

/**
 * The {@link differenceInCalendarWeeks} function options.
 */

/**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */
function differenceInCalendarWeeks(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index2.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const laterStartOfWeek = (0, _index4.startOfWeek)(laterDate_, options);
  const earlierStartOfWeek = (0, _index4.startOfWeek)(earlierDate_, options);

  const laterTimestamp =
    +laterStartOfWeek -
    (0, _index.getTimezoneOffsetInMilliseconds)(laterStartOfWeek);
  const earlierTimestamp =
    +earlierStartOfWeek -
    (0, _index.getTimezoneOffsetInMilliseconds)(earlierStartOfWeek);

  return Math.round(
    (laterTimestamp - earlierTimestamp) / _index3.millisecondsInWeek,
  );
}

--- FILE: ./node_modules/date-fns/differenceInCalendarWeeks.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link differenceInCalendarWeeks} function options.
 */
export interface DifferenceInCalendarWeeksOptions
  extends LocalizedOptions<"options">,
    WeekOptions,
    ContextOptions<Date> {}
/**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */
export declare function differenceInCalendarWeeks(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarWeeksOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarWeeks.js ---
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { millisecondsInWeek } from "./constants.js";
import { startOfWeek } from "./startOfWeek.js";

/**
 * The {@link differenceInCalendarWeeks} function options.
 */

/**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */
export function differenceInCalendarWeeks(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const laterStartOfWeek = startOfWeek(laterDate_, options);
  const earlierStartOfWeek = startOfWeek(earlierDate_, options);

  const laterTimestamp =
    +laterStartOfWeek - getTimezoneOffsetInMilliseconds(laterStartOfWeek);
  const earlierTimestamp =
    +earlierStartOfWeek - getTimezoneOffsetInMilliseconds(earlierStartOfWeek);

  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInWeek);
}

// Fallback for modularized imports:
export default differenceInCalendarWeeks;

--- FILE: ./node_modules/date-fns/differenceInCalendarYears.cjs ---
"use strict";
exports.differenceInCalendarYears = differenceInCalendarYears;
var _index = require("./_lib/normalizeDates.cjs");

/**
 * The {@link differenceInCalendarYears} function options.
 */

/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options

 * @returns The number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * );
 * //=> 2
 */
function differenceInCalendarYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  return laterDate_.getFullYear() - earlierDate_.getFullYear();
}

--- FILE: ./node_modules/date-fns/differenceInCalendarYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInCalendarYears} function options.
 */
export interface DifferenceInCalendarYearsOptions
  extends ContextOptions<Date> {}
/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options

 * @returns The number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * );
 * //=> 2
 */
export declare function differenceInCalendarYears(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInCalendarYearsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInCalendarYears.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";

/**
 * The {@link differenceInCalendarYears} function options.
 */

/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options

 * @returns The number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * );
 * //=> 2
 */
export function differenceInCalendarYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );
  return laterDate_.getFullYear() - earlierDate_.getFullYear();
}

// Fallback for modularized imports:
export default differenceInCalendarYears;

--- FILE: ./node_modules/date-fns/differenceInDays.cjs ---
"use strict";
exports.differenceInDays = differenceInDays;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./differenceInCalendarDays.cjs");

/**
 * The {@link differenceInDays} function options.
 */

/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full days according to the local timezone
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 *
 * @example
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
 * //=> 92
 */
function differenceInDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const sign = compareLocalAsc(laterDate_, earlierDate_);
  const difference = Math.abs(
    (0, _index2.differenceInCalendarDays)(laterDate_, earlierDate_),
  );

  laterDate_.setDate(laterDate_.getDate() - sign * difference);

  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value
  const isLastDayNotFull = Number(
    compareLocalAsc(laterDate_, earlierDate_) === -sign,
  );

  const result = sign * (difference - isLastDayNotFull);
  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Like `compareAsc` but uses local time not UTC, which is needed
// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.
function compareLocalAsc(laterDate, earlierDate) {
  const diff =
    laterDate.getFullYear() - earlierDate.getFullYear() ||
    laterDate.getMonth() - earlierDate.getMonth() ||
    laterDate.getDate() - earlierDate.getDate() ||
    laterDate.getHours() - earlierDate.getHours() ||
    laterDate.getMinutes() - earlierDate.getMinutes() ||
    laterDate.getSeconds() - earlierDate.getSeconds() ||
    laterDate.getMilliseconds() - earlierDate.getMilliseconds();

  if (diff < 0) return -1;
  if (diff > 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

--- FILE: ./node_modules/date-fns/differenceInDays.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInDays} function options.
 */
export interface DifferenceInDaysOptions extends ContextOptions<Date> {}
/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full days according to the local timezone
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 *
 * @example
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
 * //=> 92
 */
export declare function differenceInDays(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInDaysOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInDays.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { differenceInCalendarDays } from "./differenceInCalendarDays.js";

/**
 * The {@link differenceInDays} function options.
 */

/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full days according to the local timezone
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 *
 * @example
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
 * //=> 92
 */
export function differenceInDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const sign = compareLocalAsc(laterDate_, earlierDate_);
  const difference = Math.abs(
    differenceInCalendarDays(laterDate_, earlierDate_),
  );

  laterDate_.setDate(laterDate_.getDate() - sign * difference);

  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value
  const isLastDayNotFull = Number(
    compareLocalAsc(laterDate_, earlierDate_) === -sign,
  );

  const result = sign * (difference - isLastDayNotFull);
  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Like `compareAsc` but uses local time not UTC, which is needed
// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.
function compareLocalAsc(laterDate, earlierDate) {
  const diff =
    laterDate.getFullYear() - earlierDate.getFullYear() ||
    laterDate.getMonth() - earlierDate.getMonth() ||
    laterDate.getDate() - earlierDate.getDate() ||
    laterDate.getHours() - earlierDate.getHours() ||
    laterDate.getMinutes() - earlierDate.getMinutes() ||
    laterDate.getSeconds() - earlierDate.getSeconds() ||
    laterDate.getMilliseconds() - earlierDate.getMilliseconds();

  if (diff < 0) return -1;
  if (diff > 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

// Fallback for modularized imports:
export default differenceInDays;

--- FILE: ./node_modules/date-fns/differenceInHours.cjs ---
"use strict";
exports.differenceInHours = differenceInHours;
var _index = require("./_lib/getRoundingMethod.cjs");
var _index2 = require("./_lib/normalizeDates.cjs");
var _index3 = require("./constants.cjs");

/**
 * The {@link differenceInHours} function options.
 */

/**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
function differenceInHours(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index2.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  const diff = (+laterDate_ - +earlierDate_) / _index3.millisecondsInHour;
  return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

--- FILE: ./node_modules/date-fns/differenceInHours.d.ts ---
import type { ContextOptions, DateArg, RoundingOptions } from "./types.js";
/**
 * The {@link differenceInHours} function options.
 */
export interface DifferenceInHoursOptions
  extends RoundingOptions,
    ContextOptions<Date> {}
/**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
export declare function differenceInHours(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInHoursOptions,
): number;

--- FILE: ./node_modules/date-fns/differenceInHours.js ---
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { millisecondsInHour } from "./constants.js";

/**
 * The {@link differenceInHours} function options.
 */

/**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
export function differenceInHours(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );
  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
export default differenceInHours;

--- FILE: ./node_modules/date-fns/differenceInISOWeekYears.cjs ---
"use strict";
exports.differenceInISOWeekYears = differenceInISOWeekYears;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./compareAsc.cjs");
var _index3 = require("./differenceInCalendarISOWeekYears.cjs");
var _index4 = require("./subISOWeekYears.cjs");

/**
 * The {@link differenceInISOWeekYears} function options.
 */

/**
 * @name differenceInISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options
 *
 * @returns The number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * const result = differenceInISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * // => 1
 */
function differenceInISOWeekYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const sign = (0, _index2.compareAsc)(laterDate_, earlierDate_);
  const diff = Math.abs(
    (0, _index3.differenceInCalendarISOWeekYears)(
      laterDate_,
      earlierDate_,
      options,
    ),
  );

  const adjustedDate = (0, _index4.subISOWeekYears)(
    laterDate_,
    sign * diff,
    options,
  );

  const isLastISOWeekYearNotFull = Number(
    (0, _index2.compareAsc)(adjustedDate, earlierDate_) === -sign,
  );
  const result = sign * (diff - isLastISOWeekYearNotFull);

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

--- FILE: ./node_modules/date-fns/differenceInISOWeekYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInISOWeekYears} function options.
 */
export interface DifferenceInISOWeekYearsOptions extends ContextOptions<Date> {}
/**
 * @name differenceInISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options
 *
 * @returns The number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * const result = differenceInISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * // => 1
 */
export declare function differenceInISOWeekYears(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInISOWeekYearsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInISOWeekYears.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { compareAsc } from "./compareAsc.js";
import { differenceInCalendarISOWeekYears } from "./differenceInCalendarISOWeekYears.js";
import { subISOWeekYears } from "./subISOWeekYears.js";

/**
 * The {@link differenceInISOWeekYears} function options.
 */

/**
 * @name differenceInISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options
 *
 * @returns The number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * const result = differenceInISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * // => 1
 */
export function differenceInISOWeekYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const sign = compareAsc(laterDate_, earlierDate_);
  const diff = Math.abs(
    differenceInCalendarISOWeekYears(laterDate_, earlierDate_, options),
  );

  const adjustedDate = subISOWeekYears(laterDate_, sign * diff, options);

  const isLastISOWeekYearNotFull = Number(
    compareAsc(adjustedDate, earlierDate_) === -sign,
  );
  const result = sign * (diff - isLastISOWeekYearNotFull);

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
export default differenceInISOWeekYears;

--- FILE: ./node_modules/date-fns/differenceInMilliseconds.cjs ---
"use strict";
exports.differenceInMilliseconds = differenceInMilliseconds;
var _index = require("./toDate.cjs");

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds(laterDate, earlierDate) {
  return +(0, _index.toDate)(laterDate) - +(0, _index.toDate)(earlierDate);
}

--- FILE: ./node_modules/date-fns/differenceInMilliseconds.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
export declare function differenceInMilliseconds(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
): number;

--- FILE: ./node_modules/date-fns/differenceInMilliseconds.js ---
import { toDate } from "./toDate.js";

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
export function differenceInMilliseconds(laterDate, earlierDate) {
  return +toDate(laterDate) - +toDate(earlierDate);
}

// Fallback for modularized imports:
export default differenceInMilliseconds;

--- FILE: ./node_modules/date-fns/differenceInMinutes.cjs ---
"use strict";
exports.differenceInMinutes = differenceInMinutes;
var _index = require("./_lib/getRoundingMethod.cjs");
var _index2 = require("./constants.cjs");
var _index3 = require("./differenceInMilliseconds.cjs");

/**
 * The {@link differenceInMinutes} function options.
 */

/**
 * @name differenceInMinutes
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the signed number of full (rounded towards 0) minutes between the given dates.
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * const result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 *
 * @example
 * // How many minutes are between 10:01:59 and 10:00:00
 * const result = differenceInMinutes(
 *   new Date(2000, 0, 1, 10, 0, 0),
 *   new Date(2000, 0, 1, 10, 1, 59)
 * )
 * //=> -1
 */
function differenceInMinutes(dateLeft, dateRight, options) {
  const diff =
    (0, _index3.differenceInMilliseconds)(dateLeft, dateRight) /
    _index2.millisecondsInMinute;
  return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

--- FILE: ./node_modules/date-fns/differenceInMinutes.d.ts ---
import type { DateArg, RoundingOptions } from "./types.js";
/**
 * The {@link differenceInMinutes} function options.
 */
export interface DifferenceInMinutesOptions extends RoundingOptions {}
/**
 * @name differenceInMinutes
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the signed number of full (rounded towards 0) minutes between the given dates.
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * const result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 *
 * @example
 * // How many minutes are between 10:01:59 and 10:00:00
 * const result = differenceInMinutes(
 *   new Date(2000, 0, 1, 10, 0, 0),
 *   new Date(2000, 0, 1, 10, 1, 59)
 * )
 * //=> -1
 */
export declare function differenceInMinutes(
  dateLeft: DateArg<Date> & {},
  dateRight: DateArg<Date> & {},
  options?: DifferenceInMinutesOptions,
): number;

--- FILE: ./node_modules/date-fns/differenceInMinutes.js ---
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { millisecondsInMinute } from "./constants.js";
import { differenceInMilliseconds } from "./differenceInMilliseconds.js";

/**
 * The {@link differenceInMinutes} function options.
 */

/**
 * @name differenceInMinutes
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the signed number of full (rounded towards 0) minutes between the given dates.
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * const result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 *
 * @example
 * // How many minutes are between 10:01:59 and 10:00:00
 * const result = differenceInMinutes(
 *   new Date(2000, 0, 1, 10, 0, 0),
 *   new Date(2000, 0, 1, 10, 1, 59)
 * )
 * //=> -1
 */
export function differenceInMinutes(dateLeft, dateRight, options) {
  const diff =
    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
export default differenceInMinutes;

--- FILE: ./node_modules/date-fns/differenceInMonths.cjs ---
"use strict";
exports.differenceInMonths = differenceInMonths;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./compareAsc.cjs");
var _index3 = require("./differenceInCalendarMonths.cjs");
var _index4 = require("./isLastDayOfMonth.cjs");

/**
 * The {@link differenceInMonths} function options.
 */

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
function differenceInMonths(laterDate, earlierDate, options) {
  const [laterDate_, workingLaterDate, earlierDate_] = (0,
  _index.normalizeDates)(options?.in, laterDate, laterDate, earlierDate);

  const sign = (0, _index2.compareAsc)(workingLaterDate, earlierDate_);
  const difference = Math.abs(
    (0, _index3.differenceInCalendarMonths)(workingLaterDate, earlierDate_),
  );

  if (difference < 1) return 0;

  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)
    workingLaterDate.setDate(30);

  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);

  let isLastMonthNotFull =
    (0, _index2.compareAsc)(workingLaterDate, earlierDate_) === -sign;

  if (
    (0, _index4.isLastDayOfMonth)(laterDate_) &&
    difference === 1 &&
    (0, _index2.compareAsc)(laterDate_, earlierDate_) === 1
  ) {
    isLastMonthNotFull = false;
  }

  const result = sign * (difference - +isLastMonthNotFull);
  return result === 0 ? 0 : result;
}

--- FILE: ./node_modules/date-fns/differenceInMonths.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInMonths} function options.
 */
export interface DifferenceInMonthsOptions extends ContextOptions<Date> {}
/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
export declare function differenceInMonths(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInMonthsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInMonths.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { compareAsc } from "./compareAsc.js";
import { differenceInCalendarMonths } from "./differenceInCalendarMonths.js";
import { isLastDayOfMonth } from "./isLastDayOfMonth.js";

/**
 * The {@link differenceInMonths} function options.
 */

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
export function differenceInMonths(laterDate, earlierDate, options) {
  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    laterDate,
    earlierDate,
  );

  const sign = compareAsc(workingLaterDate, earlierDate_);
  const difference = Math.abs(
    differenceInCalendarMonths(workingLaterDate, earlierDate_),
  );

  if (difference < 1) return 0;

  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)
    workingLaterDate.setDate(30);

  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);

  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;

  if (
    isLastDayOfMonth(laterDate_) &&
    difference === 1 &&
    compareAsc(laterDate_, earlierDate_) === 1
  ) {
    isLastMonthNotFull = false;
  }

  const result = sign * (difference - +isLastMonthNotFull);
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
export default differenceInMonths;

--- FILE: ./node_modules/date-fns/differenceInQuarters.cjs ---
"use strict";
exports.differenceInQuarters = differenceInQuarters;
var _index = require("./_lib/getRoundingMethod.cjs");
var _index2 = require("./differenceInMonths.cjs");

/**
 * The {@link differenceInQuarters} function options.
 */

/**
 * @name differenceInQuarters
 * @category Quarter Helpers
 * @summary Get the number of quarters between the given dates.
 *
 * @description
 * Get the number of quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
 * //=> 2
 */
function differenceInQuarters(laterDate, earlierDate, options) {
  const diff =
    (0, _index2.differenceInMonths)(laterDate, earlierDate, options) / 3;
  return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

--- FILE: ./node_modules/date-fns/differenceInQuarters.d.ts ---
import type { ContextOptions, DateArg, RoundingOptions } from "./types.js";
/**
 * The {@link differenceInQuarters} function options.
 */
export interface DifferenceInQuartersOptions
  extends RoundingOptions,
    ContextOptions<Date> {}
/**
 * @name differenceInQuarters
 * @category Quarter Helpers
 * @summary Get the number of quarters between the given dates.
 *
 * @description
 * Get the number of quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
 * //=> 2
 */
export declare function differenceInQuarters(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInQuartersOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInQuarters.js ---
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { differenceInMonths } from "./differenceInMonths.js";

/**
 * The {@link differenceInQuarters} function options.
 */

/**
 * @name differenceInQuarters
 * @category Quarter Helpers
 * @summary Get the number of quarters between the given dates.
 *
 * @description
 * Get the number of quarters between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
 * //=> 2
 */
export function differenceInQuarters(laterDate, earlierDate, options) {
  const diff = differenceInMonths(laterDate, earlierDate, options) / 3;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
export default differenceInQuarters;

--- FILE: ./node_modules/date-fns/differenceInSeconds.cjs ---
"use strict";
exports.differenceInSeconds = differenceInSeconds;
var _index = require("./_lib/getRoundingMethod.cjs");
var _index2 = require("./differenceInMilliseconds.cjs");

/**
 * The {@link differenceInSeconds} function options.
 */

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds(laterDate, earlierDate, options) {
  const diff =
    (0, _index2.differenceInMilliseconds)(laterDate, earlierDate) / 1000;
  return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

--- FILE: ./node_modules/date-fns/differenceInSeconds.d.ts ---
import type { DateArg, RoundingOptions } from "./types.js";
/**
 * The {@link differenceInSeconds} function options.
 */
export interface DifferenceInSecondsOptions extends RoundingOptions {}
/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
export declare function differenceInSeconds(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInSecondsOptions,
): number;

--- FILE: ./node_modules/date-fns/differenceInSeconds.js ---
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { differenceInMilliseconds } from "./differenceInMilliseconds.js";

/**
 * The {@link differenceInSeconds} function options.
 */

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
export function differenceInSeconds(laterDate, earlierDate, options) {
  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
export default differenceInSeconds;

--- FILE: ./node_modules/date-fns/differenceInWeeks.cjs ---
"use strict";
exports.differenceInWeeks = differenceInWeeks;
var _index = require("./_lib/getRoundingMethod.cjs");
var _index2 = require("./differenceInDays.cjs");

/**
 * The {@link differenceInWeeks} function options.
 */

/**
 * @name differenceInWeeks
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between two dates. Fractional weeks are
 * truncated towards zero by default.
 *
 * One "full week" is the distance between a local time in one day to the same
 * local time 7 days earlier or later. A full week can sometimes be less than
 * or more than 7*24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 7*24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
 * //=> 2
 *
 * @example
 * // How many full weeks are between
 * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 8 weeks (54 days),
 * // even if DST starts and the period has
 * // only 54*24-1 hours.
 * const result = differenceInWeeks(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 6)
 * )
 * //=> 8
 */
function differenceInWeeks(laterDate, earlierDate, options) {
  const diff =
    (0, _index2.differenceInDays)(laterDate, earlierDate, options) / 7;
  return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

--- FILE: ./node_modules/date-fns/differenceInWeeks.d.ts ---
import type { ContextOptions, DateArg, RoundingOptions } from "./types.js";
/**
 * The {@link differenceInWeeks} function options.
 */
export interface DifferenceInWeeksOptions
  extends RoundingOptions,
    ContextOptions<Date> {}
/**
 * @name differenceInWeeks
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between two dates. Fractional weeks are
 * truncated towards zero by default.
 *
 * One "full week" is the distance between a local time in one day to the same
 * local time 7 days earlier or later. A full week can sometimes be less than
 * or more than 7*24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 7*24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
 * //=> 2
 *
 * @example
 * // How many full weeks are between
 * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 8 weeks (54 days),
 * // even if DST starts and the period has
 * // only 54*24-1 hours.
 * const result = differenceInWeeks(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 6)
 * )
 * //=> 8
 */
export declare function differenceInWeeks(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInWeeksOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInWeeks.js ---
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { differenceInDays } from "./differenceInDays.js";

/**
 * The {@link differenceInWeeks} function options.
 */

/**
 * @name differenceInWeeks
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between two dates. Fractional weeks are
 * truncated towards zero by default.
 *
 * One "full week" is the distance between a local time in one day to the same
 * local time 7 days earlier or later. A full week can sometimes be less than
 * or more than 7*24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 7*24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
 * //=> 2
 *
 * @example
 * // How many full weeks are between
 * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 8 weeks (54 days),
 * // even if DST starts and the period has
 * // only 54*24-1 hours.
 * const result = differenceInWeeks(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 6)
 * )
 * //=> 8
 */
export function differenceInWeeks(laterDate, earlierDate, options) {
  const diff = differenceInDays(laterDate, earlierDate, options) / 7;
  return getRoundingMethod(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
export default differenceInWeeks;

--- FILE: ./node_modules/date-fns/differenceInYears.cjs ---
"use strict";
exports.differenceInYears = differenceInYears;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./compareAsc.cjs");
var _index3 = require("./differenceInCalendarYears.cjs");

/**
 * The {@link differenceInYears} function options.
 */

/**
 * @name differenceInYears
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
 * //=> 1
 */
function differenceInYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  // -1 if the left date is earlier than the right date
  // 2023-12-31 - 2024-01-01 = -1
  const sign = (0, _index2.compareAsc)(laterDate_, earlierDate_);

  // First calculate the difference in calendar years
  // 2024-01-01 - 2023-12-31 = 1 year
  const diff = Math.abs(
    (0, _index3.differenceInCalendarYears)(laterDate_, earlierDate_),
  );

  // Now we need to calculate if the difference is full. To do that we set
  // both dates to the same year and check if the both date's month and day
  // form a full year.
  laterDate_.setFullYear(1584);
  earlierDate_.setFullYear(1584);

  // For it to be true, when the later date is indeed later than the earlier date
  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if
  // the normalized later date is also later than the normalized earlier date.
  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference
  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.
  const partial = (0, _index2.compareAsc)(laterDate_, earlierDate_) === -sign;

  const result = sign * (diff - +partial);

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

--- FILE: ./node_modules/date-fns/differenceInYears.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link differenceInYears} function options.
 */
export interface DifferenceInYearsOptions extends ContextOptions<Date> {}
/**
 * @name differenceInYears
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
 * //=> 1
 */
export declare function differenceInYears(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: DifferenceInYearsOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/differenceInYears.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import { compareAsc } from "./compareAsc.js";
import { differenceInCalendarYears } from "./differenceInCalendarYears.js";

/**
 * The {@link differenceInYears} function options.
 */

/**
 * @name differenceInYears
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
 * //=> 1
 */
export function differenceInYears(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  // -1 if the left date is earlier than the right date
  // 2023-12-31 - 2024-01-01 = -1
  const sign = compareAsc(laterDate_, earlierDate_);

  // First calculate the difference in calendar years
  // 2024-01-01 - 2023-12-31 = 1 year
  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));

  // Now we need to calculate if the difference is full. To do that we set
  // both dates to the same year and check if the both date's month and day
  // form a full year.
  laterDate_.setFullYear(1584);
  earlierDate_.setFullYear(1584);

  // For it to be true, when the later date is indeed later than the earlier date
  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if
  // the normalized later date is also later than the normalized earlier date.
  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference
  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.
  const partial = compareAsc(laterDate_, earlierDate_) === -sign;

  const result = sign * (diff - +partial);

  // Prevent negative zero
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
export default differenceInYears;

--- FILE: ./node_modules/date-fns/eachDayOfInterval.cjs ---
"use strict";
exports.eachDayOfInterval = eachDayOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./constructFrom.cjs");

/**
 * The {@link eachDayOfInterval} function options.
 */

/**
 * The {@link eachDayOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of days from the day of the interval start to the day of the interval end
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
function eachDayOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index2.constructFrom)(start, date));
    date.setDate(date.getDate() + step);
    date.setHours(0, 0, 0, 0);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachDayOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachDayOfInterval} function options.
 */
export interface EachDayOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachDayOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type EachDayOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachDayOfIntervalOptions | undefined,
> = Array<
  Options extends EachDayOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of days from the day of the interval start to the day of the interval end
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
export declare function eachDayOfInterval<
  IntervalType extends Interval,
  Options extends EachDayOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachDayOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachDayOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link eachDayOfInterval} function options.
 */

/**
 * The {@link eachDayOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of days from the day of the interval start to the day of the interval end
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
export function eachDayOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date.setDate(date.getDate() + step);
    date.setHours(0, 0, 0, 0);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachDayOfInterval;

--- FILE: ./node_modules/date-fns/eachHourOfInterval.cjs ---
"use strict";
exports.eachHourOfInterval = eachHourOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./constructFrom.cjs");

/**
 * The {@link eachHourOfInterval} function options.
 */

/**
 * The {@link eachHourOfInterval} function result type.
 * Resolves to the appropriate date type based on inputs.
 */

/**
 * @name eachHourOfInterval
 * @category Interval Helpers
 * @summary Return the array of hours within the specified time interval.
 *
 * @description
 * Return the array of hours within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end
 *
 * @example
 * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00
 * const result = eachHourOfInterval({
 *   start: new Date(2014, 9, 6, 12),
 *   end: new Date(2014, 9, 6, 15)
 * });
 * //=> [
 * //   Mon Oct 06 2014 12:00:00,
 * //   Mon Oct 06 2014 13:00:00,
 * //   Mon Oct 06 2014 14:00:00,
 * //   Mon Oct 06 2014 15:00:00
 * // ]
 */
function eachHourOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setMinutes(0, 0, 0);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index2.constructFrom)(start, date));
    date.setHours(date.getHours() + step);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachHourOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachHourOfInterval} function options.
 */
export interface EachHourOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachHourOfInterval} function result type.
 * Resolves to the appropriate date type based on inputs.
 */
export type EachHourOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachHourOfIntervalOptions | undefined,
> = Array<
  Options extends EachHourOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachHourOfInterval
 * @category Interval Helpers
 * @summary Return the array of hours within the specified time interval.
 *
 * @description
 * Return the array of hours within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end
 *
 * @example
 * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00
 * const result = eachHourOfInterval({
 *   start: new Date(2014, 9, 6, 12),
 *   end: new Date(2014, 9, 6, 15)
 * });
 * //=> [
 * //   Mon Oct 06 2014 12:00:00,
 * //   Mon Oct 06 2014 13:00:00,
 * //   Mon Oct 06 2014 14:00:00,
 * //   Mon Oct 06 2014 15:00:00
 * // ]
 */
export declare function eachHourOfInterval<
  IntervalType extends Interval,
  Options extends EachHourOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachHourOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachHourOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link eachHourOfInterval} function options.
 */

/**
 * The {@link eachHourOfInterval} function result type.
 * Resolves to the appropriate date type based on inputs.
 */

/**
 * @name eachHourOfInterval
 * @category Interval Helpers
 * @summary Return the array of hours within the specified time interval.
 *
 * @description
 * Return the array of hours within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end
 *
 * @example
 * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00
 * const result = eachHourOfInterval({
 *   start: new Date(2014, 9, 6, 12),
 *   end: new Date(2014, 9, 6, 15)
 * });
 * //=> [
 * //   Mon Oct 06 2014 12:00:00,
 * //   Mon Oct 06 2014 13:00:00,
 * //   Mon Oct 06 2014 14:00:00,
 * //   Mon Oct 06 2014 15:00:00
 * // ]
 */
export function eachHourOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setMinutes(0, 0, 0);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date.setHours(date.getHours() + step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachHourOfInterval;

--- FILE: ./node_modules/date-fns/eachMinuteOfInterval.cjs ---
"use strict";
exports.eachMinuteOfInterval = eachMinuteOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./addMinutes.cjs");
var _index3 = require("./constructFrom.cjs");

/**
 * The {@link eachMinuteOfInterval} function options.
 */

/**
 * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachMinuteOfInterval
 * @category Interval Helpers
 * @summary Return the array of minutes within the specified time interval.
 *
 * @description
 * Returns the array of minutes within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end
 *
 * @example
 * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03
 * const result = eachMinuteOfInterval({
 *   start: new Date(2014, 9, 14, 13),
 *   end: new Date(2014, 9, 14, 13, 3)
 * })
 * //=> [
 * //   Wed Oct 14 2014 13:00:00,
 * //   Wed Oct 14 2014 13:01:00,
 * //   Wed Oct 14 2014 13:02:00,
 * //   Wed Oct 14 2014 13:03:00
 * // ]
 */
function eachMinuteOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);
  // Set to the start of the minute
  start.setSeconds(0, 0);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  let date = reversed ? end : start;

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index3.constructFrom)(start, date));
    date = (0, _index2.addMinutes)(date, step);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachMinuteOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachMinuteOfInterval} function options.
 */
export interface EachMinuteOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type EachMinuteOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachMinuteOfIntervalOptions | undefined,
> = Array<
  Options extends EachMinuteOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachMinuteOfInterval
 * @category Interval Helpers
 * @summary Return the array of minutes within the specified time interval.
 *
 * @description
 * Returns the array of minutes within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end
 *
 * @example
 * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03
 * const result = eachMinuteOfInterval({
 *   start: new Date(2014, 9, 14, 13),
 *   end: new Date(2014, 9, 14, 13, 3)
 * })
 * //=> [
 * //   Wed Oct 14 2014 13:00:00,
 * //   Wed Oct 14 2014 13:01:00,
 * //   Wed Oct 14 2014 13:02:00,
 * //   Wed Oct 14 2014 13:03:00
 * // ]
 */
export declare function eachMinuteOfInterval<
  IntervalType extends Interval,
  Options extends EachMinuteOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachMinuteOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachMinuteOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { addMinutes } from "./addMinutes.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link eachMinuteOfInterval} function options.
 */

/**
 * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachMinuteOfInterval
 * @category Interval Helpers
 * @summary Return the array of minutes within the specified time interval.
 *
 * @description
 * Returns the array of minutes within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end
 *
 * @example
 * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03
 * const result = eachMinuteOfInterval({
 *   start: new Date(2014, 9, 14, 13),
 *   end: new Date(2014, 9, 14, 13, 3)
 * })
 * //=> [
 * //   Wed Oct 14 2014 13:00:00,
 * //   Wed Oct 14 2014 13:01:00,
 * //   Wed Oct 14 2014 13:02:00,
 * //   Wed Oct 14 2014 13:03:00
 * // ]
 */
export function eachMinuteOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);
  // Set to the start of the minute
  start.setSeconds(0, 0);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  let date = reversed ? end : start;

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date = addMinutes(date, step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachMinuteOfInterval;

--- FILE: ./node_modules/date-fns/eachMonthOfInterval.cjs ---
"use strict";
exports.eachMonthOfInterval = eachMonthOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./constructFrom.cjs");

/**
 * The {@link eachMonthOfInterval} function options.
 */

/**
 * The {@link eachMonthOfInterval} function result type. It resolves the proper data type.
 */

/**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of months from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
 * const result = eachMonthOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */
function eachMonthOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  date.setDate(1);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index2.constructFrom)(start, date));
    date.setMonth(date.getMonth() + step);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachMonthOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachMonthOfInterval} function options.
 */
export interface EachMonthOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachMonthOfInterval} function result type. It resolves the proper data type.
 */
export type EachMonthOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachMonthOfIntervalOptions | undefined,
> = Array<
  Options extends EachMonthOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of months from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
 * const result = eachMonthOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */
export declare function eachMonthOfInterval<
  IntervalType extends Interval,
  Options extends EachMonthOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachMonthOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachMonthOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link eachMonthOfInterval} function options.
 */

/**
 * The {@link eachMonthOfInterval} function result type. It resolves the proper data type.
 */

/**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of months from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
 * const result = eachMonthOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */
export function eachMonthOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  date.setDate(1);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date.setMonth(date.getMonth() + step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachMonthOfInterval;

--- FILE: ./node_modules/date-fns/eachQuarterOfInterval.cjs ---
"use strict";
exports.eachQuarterOfInterval = eachQuarterOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./addQuarters.cjs");
var _index3 = require("./constructFrom.cjs");
var _index4 = require("./startOfQuarter.cjs");

/**
 * The {@link eachQuarterOfInterval} function options.
 */

/**
 * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachQuarterOfInterval
 * @category Interval Helpers
 * @summary Return the array of quarters within the specified time interval.
 *
 * @description
 * Return the array of quarters within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval
 * @param options - An object with options
 *
 * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end
 *
 * @example
 * // Each quarter within interval 6 February 2014 - 10 August 2014:
 * const result = eachQuarterOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10),
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * // ]
 */
function eachQuarterOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed
    ? +(0, _index4.startOfQuarter)(start)
    : +(0, _index4.startOfQuarter)(end);
  let date = reversed
    ? (0, _index4.startOfQuarter)(end)
    : (0, _index4.startOfQuarter)(start);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index3.constructFrom)(start, date));
    date = (0, _index2.addQuarters)(date, step);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachQuarterOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachQuarterOfInterval} function options.
 */
export interface EachQuarterOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type EachQuarterOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachQuarterOfIntervalOptions | undefined,
> = Array<
  Options extends EachQuarterOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachQuarterOfInterval
 * @category Interval Helpers
 * @summary Return the array of quarters within the specified time interval.
 *
 * @description
 * Return the array of quarters within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval
 * @param options - An object with options
 *
 * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end
 *
 * @example
 * // Each quarter within interval 6 February 2014 - 10 August 2014:
 * const result = eachQuarterOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10),
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * // ]
 */
export declare function eachQuarterOfInterval<
  IntervalType extends Interval,
  Options extends EachQuarterOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachQuarterOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachQuarterOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { addQuarters } from "./addQuarters.js";
import { constructFrom } from "./constructFrom.js";
import { startOfQuarter } from "./startOfQuarter.js";

/**
 * The {@link eachQuarterOfInterval} function options.
 */

/**
 * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachQuarterOfInterval
 * @category Interval Helpers
 * @summary Return the array of quarters within the specified time interval.
 *
 * @description
 * Return the array of quarters within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval
 * @param options - An object with options
 *
 * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end
 *
 * @example
 * // Each quarter within interval 6 February 2014 - 10 August 2014:
 * const result = eachQuarterOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10),
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * // ]
 */
export function eachQuarterOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +startOfQuarter(start) : +startOfQuarter(end);
  let date = reversed ? startOfQuarter(end) : startOfQuarter(start);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date = addQuarters(date, step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachQuarterOfInterval;

--- FILE: ./node_modules/date-fns/eachWeekOfInterval.cjs ---
"use strict";
exports.eachWeekOfInterval = eachWeekOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./addWeeks.cjs");
var _index3 = require("./constructFrom.cjs");
var _index4 = require("./startOfWeek.cjs");

/**
 * The {@link eachWeekOfInterval} function options.
 */

/**
 * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the interval start date,
 * then the end interval date. If a context function is passed, it uses the context function return type.
 */

/**
 * @name eachWeekOfInterval
 * @category Interval Helpers
 * @summary Return the array of weeks within the specified time interval.
 *
 * @description
 * Return the array of weeks within the specified time interval.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of weeks from the week of the interval start to the week of the interval end
 *
 * @example
 * // Each week within interval 6 October 2014 - 23 November 2014:
 * const result = eachWeekOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 10, 23)
 * })
 * //=> [
 * //   Sun Oct 05 2014 00:00:00,
 * //   Sun Oct 12 2014 00:00:00,
 * //   Sun Oct 19 2014 00:00:00,
 * //   Sun Oct 26 2014 00:00:00,
 * //   Sun Nov 02 2014 00:00:00,
 * //   Sun Nov 09 2014 00:00:00,
 * //   Sun Nov 16 2014 00:00:00,
 * //   Sun Nov 23 2014 00:00:00
 * // ]
 */
function eachWeekOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const startDateWeek = reversed
    ? (0, _index4.startOfWeek)(end, options)
    : (0, _index4.startOfWeek)(start, options);
  const endDateWeek = reversed
    ? (0, _index4.startOfWeek)(start, options)
    : (0, _index4.startOfWeek)(end, options);

  startDateWeek.setHours(15);
  endDateWeek.setHours(15);

  const endTime = +endDateWeek.getTime();
  let currentDate = startDateWeek;

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+currentDate <= endTime) {
    currentDate.setHours(0);
    dates.push((0, _index3.constructFrom)(start, currentDate));
    currentDate = (0, _index2.addWeeks)(currentDate, step);
    currentDate.setHours(15);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachWeekOfInterval.d.ts ---
import type {
  ContextOptions,
  Interval,
  LocalizedOptions,
  StepOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link eachWeekOfInterval} function options.
 */
export interface EachWeekOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    WeekOptions,
    LocalizedOptions<"options">,
    ContextOptions<DateType> {}
/**
 * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the interval start date,
 * then the end interval date. If a context function is passed, it uses the context function return type.
 */
export type EachWeekOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachWeekOfIntervalOptions | undefined,
> = Array<
  Options extends EachWeekOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachWeekOfInterval
 * @category Interval Helpers
 * @summary Return the array of weeks within the specified time interval.
 *
 * @description
 * Return the array of weeks within the specified time interval.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of weeks from the week of the interval start to the week of the interval end
 *
 * @example
 * // Each week within interval 6 October 2014 - 23 November 2014:
 * const result = eachWeekOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 10, 23)
 * })
 * //=> [
 * //   Sun Oct 05 2014 00:00:00,
 * //   Sun Oct 12 2014 00:00:00,
 * //   Sun Oct 19 2014 00:00:00,
 * //   Sun Oct 26 2014 00:00:00,
 * //   Sun Nov 02 2014 00:00:00,
 * //   Sun Nov 09 2014 00:00:00,
 * //   Sun Nov 16 2014 00:00:00,
 * //   Sun Nov 23 2014 00:00:00
 * // ]
 */
export declare function eachWeekOfInterval<
  IntervalType extends Interval,
  Options extends EachWeekOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachWeekOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachWeekOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { addWeeks } from "./addWeeks.js";
import { constructFrom } from "./constructFrom.js";
import { startOfWeek } from "./startOfWeek.js";

/**
 * The {@link eachWeekOfInterval} function options.
 */

/**
 * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the interval start date,
 * then the end interval date. If a context function is passed, it uses the context function return type.
 */

/**
 * @name eachWeekOfInterval
 * @category Interval Helpers
 * @summary Return the array of weeks within the specified time interval.
 *
 * @description
 * Return the array of weeks within the specified time interval.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of weeks from the week of the interval start to the week of the interval end
 *
 * @example
 * // Each week within interval 6 October 2014 - 23 November 2014:
 * const result = eachWeekOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 10, 23)
 * })
 * //=> [
 * //   Sun Oct 05 2014 00:00:00,
 * //   Sun Oct 12 2014 00:00:00,
 * //   Sun Oct 19 2014 00:00:00,
 * //   Sun Oct 26 2014 00:00:00,
 * //   Sun Nov 02 2014 00:00:00,
 * //   Sun Nov 09 2014 00:00:00,
 * //   Sun Nov 16 2014 00:00:00,
 * //   Sun Nov 23 2014 00:00:00
 * // ]
 */
export function eachWeekOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const startDateWeek = reversed
    ? startOfWeek(end, options)
    : startOfWeek(start, options);
  const endDateWeek = reversed
    ? startOfWeek(start, options)
    : startOfWeek(end, options);

  startDateWeek.setHours(15);
  endDateWeek.setHours(15);

  const endTime = +endDateWeek.getTime();
  let currentDate = startDateWeek;

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+currentDate <= endTime) {
    currentDate.setHours(0);
    dates.push(constructFrom(start, currentDate));
    currentDate = addWeeks(currentDate, step);
    currentDate.setHours(15);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachWeekOfInterval;

--- FILE: ./node_modules/date-fns/eachWeekendOfInterval.cjs ---
"use strict";
exports.eachWeekendOfInterval = eachWeekendOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./constructFrom.cjs");
var _index3 = require("./eachDayOfInterval.cjs");
var _index4 = require("./isWeekend.cjs");

/**
 * The {@link eachWeekendOfInterval} function options.
 */

/**
 * The {@link eachWeekendOfInterval} function result type.
 */

/**
 * @name eachWeekendOfInterval
 * @category Interval Helpers
 * @summary List all the Saturdays and Sundays in the given date interval.
 *
 * @description
 * Get all the Saturdays and Sundays in the given date interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The given interval
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given date interval
 * const result = eachWeekendOfInterval({
 *   start: new Date(2018, 8, 17),
 *   end: new Date(2018, 8, 30)
 * })
 * //=> [
 * //   Sat Sep 22 2018 00:00:00,
 * //   Sun Sep 23 2018 00:00:00,
 * //   Sat Sep 29 2018 00:00:00,
 * //   Sun Sep 30 2018 00:00:00
 * // ]
 */
function eachWeekendOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);
  const dateInterval = (0, _index3.eachDayOfInterval)({ start, end }, options);
  const weekends = [];
  let index = 0;
  while (index < dateInterval.length) {
    const date = dateInterval[index++];
    if ((0, _index4.isWeekend)(date))
      weekends.push((0, _index2.constructFrom)(start, date));
  }
  return weekends;
}

--- FILE: ./node_modules/date-fns/eachWeekendOfInterval.d.ts ---
import type { ContextOptions, Interval } from "./types.js";
/**
 * The {@link eachWeekendOfInterval} function options.
 */
export interface EachWeekendOfIntervalOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * The {@link eachWeekendOfInterval} function result type.
 */
export type EachWeekendOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachWeekendOfIntervalOptions | undefined,
> = Array<
  Options extends EachWeekendOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachWeekendOfInterval
 * @category Interval Helpers
 * @summary List all the Saturdays and Sundays in the given date interval.
 *
 * @description
 * Get all the Saturdays and Sundays in the given date interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The given interval
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given date interval
 * const result = eachWeekendOfInterval({
 *   start: new Date(2018, 8, 17),
 *   end: new Date(2018, 8, 30)
 * })
 * //=> [
 * //   Sat Sep 22 2018 00:00:00,
 * //   Sun Sep 23 2018 00:00:00,
 * //   Sat Sep 29 2018 00:00:00,
 * //   Sun Sep 30 2018 00:00:00
 * // ]
 */
export declare function eachWeekendOfInterval<
  IntervalType extends Interval,
  Options extends EachWeekendOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachWeekendOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachWeekendOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { constructFrom } from "./constructFrom.js";
import { eachDayOfInterval } from "./eachDayOfInterval.js";
import { isWeekend } from "./isWeekend.js";

/**
 * The {@link eachWeekendOfInterval} function options.
 */

/**
 * The {@link eachWeekendOfInterval} function result type.
 */

/**
 * @name eachWeekendOfInterval
 * @category Interval Helpers
 * @summary List all the Saturdays and Sundays in the given date interval.
 *
 * @description
 * Get all the Saturdays and Sundays in the given date interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The given interval
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given date interval
 * const result = eachWeekendOfInterval({
 *   start: new Date(2018, 8, 17),
 *   end: new Date(2018, 8, 30)
 * })
 * //=> [
 * //   Sat Sep 22 2018 00:00:00,
 * //   Sun Sep 23 2018 00:00:00,
 * //   Sat Sep 29 2018 00:00:00,
 * //   Sun Sep 30 2018 00:00:00
 * // ]
 */
export function eachWeekendOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);
  const dateInterval = eachDayOfInterval({ start, end }, options);
  const weekends = [];
  let index = 0;
  while (index < dateInterval.length) {
    const date = dateInterval[index++];
    if (isWeekend(date)) weekends.push(constructFrom(start, date));
  }
  return weekends;
}

// Fallback for modularized imports:
export default eachWeekendOfInterval;

--- FILE: ./node_modules/date-fns/eachWeekendOfMonth.cjs ---
"use strict";
exports.eachWeekendOfMonth = eachWeekendOfMonth;
var _index = require("./eachWeekendOfInterval.cjs");
var _index2 = require("./endOfMonth.cjs");
var _index3 = require("./startOfMonth.cjs");

/**
 * The {@link eachWeekendOfMonth} function options.
 */

/**
 * @name eachWeekendOfMonth
 * @category Month Helpers
 * @summary List all the Saturdays and Sundays in the given month.
 *
 * @description
 * Get all the Saturdays and Sundays in the given month.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given month
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given month
 * const result = eachWeekendOfMonth(new Date(2022, 1, 1))
 * //=> [
 * //   Sat Feb 05 2022 00:00:00,
 * //   Sun Feb 06 2022 00:00:00,
 * //   Sat Feb 12 2022 00:00:00,
 * //   Sun Feb 13 2022 00:00:00,
 * //   Sat Feb 19 2022 00:00:00,
 * //   Sun Feb 20 2022 00:00:00,
 * //   Sat Feb 26 2022 00:00:00,
 * //   Sun Feb 27 2022 00:00:00
 * // ]
 */
function eachWeekendOfMonth(date, options) {
  const start = (0, _index3.startOfMonth)(date, options);
  const end = (0, _index2.endOfMonth)(date, options);
  return (0, _index.eachWeekendOfInterval)({ start, end }, options);
}

--- FILE: ./node_modules/date-fns/eachWeekendOfMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link eachWeekendOfMonth} function options.
 */
export interface EachWeekendOfMonthOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name eachWeekendOfMonth
 * @category Month Helpers
 * @summary List all the Saturdays and Sundays in the given month.
 *
 * @description
 * Get all the Saturdays and Sundays in the given month.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given month
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given month
 * const result = eachWeekendOfMonth(new Date(2022, 1, 1))
 * //=> [
 * //   Sat Feb 05 2022 00:00:00,
 * //   Sun Feb 06 2022 00:00:00,
 * //   Sat Feb 12 2022 00:00:00,
 * //   Sun Feb 13 2022 00:00:00,
 * //   Sat Feb 19 2022 00:00:00,
 * //   Sun Feb 20 2022 00:00:00,
 * //   Sat Feb 26 2022 00:00:00,
 * //   Sun Feb 27 2022 00:00:00
 * // ]
 */
export declare function eachWeekendOfMonth<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EachWeekendOfMonthOptions<ResultDate>,
): ResultDate[];

--- FILE: ./node_modules/date-fns/eachWeekendOfMonth.js ---
import { eachWeekendOfInterval } from "./eachWeekendOfInterval.js";
import { endOfMonth } from "./endOfMonth.js";
import { startOfMonth } from "./startOfMonth.js";

/**
 * The {@link eachWeekendOfMonth} function options.
 */

/**
 * @name eachWeekendOfMonth
 * @category Month Helpers
 * @summary List all the Saturdays and Sundays in the given month.
 *
 * @description
 * Get all the Saturdays and Sundays in the given month.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given month
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given month
 * const result = eachWeekendOfMonth(new Date(2022, 1, 1))
 * //=> [
 * //   Sat Feb 05 2022 00:00:00,
 * //   Sun Feb 06 2022 00:00:00,
 * //   Sat Feb 12 2022 00:00:00,
 * //   Sun Feb 13 2022 00:00:00,
 * //   Sat Feb 19 2022 00:00:00,
 * //   Sun Feb 20 2022 00:00:00,
 * //   Sat Feb 26 2022 00:00:00,
 * //   Sun Feb 27 2022 00:00:00
 * // ]
 */
export function eachWeekendOfMonth(date, options) {
  const start = startOfMonth(date, options);
  const end = endOfMonth(date, options);
  return eachWeekendOfInterval({ start, end }, options);
}

// Fallback for modularized imports:
export default eachWeekendOfMonth;

--- FILE: ./node_modules/date-fns/eachWeekendOfYear.cjs ---
"use strict";
exports.eachWeekendOfYear = eachWeekendOfYear;
var _index = require("./eachWeekendOfInterval.cjs");
var _index2 = require("./endOfYear.cjs");
var _index3 = require("./startOfYear.cjs");

/**
 * The {@link eachWeekendOfYear} function options.
 */

/**
 * @name eachWeekendOfYear
 * @category Year Helpers
 * @summary List all the Saturdays and Sundays in the year.
 *
 * @description
 * Get all the Saturdays and Sundays in the year.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given year
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the year
 * const result = eachWeekendOfYear(new Date(2020, 1, 1))
 * //=> [
 * //   Sat Jan 03 2020 00:00:00,
 * //   Sun Jan 04 2020 00:00:00,
 * //   ...
 * //   Sun Dec 27 2020 00:00:00
 * // ]
 * ]
 */
function eachWeekendOfYear(date, options) {
  const start = (0, _index3.startOfYear)(date, options);
  const end = (0, _index2.endOfYear)(date, options);
  return (0, _index.eachWeekendOfInterval)({ start, end }, options);
}

--- FILE: ./node_modules/date-fns/eachWeekendOfYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link eachWeekendOfYear} function options.
 */
export interface EachWeekendOfYearOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name eachWeekendOfYear
 * @category Year Helpers
 * @summary List all the Saturdays and Sundays in the year.
 *
 * @description
 * Get all the Saturdays and Sundays in the year.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given year
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the year
 * const result = eachWeekendOfYear(new Date(2020, 1, 1))
 * //=> [
 * //   Sat Jan 03 2020 00:00:00,
 * //   Sun Jan 04 2020 00:00:00,
 * //   ...
 * //   Sun Dec 27 2020 00:00:00
 * // ]
 * ]
 */
export declare function eachWeekendOfYear<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EachWeekendOfYearOptions<ResultDate>,
): ResultDate[];

--- FILE: ./node_modules/date-fns/eachWeekendOfYear.js ---
import { eachWeekendOfInterval } from "./eachWeekendOfInterval.js";
import { endOfYear } from "./endOfYear.js";
import { startOfYear } from "./startOfYear.js";

/**
 * The {@link eachWeekendOfYear} function options.
 */

/**
 * @name eachWeekendOfYear
 * @category Year Helpers
 * @summary List all the Saturdays and Sundays in the year.
 *
 * @description
 * Get all the Saturdays and Sundays in the year.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The given year
 * @param options - An object with options
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the year
 * const result = eachWeekendOfYear(new Date(2020, 1, 1))
 * //=> [
 * //   Sat Jan 03 2020 00:00:00,
 * //   Sun Jan 04 2020 00:00:00,
 * //   ...
 * //   Sun Dec 27 2020 00:00:00
 * // ]
 * ]
 */
export function eachWeekendOfYear(date, options) {
  const start = startOfYear(date, options);
  const end = endOfYear(date, options);
  return eachWeekendOfInterval({ start, end }, options);
}

// Fallback for modularized imports:
export default eachWeekendOfYear;

--- FILE: ./node_modules/date-fns/eachYearOfInterval.cjs ---
"use strict";
exports.eachYearOfInterval = eachYearOfInterval;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./constructFrom.cjs");

/**
 * The {@link eachYearOfInterval} function options.
 */

/**
 * The {@link eachYearOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachYearOfInterval
 * @category Interval Helpers
 * @summary Return the array of yearly timestamps within the specified time interval.
 *
 * @description
 * Return the array of yearly timestamps within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each year between 6 February 2014 and 10 August 2017:
 * const result = eachYearOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2017, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Thu Jan 01 2015 00:00:00,
 * //   Fri Jan 01 2016 00:00:00,
 * //   Sun Jan 01 2017 00:00:00
 * // ]
 */
function eachYearOfInterval(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  date.setMonth(0, 1);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0, _index2.constructFrom)(start, date));
    date.setFullYear(date.getFullYear() + step);
  }

  return reversed ? dates.reverse() : dates;
}

--- FILE: ./node_modules/date-fns/eachYearOfInterval.d.ts ---
import type { ContextOptions, Interval, StepOptions } from "./types.js";
/**
 * The {@link eachYearOfInterval} function options.
 */
export interface EachYearOfIntervalOptions<DateType extends Date = Date>
  extends StepOptions,
    ContextOptions<DateType> {}
/**
 * The {@link eachYearOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */
export type EachYearOfIntervalResult<
  IntervalType extends Interval,
  Options extends EachYearOfIntervalOptions | undefined,
> = Array<
  Options extends EachYearOfIntervalOptions<infer DateType>
    ? DateType
    : IntervalType["start"] extends Date
      ? IntervalType["start"]
      : IntervalType["end"] extends Date
        ? IntervalType["end"]
        : Date
>;
/**
 * @name eachYearOfInterval
 * @category Interval Helpers
 * @summary Return the array of yearly timestamps within the specified time interval.
 *
 * @description
 * Return the array of yearly timestamps within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each year between 6 February 2014 and 10 August 2017:
 * const result = eachYearOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2017, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Thu Jan 01 2015 00:00:00,
 * //   Fri Jan 01 2016 00:00:00,
 * //   Sun Jan 01 2017 00:00:00
 * // ]
 */
export declare function eachYearOfInterval<
  IntervalType extends Interval,
  Options extends EachYearOfIntervalOptions | undefined = undefined,
>(
  interval: IntervalType,
  options?: Options,
): EachYearOfIntervalResult<IntervalType, Options>;

--- FILE: ./node_modules/date-fns/eachYearOfInterval.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { constructFrom } from "./constructFrom.js";

/**
 * The {@link eachYearOfInterval} function options.
 */

/**
 * The {@link eachYearOfInterval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the date argument,
 * then the start interval date, and finally the end interval date. If
 * a context function is passed, it uses the context function return type.
 */

/**
 * @name eachYearOfInterval
 * @category Interval Helpers
 * @summary Return the array of yearly timestamps within the specified time interval.
 *
 * @description
 * Return the array of yearly timestamps within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each year between 6 February 2014 and 10 August 2017:
 * const result = eachYearOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2017, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Thu Jan 01 2015 00:00:00,
 * //   Fri Jan 01 2016 00:00:00,
 * //   Sun Jan 01 2017 00:00:00
 * // ]
 */
export function eachYearOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  date.setMonth(0, 1);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date.setFullYear(date.getFullYear() + step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
export default eachYearOfInterval;

--- FILE: ./node_modules/date-fns/endOfDay.cjs ---
"use strict";
exports.endOfDay = endOfDay;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfDay} function options.
 */

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfDay.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfDay} function options.
 */
export interface EndOfDayOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
export declare function endOfDay<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfDayOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfDay.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfDay} function options.
 */

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
export function endOfDay(date, options) {
  const _date = toDate(date, options?.in);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfDay;

--- FILE: ./node_modules/date-fns/endOfDecade.cjs ---
"use strict";
exports.endOfDecade = endOfDecade;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfDecade} function options.
 */

/**
 * @name endOfDecade
 * @category Decade Helpers
 * @summary Return the end of a decade for the given date.
 *
 * @description
 * Return the end of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a decade
 *
 * @example
 * // The end of a decade for 12 May 1984 00:00:00:
 * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))
 * //=> Dec 31 1989 23:59:59.999
 */
function endOfDecade(date, options) {
  // TODO: Switch to more technical definition in of decades that start with 1
  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
  // change, so it can only be done in 4.0.
  const _date = (0, _index.toDate)(date, options?.in);
  const year = _date.getFullYear();
  const decade = 9 + Math.floor(year / 10) * 10;
  _date.setFullYear(decade, 11, 31);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfDecade.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfDecade} function options.
 */
export interface EndOfDecadeOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfDecade
 * @category Decade Helpers
 * @summary Return the end of a decade for the given date.
 *
 * @description
 * Return the end of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a decade
 *
 * @example
 * // The end of a decade for 12 May 1984 00:00:00:
 * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))
 * //=> Dec 31 1989 23:59:59.999
 */
export declare function endOfDecade<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfDecadeOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfDecade.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfDecade} function options.
 */

/**
 * @name endOfDecade
 * @category Decade Helpers
 * @summary Return the end of a decade for the given date.
 *
 * @description
 * Return the end of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a decade
 *
 * @example
 * // The end of a decade for 12 May 1984 00:00:00:
 * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))
 * //=> Dec 31 1989 23:59:59.999
 */
export function endOfDecade(date, options) {
  // TODO: Switch to more technical definition in of decades that start with 1
  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
  // change, so it can only be done in 4.0.
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  const decade = 9 + Math.floor(year / 10) * 10;
  _date.setFullYear(decade, 11, 31);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfDecade;

--- FILE: ./node_modules/date-fns/endOfHour.cjs ---
"use strict";
exports.endOfHour = endOfHour;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfHour} function options.
 */

/**
 * @name endOfHour
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
function endOfHour(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  _date.setMinutes(59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfHour.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfHour} function options.
 */
export interface EndOfHourOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfHour
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
export declare function endOfHour<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfHourOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfHour.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfHour} function options.
 */

/**
 * @name endOfHour
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
export function endOfHour(date, options) {
  const _date = toDate(date, options?.in);
  _date.setMinutes(59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfHour;

--- FILE: ./node_modules/date-fns/endOfISOWeek.cjs ---
"use strict";
exports.endOfISOWeek = endOfISOWeek;
var _index = require("./endOfWeek.cjs");

/**
 * The {@link endOfISOWeek} function options.
 */

/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfISOWeek(date, options) {
  return (0, _index.endOfWeek)(date, { ...options, weekStartsOn: 1 });
}

--- FILE: ./node_modules/date-fns/endOfISOWeek.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfISOWeek} function options.
 */
export interface EndOfISOWeekOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
export declare function endOfISOWeek<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfISOWeekOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfISOWeek.js ---
import { endOfWeek } from "./endOfWeek.js";

/**
 * The {@link endOfISOWeek} function options.
 */

/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
export function endOfISOWeek(date, options) {
  return endOfWeek(date, { ...options, weekStartsOn: 1 });
}

// Fallback for modularized imports:
export default endOfISOWeek;

--- FILE: ./node_modules/date-fns/endOfISOWeekYear.cjs ---
"use strict";
exports.endOfISOWeekYear = endOfISOWeekYear;
var _index = require("./constructFrom.cjs");
var _index2 = require("./getISOWeekYear.cjs");
var _index3 = require("./startOfISOWeek.cjs");

/**
 * The {@link endOfISOWeekYear} function options.
 */

/**
 * @name endOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ContextDate - The `Date` type of the context function.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * const result = endOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */
function endOfISOWeekYear(date, options) {
  const year = (0, _index2.getISOWeekYear)(date, options);
  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(
    options?.in || date,
    0,
  );
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const _date = (0, _index3.startOfISOWeek)(fourthOfJanuaryOfNextYear, options);
  _date.setMilliseconds(_date.getMilliseconds() - 1);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfISOWeekYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfISOWeekYear} function options.
 */
export interface EndOfISOWeekYearOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ContextDate - The `Date` type of the context function.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * const result = endOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */
export declare function endOfISOWeekYear<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfISOWeekYearOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfISOWeekYear.js ---
import { constructFrom } from "./constructFrom.js";
import { getISOWeekYear } from "./getISOWeekYear.js";
import { startOfISOWeek } from "./startOfISOWeek.js";

/**
 * The {@link endOfISOWeekYear} function options.
 */

/**
 * @name endOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ContextDate - The `Date` type of the context function.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * const result = endOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */
export function endOfISOWeekYear(date, options) {
  const year = getISOWeekYear(date, options);
  const fourthOfJanuaryOfNextYear = constructFrom(options?.in || date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const _date = startOfISOWeek(fourthOfJanuaryOfNextYear, options);
  _date.setMilliseconds(_date.getMilliseconds() - 1);
  return _date;
}

// Fallback for modularized imports:
export default endOfISOWeekYear;

--- FILE: ./node_modules/date-fns/endOfMinute.cjs ---
"use strict";
exports.endOfMinute = endOfMinute;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfMinute} function options.
 */

/**
 * @name endOfMinute
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone or the provided context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
function endOfMinute(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  _date.setSeconds(59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfMinute.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfMinute} function options.
 */
export interface EndOfMinuteOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfMinute
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone or the provided context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
export declare function endOfMinute<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfMinuteOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfMinute.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfMinute} function options.
 */

/**
 * @name endOfMinute
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone or the provided context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
export function endOfMinute(date, options) {
  const _date = toDate(date, options?.in);
  _date.setSeconds(59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfMinute;

--- FILE: ./node_modules/date-fns/endOfMonth.cjs ---
"use strict";
exports.endOfMonth = endOfMonth;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfMonth} function options.
 */

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfMonth} function options.
 */
export interface EndOfMonthOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
export declare function endOfMonth<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfMonthOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfMonth.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfMonth} function options.
 */

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
export function endOfMonth(date, options) {
  const _date = toDate(date, options?.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfMonth;

--- FILE: ./node_modules/date-fns/endOfQuarter.cjs ---
"use strict";
exports.endOfQuarter = endOfQuarter;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfQuarter} function options.
 */

/**
 * @name endOfQuarter
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfQuarter(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  const currentMonth = _date.getMonth();
  const month = currentMonth - (currentMonth % 3) + 3;
  _date.setMonth(month, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfQuarter.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfQuarter} function options.
 */
export interface EndOfQuarterOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfQuarter
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
export declare function endOfQuarter<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfQuarterOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfQuarter.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfQuarter} function options.
 */

/**
 * @name endOfQuarter
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
export function endOfQuarter(date, options) {
  const _date = toDate(date, options?.in);
  const currentMonth = _date.getMonth();
  const month = currentMonth - (currentMonth % 3) + 3;
  _date.setMonth(month, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfQuarter;

--- FILE: ./node_modules/date-fns/endOfSecond.cjs ---
"use strict";
exports.endOfSecond = endOfSecond;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfSecond} function options.
 */

/**
 * @name endOfSecond
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone if no `in` option is specified.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
function endOfSecond(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  _date.setMilliseconds(999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfSecond.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfSecond} function options.
 */
export interface EndOfSecondOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfSecond
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone if no `in` option is specified.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
export declare function endOfSecond<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(
  date: DateArg<DateType>,
  options?: EndOfSecondOptions<ResultDate> | undefined,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfSecond.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfSecond} function options.
 */

/**
 * @name endOfSecond
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone if no `in` option is specified.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
export function endOfSecond(date, options) {
  const _date = toDate(date, options?.in);
  _date.setMilliseconds(999);
  return _date;
}

// Fallback for modularized imports:
export default endOfSecond;

--- FILE: ./node_modules/date-fns/endOfToday.cjs ---
"use strict";
exports.endOfToday = endOfToday;
var _index = require("./endOfDay.cjs");

/**
 * The {@link endOfToday} function options.
 */

/**
 * @name endOfToday
 * @category Day Helpers
 * @summary Return the end of today.
 * @pure false
 *
 * @description
 * Return the end of today.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 *
 * @returns The end of today
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */
function endOfToday(options) {
  return (0, _index.endOfDay)(Date.now(), options);
}

--- FILE: ./node_modules/date-fns/endOfToday.d.ts ---
import type { ContextOptions } from "./types.js";
/**
 * The {@link endOfToday} function options.
 */
export interface EndOfTodayOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfToday
 * @category Day Helpers
 * @summary Return the end of today.
 * @pure false
 *
 * @description
 * Return the end of today.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 *
 * @returns The end of today
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */
export declare function endOfToday<ResultDate extends Date = Date>(
  options?: EndOfTodayOptions<ResultDate>,
): ResultDate;

--- FILE: ./node_modules/date-fns/endOfToday.js ---
import { endOfDay } from "./endOfDay.js";

/**
 * The {@link endOfToday} function options.
 */

/**
 * @name endOfToday
 * @category Day Helpers
 * @summary Return the end of today.
 * @pure false
 *
 * @description
 * Return the end of today.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 *
 * @returns The end of today
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */
export function endOfToday(options) {
  return endOfDay(Date.now(), options);
}

// Fallback for modularized imports:
export default endOfToday;

--- FILE: ./node_modules/date-fns/endOfTomorrow.cjs ---
"use strict";
exports.endOfTomorrow = endOfTomorrow;
var _index = require("./constructNow.cjs");

/**
 * The {@link endOfTomorrow} function options.
 */

/**
 * @name endOfTomorrow
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 * @pure false
 *
 * @description
 * Return the end of tomorrow.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 * @returns The end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */
function endOfTomorrow(options) {
  const now = (0, _index.constructNow)(options?.in);
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();

  const date = (0, _index.constructNow)(options?.in);
  date.setFullYear(year, month, day + 1);
  date.setHours(23, 59, 59, 999);
  return options?.in ? options.in(date) : date;
}

--- FILE: ./node_modules/date-fns/endOfTomorrow.d.ts ---
import type { ContextOptions } from "./types.js";
/**
 * The {@link endOfTomorrow} function options.
 */
export interface EndOfTomorrowOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfTomorrow
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 * @pure false
 *
 * @description
 * Return the end of tomorrow.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 * @returns The end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */
export declare function endOfTomorrow<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(options?: EndOfTomorrowOptions<ResultDate> | undefined): ResultDate;

--- FILE: ./node_modules/date-fns/endOfTomorrow.js ---
import { constructNow } from "./constructNow.js";

/**
 * The {@link endOfTomorrow} function options.
 */

/**
 * @name endOfTomorrow
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 * @pure false
 *
 * @description
 * Return the end of tomorrow.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param options - The options
 * @returns The end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */
export function endOfTomorrow(options) {
  const now = constructNow(options?.in);
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();

  const date = constructNow(options?.in);
  date.setFullYear(year, month, day + 1);
  date.setHours(23, 59, 59, 999);
  return options?.in ? options.in(date) : date;
}

// Fallback for modularized imports:
export default endOfTomorrow;

--- FILE: ./node_modules/date-fns/endOfWeek.cjs ---
"use strict";
exports.endOfWeek = endOfWeek;
var _index = require("./_lib/defaultOptions.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link endOfWeek} function options.
 */

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(date, options) {
  const defaultOptions = (0, _index.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0, _index2.toDate)(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  _date.setDate(_date.getDate() + diff);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfWeek.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link endOfWeek} function options.
 */
export interface EndOfWeekOptions<DateType extends Date = Date>
  extends WeekOptions,
    LocalizedOptions<"options">,
    ContextOptions<DateType> {}
/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
export declare function endOfWeek<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(date: DateArg<DateType>, options?: EndOfWeekOptions<ResultDate>): ResultDate;

--- FILE: ./node_modules/date-fns/endOfWeek.js ---
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { toDate } from "./toDate.js";

/**
 * The {@link endOfWeek} function options.
 */

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
export function endOfWeek(date, options) {
  const defaultOptions = getDefaultOptions();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = toDate(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  _date.setDate(_date.getDate() + diff);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfWeek;

--- FILE: ./node_modules/date-fns/endOfYear.cjs ---
"use strict";
exports.endOfYear = endOfYear;
var _index = require("./toDate.cjs");

/**
 * The {@link endOfYear} function options.
 */

/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  const year = _date.getFullYear();
  _date.setFullYear(year + 1, 0, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

--- FILE: ./node_modules/date-fns/endOfYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link endOfYear} function options.
 */
export interface EndOfYearOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
export declare function endOfYear<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(date: DateArg<DateType>, options?: EndOfYearOptions<ResultDate>): ResultDate;

--- FILE: ./node_modules/date-fns/endOfYear.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link endOfYear} function options.
 */

/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
export function endOfYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  _date.setFullYear(year + 1, 0, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
export default endOfYear;

--- FILE: ./node_modules/date-fns/endOfYesterday.cjs ---
"use strict";
exports.endOfYesterday = endOfYesterday;
var _index = require("./constructFrom.cjs");
var _index2 = require("./constructNow.cjs");

/**
 * The {@link endOfYesterday} function options.
 */

/**
 * @name endOfYesterday
 * @category Day Helpers
 * @summary Return the end of yesterday.
 * @pure false
 *
 * @description
 * Return the end of yesterday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @returns The end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */
function endOfYesterday(options) {
  const now = (0, _index2.constructNow)(options?.in);
  const date = (0, _index.constructFrom)(options?.in, 0);
  date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);
  date.setHours(23, 59, 59, 999);
  return date;
}

--- FILE: ./node_modules/date-fns/endOfYesterday.d.ts ---
import type { ContextOptions } from "./types.js";
/**
 * The {@link endOfYesterday} function options.
 */
export interface EndOfYesterdayOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name endOfYesterday
 * @category Day Helpers
 * @summary Return the end of yesterday.
 * @pure false
 *
 * @description
 * Return the end of yesterday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @returns The end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */
export declare function endOfYesterday<
  DateType extends Date,
  ResultDate extends Date = DateType,
>(options?: EndOfYesterdayOptions<ResultDate> | undefined): ResultDate;

--- FILE: ./node_modules/date-fns/endOfYesterday.js ---
import { constructFrom } from "./constructFrom.js";
import { constructNow } from "./constructNow.js";

/**
 * The {@link endOfYesterday} function options.
 */

/**
 * @name endOfYesterday
 * @category Day Helpers
 * @summary Return the end of yesterday.
 * @pure false
 *
 * @description
 * Return the end of yesterday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @returns The end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */
export function endOfYesterday(options) {
  const now = constructNow(options?.in);
  const date = constructFrom(options?.in, 0);
  date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);
  date.setHours(23, 59, 59, 999);
  return date;
}

// Fallback for modularized imports:
export default endOfYesterday;

--- FILE: ./node_modules/date-fns/format.cjs ---
"use strict";
exports.format = exports.formatDate = format;
Object.defineProperty(exports, "formatters", {
  enumerable: true,
  get: function () {
    return _index3.formatters;
  },
});
Object.defineProperty(exports, "longFormatters", {
  enumerable: true,
  get: function () {
    return _index4.longFormatters;
  },
});
var _index = require("./_lib/defaultLocale.cjs");
var _index2 = require("./_lib/defaultOptions.cjs");
var _index3 = require("./_lib/format/formatters.cjs");
var _index4 = require("./_lib/format/longFormatters.cjs");
var _index5 = require("./_lib/protectedTokens.cjs");

var _index6 = require("./isValid.cjs");
var _index7 = require("./toDate.cjs");

// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp =
  /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;

/**
 * The {@link format} function options.
 */

/**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function format(date, formatStr, options) {
  const defaultOptions = (0, _index2.getDefaultOptions)();
  const locale =
    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;

  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const originalDate = (0, _index7.toDate)(date, options?.in);

  if (!(0, _index6.isValid)(originalDate)) {
    throw new RangeError("Invalid time value");
  }

  let parts = formatStr
    .match(longFormattingTokensRegExp)
    .map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        const longFormatter = _index4.longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    })
    .join("")
    .match(formattingTokensRegExp)
    .map((substring) => {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return { isToken: false, value: "'" };
      }

      const firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return { isToken: false, value: cleanEscapedString(substring) };
      }

      if (_index3.formatters[firstCharacter]) {
        return { isToken: true, value: substring };
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" +
            firstCharacter +
            "`",
        );
      }

      return { isToken: false, value: substring };
    });

  // invoke localize preprocessor (only for french locales at the moment)
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }

  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale,
  };

  return parts
    .map((part) => {
      if (!part.isToken) return part.value;

      const token = part.value;

      if (
        (!options?.useAdditionalWeekYearTokens &&
          (0, _index5.isProtectedWeekYearToken)(token)) ||
        (!options?.useAdditionalDayOfYearTokens &&
          (0, _index5.isProtectedDayOfYearToken)(token))
      ) {
        (0, _index5.warnOrThrowProtectedError)(token, formatStr, String(date));
      }

      const formatter = _index3.formatters[token[0]];
      return formatter(originalDate, token, locale.localize, formatterOptions);
    })
    .join("");
}

function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);

  if (!matched) {
    return input;
  }

  return matched[1].replace(doubleQuoteRegExp, "'");
}

--- FILE: ./node_modules/date-fns/format.d.ts ---
import { formatters } from "./_lib/format/formatters.js";
import { longFormatters } from "./_lib/format/longFormatters.js";
import type {
  AdditionalTokensOptions,
  ContextOptions,
  DateArg,
  FirstWeekContainsDateOptions,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
export { formatters, longFormatters };
export { format as formatDate };
export type { FormatOptions as FormatDateOptions };
/**
 * The {@link format} function options.
 */
export interface FormatOptions
  extends LocalizedOptions<"options" | "localize" | "formatLong">,
    WeekOptions,
    FirstWeekContainsDateOptions,
    AdditionalTokensOptions,
    ContextOptions<Date> {}
/**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
export declare function format(
  date: DateArg<Date> & {},
  formatStr: string,
  options?: FormatOptions,
): string;

--- FILE: ./node_modules/date-fns/format.js ---
import { defaultLocale } from "./_lib/defaultLocale.js";
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { formatters } from "./_lib/format/formatters.js";
import { longFormatters } from "./_lib/format/longFormatters.js";
import {
  isProtectedDayOfYearToken,
  isProtectedWeekYearToken,
  warnOrThrowProtectedError,
} from "./_lib/protectedTokens.js";
import { isValid } from "./isValid.js";
import { toDate } from "./toDate.js";

// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874
export { formatters, longFormatters };

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp =
  /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;

export { format as formatDate };

/**
 * The {@link format} function options.
 */

/**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
export function format(date, formatStr, options) {
  const defaultOptions = getDefaultOptions();
  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;

  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const originalDate = toDate(date, options?.in);

  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }

  let parts = formatStr
    .match(longFormattingTokensRegExp)
    .map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        const longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    })
    .join("")
    .match(formattingTokensRegExp)
    .map((substring) => {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return { isToken: false, value: "'" };
      }

      const firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return { isToken: false, value: cleanEscapedString(substring) };
      }

      if (formatters[firstCharacter]) {
        return { isToken: true, value: substring };
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" +
            firstCharacter +
            "`",
        );
      }

      return { isToken: false, value: substring };
    });

  // invoke localize preprocessor (only for french locales at the moment)
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }

  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale,
  };

  return parts
    .map((part) => {
      if (!part.isToken) return part.value;

      const token = part.value;

      if (
        (!options?.useAdditionalWeekYearTokens &&
          isProtectedWeekYearToken(token)) ||
        (!options?.useAdditionalDayOfYearTokens &&
          isProtectedDayOfYearToken(token))
      ) {
        warnOrThrowProtectedError(token, formatStr, String(date));
      }

      const formatter = formatters[token[0]];
      return formatter(originalDate, token, locale.localize, formatterOptions);
    })
    .join("");
}

function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);

  if (!matched) {
    return input;
  }

  return matched[1].replace(doubleQuoteRegExp, "'");
}

// Fallback for modularized imports:
export default format;

--- FILE: ./node_modules/date-fns/formatDistance.cjs ---
"use strict";
exports.formatDistance = formatDistance;
var _index = require("./_lib/defaultLocale.cjs");
var _index2 = require("./_lib/defaultOptions.cjs");
var _index3 = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index4 = require("./_lib/normalizeDates.cjs");
var _index5 = require("./compareAsc.cjs");
var _index6 = require("./constants.cjs");
var _index7 = require("./differenceInMonths.cjs");
var _index8 = require("./differenceInSeconds.cjs");

/**
 * The {@link formatDistance} function options.
 */

/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */
function formatDistance(laterDate, earlierDate, options) {
  const defaultOptions = (0, _index2.getDefaultOptions)();
  const locale =
    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
  const minutesInAlmostTwoDays = 2520;

  const comparison = (0, _index5.compareAsc)(laterDate, earlierDate);

  if (isNaN(comparison)) throw new RangeError("Invalid time value");

  const localizeOptions = Object.assign({}, options, {
    addSuffix: options?.addSuffix,
    comparison: comparison,
  });

  const [laterDate_, earlierDate_] = (0, _index4.normalizeDates)(
    options?.in,
    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),
  );

  const seconds = (0, _index8.differenceInSeconds)(earlierDate_, laterDate_);
  const offsetInSeconds =
    ((0, _index3.getTimezoneOffsetInMilliseconds)(earlierDate_) -
      (0, _index3.getTimezoneOffsetInMilliseconds)(laterDate_)) /
    1000;
  const minutes = Math.round((seconds - offsetInSeconds) / 60);
  let months;

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options?.includeSeconds) {
      if (seconds < 5) {
        return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }

    // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return locale.formatDistance("xMinutes", minutes, localizeOptions);

    // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return locale.formatDistance("aboutXHours", 1, localizeOptions);

    // 1.5 hrs up to 24 hrs
  } else if (minutes < _index6.minutesInDay) {
    const hours = Math.round(minutes / 60);
    return locale.formatDistance("aboutXHours", hours, localizeOptions);

    // 1 day up to 1.75 days
  } else if (minutes < minutesInAlmostTwoDays) {
    return locale.formatDistance("xDays", 1, localizeOptions);

    // 1.75 days up to 30 days
  } else if (minutes < _index6.minutesInMonth) {
    const days = Math.round(minutes / _index6.minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);

    // 1 month up to 2 months
  } else if (minutes < _index6.minutesInMonth * 2) {
    months = Math.round(minutes / _index6.minutesInMonth);
    return locale.formatDistance("aboutXMonths", months, localizeOptions);
  }

  months = (0, _index7.differenceInMonths)(earlierDate_, laterDate_);

  // 2 months up to 12 months
  if (months < 12) {
    const nearestMonth = Math.round(minutes / _index6.minutesInMonth);
    return locale.formatDistance("xMonths", nearestMonth, localizeOptions);

    // 1 year up to max Date
  } else {
    const monthsSinceStartOfYear = months % 12;
    const years = Math.trunc(months / 12);

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return locale.formatDistance("aboutXYears", years, localizeOptions);

      // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return locale.formatDistance("overXYears", years, localizeOptions);

      // N years 9 months up to N year 12 months
    } else {
      return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}

--- FILE: ./node_modules/date-fns/formatDistance.d.ts ---
import type { ContextOptions, DateArg, LocalizedOptions } from "./types.js";
/**
 * The {@link formatDistance} function options.
 */
export interface FormatDistanceOptions
  extends LocalizedOptions<"formatDistance">,
    ContextOptions<Date> {
  /** Distances less than a minute are more detailed */
  includeSeconds?: boolean;
  /** Add "X ago"/"in X" in the locale language */
  addSuffix?: boolean;
}
/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */
export declare function formatDistance(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: FormatDistanceOptions,
): string;

--- FILE: ./node_modules/date-fns/formatDistance.js ---
import { defaultLocale } from "./_lib/defaultLocale.js";
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { compareAsc } from "./compareAsc.js";
import { minutesInDay, minutesInMonth } from "./constants.js";
import { differenceInMonths } from "./differenceInMonths.js";
import { differenceInSeconds } from "./differenceInSeconds.js";

/**
 * The {@link formatDistance} function options.
 */

/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */
export function formatDistance(laterDate, earlierDate, options) {
  const defaultOptions = getDefaultOptions();
  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;
  const minutesInAlmostTwoDays = 2520;

  const comparison = compareAsc(laterDate, earlierDate);

  if (isNaN(comparison)) throw new RangeError("Invalid time value");

  const localizeOptions = Object.assign({}, options, {
    addSuffix: options?.addSuffix,
    comparison: comparison,
  });

  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),
  );

  const seconds = differenceInSeconds(earlierDate_, laterDate_);
  const offsetInSeconds =
    (getTimezoneOffsetInMilliseconds(earlierDate_) -
      getTimezoneOffsetInMilliseconds(laterDate_)) /
    1000;
  const minutes = Math.round((seconds - offsetInSeconds) / 60);
  let months;

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options?.includeSeconds) {
      if (seconds < 5) {
        return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }

    // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return locale.formatDistance("xMinutes", minutes, localizeOptions);

    // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return locale.formatDistance("aboutXHours", 1, localizeOptions);

    // 1.5 hrs up to 24 hrs
  } else if (minutes < minutesInDay) {
    const hours = Math.round(minutes / 60);
    return locale.formatDistance("aboutXHours", hours, localizeOptions);

    // 1 day up to 1.75 days
  } else if (minutes < minutesInAlmostTwoDays) {
    return locale.formatDistance("xDays", 1, localizeOptions);

    // 1.75 days up to 30 days
  } else if (minutes < minutesInMonth) {
    const days = Math.round(minutes / minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);

    // 1 month up to 2 months
  } else if (minutes < minutesInMonth * 2) {
    months = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("aboutXMonths", months, localizeOptions);
  }

  months = differenceInMonths(earlierDate_, laterDate_);

  // 2 months up to 12 months
  if (months < 12) {
    const nearestMonth = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("xMonths", nearestMonth, localizeOptions);

    // 1 year up to max Date
  } else {
    const monthsSinceStartOfYear = months % 12;
    const years = Math.trunc(months / 12);

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return locale.formatDistance("aboutXYears", years, localizeOptions);

      // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return locale.formatDistance("overXYears", years, localizeOptions);

      // N years 9 months up to N year 12 months
    } else {
      return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}

// Fallback for modularized imports:
export default formatDistance;

--- FILE: ./node_modules/date-fns/formatDistanceStrict.cjs ---
"use strict";
exports.formatDistanceStrict = formatDistanceStrict;
var _index = require("./_lib/defaultLocale.cjs");
var _index2 = require("./_lib/defaultOptions.cjs");
var _index3 = require("./_lib/getRoundingMethod.cjs");
var _index4 = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index5 = require("./_lib/normalizeDates.cjs");
var _index6 = require("./compareAsc.cjs");
var _index7 = require("./constants.cjs");

/**
 * The {@link formatDistanceStrict} function options.
 */

/**
 * The unit used to format the distance in {@link formatDistanceStrict}.
 */

/**
 * @name formatDistanceStrict
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * const result = formatDistanceStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {
 *   unit: 'minute'
 * })
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2015
 * // to 28 January 2015, in months, rounded up?
 * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> '1 jaro'
 */

function formatDistanceStrict(laterDate, earlierDate, options) {
  const defaultOptions = (0, _index2.getDefaultOptions)();
  const locale =
    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;

  const comparison = (0, _index6.compareAsc)(laterDate, earlierDate);

  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }

  const localizeOptions = Object.assign({}, options, {
    addSuffix: options?.addSuffix,
    comparison: comparison,
  });

  const [laterDate_, earlierDate_] = (0, _index5.normalizeDates)(
    options?.in,
    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),
  );

  const roundingMethod = (0, _index3.getRoundingMethod)(
    options?.roundingMethod ?? "round",
  );

  const milliseconds = earlierDate_.getTime() - laterDate_.getTime();
  const minutes = milliseconds / _index7.millisecondsInMinute;

  const timezoneOffset =
    (0, _index4.getTimezoneOffsetInMilliseconds)(earlierDate_) -
    (0, _index4.getTimezoneOffsetInMilliseconds)(laterDate_);

  // Use DST-normalized difference in minutes for years, months and days;
  // use regular difference in minutes for hours, minutes and seconds.
  const dstNormalizedMinutes =
    (milliseconds - timezoneOffset) / _index7.millisecondsInMinute;

  const defaultUnit = options?.unit;
  let unit;
  if (!defaultUnit) {
    if (minutes < 1) {
      unit = "second";
    } else if (minutes < 60) {
      unit = "minute";
    } else if (minutes < _index7.minutesInDay) {
      unit = "hour";
    } else if (dstNormalizedMinutes < _index7.minutesInMonth) {
      unit = "day";
    } else if (dstNormalizedMinutes < _index7.minutesInYear) {
      unit = "month";
    } else {
      unit = "year";
    }
  } else {
    unit = defaultUnit;
  }

  // 0 up to 60 seconds
  if (unit === "second") {
    const seconds = roundingMethod(milliseconds / 1000);
    return locale.formatDistance("xSeconds", seconds, localizeOptions);

    // 1 up to 60 mins
  } else if (unit === "minute") {
    const roundedMinutes = roundingMethod(minutes);
    return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);

    // 1 up to 24 hours
  } else if (unit === "hour") {
    const hours = roundingMethod(minutes / 60);
    return locale.formatDistance("xHours", hours, localizeOptions);

    // 1 up to 30 days
  } else if (unit === "day") {
    const days = roundingMethod(dstNormalizedMinutes / _index7.minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);

    // 1 up to 12 months
  } else if (unit === "month") {
    const months = roundingMethod(
      dstNormalizedMinutes / _index7.minutesInMonth,
    );
    return months === 12 && defaultUnit !== "month"
      ? locale.formatDistance("xYears", 1, localizeOptions)
      : locale.formatDistance("xMonths", months, localizeOptions);

    // 1 year up to max Date
  } else {
    const years = roundingMethod(dstNormalizedMinutes / _index7.minutesInYear);
    return locale.formatDistance("xYears", years, localizeOptions);
  }
}

--- FILE: ./node_modules/date-fns/formatDistanceStrict.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  RoundingOptions,
} from "./types.js";
/**
 * The {@link formatDistanceStrict} function options.
 */
export interface FormatDistanceStrictOptions
  extends LocalizedOptions<"formatDistance">,
    RoundingOptions,
    ContextOptions<Date> {
  /** Add "X ago"/"in X" in the locale language */
  addSuffix?: boolean;
  /** If specified, will force the unit */
  unit?: FormatDistanceStrictUnit;
}
/**
 * The unit used to format the distance in {@link formatDistanceStrict}.
 */
export type FormatDistanceStrictUnit =
  | "second"
  | "minute"
  | "hour"
  | "day"
  | "month"
  | "year";
/**
 * @name formatDistanceStrict
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * const result = formatDistanceStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {
 *   unit: 'minute'
 * })
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2015
 * // to 28 January 2015, in months, rounded up?
 * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> '1 jaro'
 */
export declare function formatDistanceStrict(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: FormatDistanceStrictOptions,
): string;

--- FILE: ./node_modules/date-fns/formatDistanceStrict.js ---
import { defaultLocale } from "./_lib/defaultLocale.js";
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { getRoundingMethod } from "./_lib/getRoundingMethod.js";
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { compareAsc } from "./compareAsc.js";
import {
  millisecondsInMinute,
  minutesInDay,
  minutesInMonth,
  minutesInYear,
} from "./constants.js";

/**
 * The {@link formatDistanceStrict} function options.
 */

/**
 * The unit used to format the distance in {@link formatDistanceStrict}.
 */

/**
 * @name formatDistanceStrict
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * const result = formatDistanceStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {
 *   unit: 'minute'
 * })
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2015
 * // to 28 January 2015, in months, rounded up?
 * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> '1 jaro'
 */

export function formatDistanceStrict(laterDate, earlierDate, options) {
  const defaultOptions = getDefaultOptions();
  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;

  const comparison = compareAsc(laterDate, earlierDate);

  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }

  const localizeOptions = Object.assign({}, options, {
    addSuffix: options?.addSuffix,
    comparison: comparison,
  });

  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),
  );

  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? "round");

  const milliseconds = earlierDate_.getTime() - laterDate_.getTime();
  const minutes = milliseconds / millisecondsInMinute;

  const timezoneOffset =
    getTimezoneOffsetInMilliseconds(earlierDate_) -
    getTimezoneOffsetInMilliseconds(laterDate_);

  // Use DST-normalized difference in minutes for years, months and days;
  // use regular difference in minutes for hours, minutes and seconds.
  const dstNormalizedMinutes =
    (milliseconds - timezoneOffset) / millisecondsInMinute;

  const defaultUnit = options?.unit;
  let unit;
  if (!defaultUnit) {
    if (minutes < 1) {
      unit = "second";
    } else if (minutes < 60) {
      unit = "minute";
    } else if (minutes < minutesInDay) {
      unit = "hour";
    } else if (dstNormalizedMinutes < minutesInMonth) {
      unit = "day";
    } else if (dstNormalizedMinutes < minutesInYear) {
      unit = "month";
    } else {
      unit = "year";
    }
  } else {
    unit = defaultUnit;
  }

  // 0 up to 60 seconds
  if (unit === "second") {
    const seconds = roundingMethod(milliseconds / 1000);
    return locale.formatDistance("xSeconds", seconds, localizeOptions);

    // 1 up to 60 mins
  } else if (unit === "minute") {
    const roundedMinutes = roundingMethod(minutes);
    return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);

    // 1 up to 24 hours
  } else if (unit === "hour") {
    const hours = roundingMethod(minutes / 60);
    return locale.formatDistance("xHours", hours, localizeOptions);

    // 1 up to 30 days
  } else if (unit === "day") {
    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);

    // 1 up to 12 months
  } else if (unit === "month") {
    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);
    return months === 12 && defaultUnit !== "month"
      ? locale.formatDistance("xYears", 1, localizeOptions)
      : locale.formatDistance("xMonths", months, localizeOptions);

    // 1 year up to max Date
  } else {
    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);
    return locale.formatDistance("xYears", years, localizeOptions);
  }
}

// Fallback for modularized imports:
export default formatDistanceStrict;

--- FILE: ./node_modules/date-fns/formatDistanceToNow.cjs ---
"use strict";
exports.formatDistanceToNow = formatDistanceToNow;
var _index = require("./constructNow.cjs");

var _index2 = require("./formatDistance.cjs");

/**
 * The {@link formatDistanceToNow} function options.
 */

/**
 * @name formatDistanceToNow
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param date - The given date
 * @param options - The object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function formatDistanceToNow(date, options) {
  return (0, _index2.formatDistance)(
    date,
    (0, _index.constructNow)(date),
    options,
  );
}

--- FILE: ./node_modules/date-fns/formatDistanceToNow.d.ts ---
import type { FormatDistanceOptions } from "./formatDistance.js";
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link formatDistanceToNow} function options.
 */
export interface FormatDistanceToNowOptions
  extends FormatDistanceOptions,
    ContextOptions<Date> {}
/**
 * @name formatDistanceToNow
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param date - The given date
 * @param options - The object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
export declare function formatDistanceToNow(
  date: DateArg<Date> & {},
  options?: FormatDistanceToNowOptions,
): string;

--- FILE: ./node_modules/date-fns/formatDistanceToNow.js ---
import { constructNow } from "./constructNow.js";

import { formatDistance } from "./formatDistance.js";

/**
 * The {@link formatDistanceToNow} function options.
 */

/**
 * @name formatDistanceToNow
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param date - The given date
 * @param options - The object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
export function formatDistanceToNow(date, options) {
  return formatDistance(date, constructNow(date), options);
}

// Fallback for modularized imports:
export default formatDistanceToNow;

--- FILE: ./node_modules/date-fns/formatDistanceToNowStrict.cjs ---
"use strict";
exports.formatDistanceToNowStrict = formatDistanceToNowStrict;
var _index = require("./constructNow.cjs");

var _index2 = require("./formatDistanceStrict.cjs");

/**
 * The {@link formatDistanceToNowStrict} function options.
 */

/**
 * @name formatDistanceToNowStrict
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNowStrict(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNowStrict(
 *   new Date(2015, 0, 1, 0, 0, 15)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in 1 year'
 *
 * @example
 * // If today is 28 January 2015,
 * // what is the distance to 1 January 2015, in months, rounded up??
 * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */
function formatDistanceToNowStrict(date, options) {
  return (0, _index2.formatDistanceStrict)(
    date,
    (0, _index.constructNow)(date),
    options,
  );
}

--- FILE: ./node_modules/date-fns/formatDistanceToNowStrict.d.ts ---
import type { FormatDistanceStrictOptions } from "./formatDistanceStrict.js";
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link formatDistanceToNowStrict} function options.
 */
export interface FormatDistanceToNowStrictOptions
  extends FormatDistanceStrictOptions,
    ContextOptions<Date> {}
/**
 * @name formatDistanceToNowStrict
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNowStrict(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNowStrict(
 *   new Date(2015, 0, 1, 0, 0, 15)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in 1 year'
 *
 * @example
 * // If today is 28 January 2015,
 * // what is the distance to 1 January 2015, in months, rounded up??
 * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */
export declare function formatDistanceToNowStrict(
  date: DateArg<Date> & {},
  options?: FormatDistanceToNowStrictOptions,
): string;

--- FILE: ./node_modules/date-fns/formatDistanceToNowStrict.js ---
import { constructNow } from "./constructNow.js";

import { formatDistanceStrict } from "./formatDistanceStrict.js";

/**
 * The {@link formatDistanceToNowStrict} function options.
 */

/**
 * @name formatDistanceToNowStrict
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNowStrict(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNowStrict(
 *   new Date(2015, 0, 1, 0, 0, 15)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in 1 year'
 *
 * @example
 * // If today is 28 January 2015,
 * // what is the distance to 1 January 2015, in months, rounded up??
 * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */
export function formatDistanceToNowStrict(date, options) {
  return formatDistanceStrict(date, constructNow(date), options);
}

// Fallback for modularized imports:
export default formatDistanceToNowStrict;

--- FILE: ./node_modules/date-fns/formatDuration.cjs ---
"use strict";
exports.formatDuration = formatDuration;

var _index = require("./_lib/defaultLocale.cjs");
var _index2 = require("./_lib/defaultOptions.cjs");

/**
 * The {@link formatDuration} function options.
 */

const defaultFormat = [
  "years",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
];

/**
 * @name formatDuration
 * @category Common Helpers
 * @summary Formats a duration in human-readable format
 *
 * @description
 * Return human-readable duration string i.e. "9 months 2 days"
 *
 * @param duration - The duration to format
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @example
 * // Format full duration
 * formatDuration({
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30
 * })
 * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'
 *
 * @example
 * // Format partial duration
 * formatDuration({ months: 9, days: 2 })
 * //=> '9 months 2 days'
 *
 * @example
 * // Customize the format
 * formatDuration(
 *   {
 *     years: 2,
 *     months: 9,
 *     weeks: 1,
 *     days: 7,
 *     hours: 5,
 *     minutes: 9,
 *     seconds: 30
 *   },
 *   { format: ['months', 'weeks'] }
 * ) === '9 months 1 week'
 *
 * @example
 * // Customize the zeros presence
 * formatDuration({ years: 0, months: 9 })
 * //=> '9 months'
 * formatDuration({ years: 0, months: 9 }, { zero: true })
 * //=> '0 years 9 months'
 *
 * @example
 * // Customize the delimiter
 * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })
 * //=> '2 years, 9 months, 3 weeks'
 */
function formatDuration(duration, options) {
  const defaultOptions = (0, _index2.getDefaultOptions)();
  const locale =
    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
  const format = options?.format ?? defaultFormat;
  const zero = options?.zero ?? false;
  const delimiter = options?.delimiter ?? " ";

  if (!locale.formatDistance) {
    return "";
  }

  const result = format
    .reduce((acc, unit) => {
      const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;
      const value = duration[unit];
      if (value !== undefined && (zero || duration[unit])) {
        return acc.concat(locale.formatDistance(token, value));
      }
      return acc;
    }, [])
    .join(delimiter);

  return result;
}

--- FILE: ./node_modules/date-fns/formatDuration.d.ts ---
import type { Duration, DurationUnit, LocalizedOptions } from "./types.js";
/**
 * The {@link formatDuration} function options.
 */
export interface FormatDurationOptions
  extends LocalizedOptions<"formatDistance"> {
  /** The array of units to format */
  format?: DurationUnit[];
  /** Should be zeros be included in the output? */
  zero?: boolean;
  /** The delimiter string to use */
  delimiter?: string;
}
/**
 * @name formatDuration
 * @category Common Helpers
 * @summary Formats a duration in human-readable format
 *
 * @description
 * Return human-readable duration string i.e. "9 months 2 days"
 *
 * @param duration - The duration to format
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @example
 * // Format full duration
 * formatDuration({
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30
 * })
 * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'
 *
 * @example
 * // Format partial duration
 * formatDuration({ months: 9, days: 2 })
 * //=> '9 months 2 days'
 *
 * @example
 * // Customize the format
 * formatDuration(
 *   {
 *     years: 2,
 *     months: 9,
 *     weeks: 1,
 *     days: 7,
 *     hours: 5,
 *     minutes: 9,
 *     seconds: 30
 *   },
 *   { format: ['months', 'weeks'] }
 * ) === '9 months 1 week'
 *
 * @example
 * // Customize the zeros presence
 * formatDuration({ years: 0, months: 9 })
 * //=> '9 months'
 * formatDuration({ years: 0, months: 9 }, { zero: true })
 * //=> '0 years 9 months'
 *
 * @example
 * // Customize the delimiter
 * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })
 * //=> '2 years, 9 months, 3 weeks'
 */
export declare function formatDuration(
  duration: Duration,
  options?: FormatDurationOptions,
): string;

--- FILE: ./node_modules/date-fns/formatDuration.js ---
import { defaultLocale } from "./_lib/defaultLocale.js";
import { getDefaultOptions } from "./_lib/defaultOptions.js";

/**
 * The {@link formatDuration} function options.
 */

const defaultFormat = [
  "years",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
];

/**
 * @name formatDuration
 * @category Common Helpers
 * @summary Formats a duration in human-readable format
 *
 * @description
 * Return human-readable duration string i.e. "9 months 2 days"
 *
 * @param duration - The duration to format
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @example
 * // Format full duration
 * formatDuration({
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30
 * })
 * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'
 *
 * @example
 * // Format partial duration
 * formatDuration({ months: 9, days: 2 })
 * //=> '9 months 2 days'
 *
 * @example
 * // Customize the format
 * formatDuration(
 *   {
 *     years: 2,
 *     months: 9,
 *     weeks: 1,
 *     days: 7,
 *     hours: 5,
 *     minutes: 9,
 *     seconds: 30
 *   },
 *   { format: ['months', 'weeks'] }
 * ) === '9 months 1 week'
 *
 * @example
 * // Customize the zeros presence
 * formatDuration({ years: 0, months: 9 })
 * //=> '9 months'
 * formatDuration({ years: 0, months: 9 }, { zero: true })
 * //=> '0 years 9 months'
 *
 * @example
 * // Customize the delimiter
 * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })
 * //=> '2 years, 9 months, 3 weeks'
 */
export function formatDuration(duration, options) {
  const defaultOptions = getDefaultOptions();
  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;
  const format = options?.format ?? defaultFormat;
  const zero = options?.zero ?? false;
  const delimiter = options?.delimiter ?? " ";

  if (!locale.formatDistance) {
    return "";
  }

  const result = format
    .reduce((acc, unit) => {
      const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;
      const value = duration[unit];
      if (value !== undefined && (zero || duration[unit])) {
        return acc.concat(locale.formatDistance(token, value));
      }
      return acc;
    }, [])
    .join(delimiter);

  return result;
}

// Fallback for modularized imports:
export default formatDuration;

--- FILE: ./node_modules/date-fns/formatISO.cjs ---
"use strict";
exports.formatISO = formatISO;
var _index = require("./_lib/addLeadingZeros.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link formatISO} function options.
 */

/**
 * @name formatISO
 * @category Common Helpers
 * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
 *
 * @description
 * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string (in local time zone)
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918T190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, date only:
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52Z'
 */
function formatISO(date, options) {
  const date_ = (0, _index2.toDate)(date, options?.in);

  if (isNaN(+date_)) {
    throw new RangeError("Invalid time value");
  }

  const format = options?.format ?? "extended";
  const representation = options?.representation ?? "complete";

  let result = "";
  let tzOffset = "";

  const dateDelimiter = format === "extended" ? "-" : "";
  const timeDelimiter = format === "extended" ? ":" : "";

  // Representation is either 'date' or 'complete'
  if (representation !== "time") {
    const day = (0, _index.addLeadingZeros)(date_.getDate(), 2);
    const month = (0, _index.addLeadingZeros)(date_.getMonth() + 1, 2);
    const year = (0, _index.addLeadingZeros)(date_.getFullYear(), 4);

    // yyyyMMdd or yyyy-MM-dd.
    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
  }

  // Representation is either 'time' or 'complete'
  if (representation !== "date") {
    // Add the timezone.
    const offset = date_.getTimezoneOffset();

    if (offset !== 0) {
      const absoluteOffset = Math.abs(offset);
      const hourOffset = (0, _index.addLeadingZeros)(
        Math.trunc(absoluteOffset / 60),
        2,
      );
      const minuteOffset = (0, _index.addLeadingZeros)(absoluteOffset % 60, 2);
      // If less than 0, the sign is +, because it is ahead of time.
      const sign = offset < 0 ? "+" : "-";

      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;
    } else {
      tzOffset = "Z";
    }

    const hour = (0, _index.addLeadingZeros)(date_.getHours(), 2);
    const minute = (0, _index.addLeadingZeros)(date_.getMinutes(), 2);
    const second = (0, _index.addLeadingZeros)(date_.getSeconds(), 2);

    // If there's also date, separate it with time with 'T'
    const separator = result === "" ? "" : "T";

    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.
    const time = [hour, minute, second].join(timeDelimiter);

    // HHmmss or HH:mm:ss.
    result = `${result}${separator}${time}${tzOffset}`;
  }

  return result;
}

--- FILE: ./node_modules/date-fns/formatISO.d.ts ---
import type { ContextOptions, DateArg, ISOFormatOptions } from "./types.js";
/**
 * The {@link formatISO} function options.
 */
export interface FormatISOOptions
  extends ISOFormatOptions,
    ContextOptions<Date> {}
/**
 * @name formatISO
 * @category Common Helpers
 * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
 *
 * @description
 * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string (in local time zone)
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918T190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, date only:
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52Z'
 */
export declare function formatISO(
  date: DateArg<Date> & {},
  options?: FormatISOOptions,
): string;

--- FILE: ./node_modules/date-fns/formatISO.js ---
import { addLeadingZeros } from "./_lib/addLeadingZeros.js";
import { toDate } from "./toDate.js";

/**
 * The {@link formatISO} function options.
 */

/**
 * @name formatISO
 * @category Common Helpers
 * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
 *
 * @description
 * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string (in local time zone)
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918T190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, date only:
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52Z'
 */
export function formatISO(date, options) {
  const date_ = toDate(date, options?.in);

  if (isNaN(+date_)) {
    throw new RangeError("Invalid time value");
  }

  const format = options?.format ?? "extended";
  const representation = options?.representation ?? "complete";

  let result = "";
  let tzOffset = "";

  const dateDelimiter = format === "extended" ? "-" : "";
  const timeDelimiter = format === "extended" ? ":" : "";

  // Representation is either 'date' or 'complete'
  if (representation !== "time") {
    const day = addLeadingZeros(date_.getDate(), 2);
    const month = addLeadingZeros(date_.getMonth() + 1, 2);
    const year = addLeadingZeros(date_.getFullYear(), 4);

    // yyyyMMdd or yyyy-MM-dd.
    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
  }

  // Representation is either 'time' or 'complete'
  if (representation !== "date") {
    // Add the timezone.
    const offset = date_.getTimezoneOffset();

    if (offset !== 0) {
      const absoluteOffset = Math.abs(offset);
      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);
      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);
      // If less than 0, the sign is +, because it is ahead of time.
      const sign = offset < 0 ? "+" : "-";

      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;
    } else {
      tzOffset = "Z";
    }

    const hour = addLeadingZeros(date_.getHours(), 2);
    const minute = addLeadingZeros(date_.getMinutes(), 2);
    const second = addLeadingZeros(date_.getSeconds(), 2);

    // If there's also date, separate it with time with 'T'
    const separator = result === "" ? "" : "T";

    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.
    const time = [hour, minute, second].join(timeDelimiter);

    // HHmmss or HH:mm:ss.
    result = `${result}${separator}${time}${tzOffset}`;
  }

  return result;
}

// Fallback for modularized imports:
export default formatISO;

--- FILE: ./node_modules/date-fns/formatISO9075.cjs ---
"use strict";
exports.formatISO9075 = formatISO9075;
var _index = require("./_lib/addLeadingZeros.cjs");
var _index2 = require("./isValid.cjs");
var _index3 = require("./toDate.cjs");

/**
 * The {@link formatISO9075} function options.
 */

/**
 * @name formatISO9075
 * @category Common Helpers
 * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).
 *
 * @description
 * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18 19:00:52'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075, short format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918 190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, date only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, time only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52'
 */
function formatISO9075(date, options) {
  const date_ = (0, _index3.toDate)(date, options?.in);

  if (!(0, _index2.isValid)(date_)) {
    throw new RangeError("Invalid time value");
  }

  const format = options?.format ?? "extended";
  const representation = options?.representation ?? "complete";

  let result = "";

  const dateDelimiter = format === "extended" ? "-" : "";
  const timeDelimiter = format === "extended" ? ":" : "";

  // Representation is either 'date' or 'complete'
  if (representation !== "time") {
    const day = (0, _index.addLeadingZeros)(date_.getDate(), 2);
    const month = (0, _index.addLeadingZeros)(date_.getMonth() + 1, 2);
    const year = (0, _index.addLeadingZeros)(date_.getFullYear(), 4);

    // yyyyMMdd or yyyy-MM-dd.
    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
  }

  // Representation is either 'time' or 'complete'
  if (representation !== "date") {
    const hour = (0, _index.addLeadingZeros)(date_.getHours(), 2);
    const minute = (0, _index.addLeadingZeros)(date_.getMinutes(), 2);
    const second = (0, _index.addLeadingZeros)(date_.getSeconds(), 2);

    // If there's also date, separate it with time with a space
    const separator = result === "" ? "" : " ";

    // HHmmss or HH:mm:ss.
    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;
  }

  return result;
}

--- FILE: ./node_modules/date-fns/formatISO9075.d.ts ---
import type { ContextOptions, DateArg, ISOFormatOptions } from "./types.js";
/**
 * The {@link formatISO9075} function options.
 */
export interface FormatISO9075Options
  extends ISOFormatOptions,
    ContextOptions<Date> {}
/**
 * @name formatISO9075
 * @category Common Helpers
 * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).
 *
 * @description
 * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18 19:00:52'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075, short format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918 190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, date only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, time only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52'
 */
export declare function formatISO9075(
  date: DateArg<Date> & {},
  options?: FormatISO9075Options,
): string;

--- FILE: ./node_modules/date-fns/formatISO9075.js ---
import { addLeadingZeros } from "./_lib/addLeadingZeros.js";
import { isValid } from "./isValid.js";
import { toDate } from "./toDate.js";

/**
 * The {@link formatISO9075} function options.
 */

/**
 * @name formatISO9075
 * @category Common Helpers
 * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).
 *
 * @description
 * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18 19:00:52'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075, short format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918 190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, date only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, time only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52'
 */
export function formatISO9075(date, options) {
  const date_ = toDate(date, options?.in);

  if (!isValid(date_)) {
    throw new RangeError("Invalid time value");
  }

  const format = options?.format ?? "extended";
  const representation = options?.representation ?? "complete";

  let result = "";

  const dateDelimiter = format === "extended" ? "-" : "";
  const timeDelimiter = format === "extended" ? ":" : "";

  // Representation is either 'date' or 'complete'
  if (representation !== "time") {
    const day = addLeadingZeros(date_.getDate(), 2);
    const month = addLeadingZeros(date_.getMonth() + 1, 2);
    const year = addLeadingZeros(date_.getFullYear(), 4);

    // yyyyMMdd or yyyy-MM-dd.
    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
  }

  // Representation is either 'time' or 'complete'
  if (representation !== "date") {
    const hour = addLeadingZeros(date_.getHours(), 2);
    const minute = addLeadingZeros(date_.getMinutes(), 2);
    const second = addLeadingZeros(date_.getSeconds(), 2);

    // If there's also date, separate it with time with a space
    const separator = result === "" ? "" : " ";

    // HHmmss or HH:mm:ss.
    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;
  }

  return result;
}

// Fallback for modularized imports:
export default formatISO9075;

--- FILE: ./node_modules/date-fns/formatISODuration.cjs ---
"use strict";
exports.formatISODuration = formatISODuration;

/**
 * @name formatISODuration
 * @category Common Helpers
 * @summary Format a duration object according as ISO 8601 duration string
 *
 * @description
 * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs//90001488-13/reference/r_iso_8601_duration_format.htm)
 *
 * @param duration - The duration to format
 *
 * @returns The ISO 8601 duration string
 *
 * @example
 * // Format the given duration as ISO 8601 string
 * const result = formatISODuration({
 *   years: 39,
 *   months: 2,
 *   days: 20,
 *   hours: 7,
 *   minutes: 5,
 *   seconds: 0
 * })
 * //=> 'P39Y2M20DT0H0M0S'
 */
function formatISODuration(duration) {
  const {
    years = 0,
    months = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0,
  } = duration;

  return `P${years}Y${months}M${days}DT${hours}H${minutes}M${seconds}S`;
}

--- FILE: ./node_modules/date-fns/formatISODuration.d.ts ---
import type { Duration } from "./types.js";
/**
 * @name formatISODuration
 * @category Common Helpers
 * @summary Format a duration object according as ISO 8601 duration string
 *
 * @description
 * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs//90001488-13/reference/r_iso_8601_duration_format.htm)
 *
 * @param duration - The duration to format
 *
 * @returns The ISO 8601 duration string
 *
 * @example
 * // Format the given duration as ISO 8601 string
 * const result = formatISODuration({
 *   years: 39,
 *   months: 2,
 *   days: 20,
 *   hours: 7,
 *   minutes: 5,
 *   seconds: 0
 * })
 * //=> 'P39Y2M20DT0H0M0S'
 */
export declare function formatISODuration(duration: Duration): string;

--- FILE: ./node_modules/date-fns/formatISODuration.js ---
/**
 * @name formatISODuration
 * @category Common Helpers
 * @summary Format a duration object according as ISO 8601 duration string
 *
 * @description
 * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs//90001488-13/reference/r_iso_8601_duration_format.htm)
 *
 * @param duration - The duration to format
 *
 * @returns The ISO 8601 duration string
 *
 * @example
 * // Format the given duration as ISO 8601 string
 * const result = formatISODuration({
 *   years: 39,
 *   months: 2,
 *   days: 20,
 *   hours: 7,
 *   minutes: 5,
 *   seconds: 0
 * })
 * //=> 'P39Y2M20DT0H0M0S'
 */
export function formatISODuration(duration) {
  const {
    years = 0,
    months = 0,
    days = 0,
    hours = 0,
    minutes = 0,
    seconds = 0,
  } = duration;

  return `P${years}Y${months}M${days}DT${hours}H${minutes}M${seconds}S`;
}

// Fallback for modularized imports:
export default formatISODuration;

--- FILE: ./node_modules/date-fns/formatRFC3339.cjs ---
"use strict";
exports.formatRFC3339 = formatRFC3339;
var _index = require("./_lib/addLeadingZeros.cjs");
var _index2 = require("./isValid.cjs");
var _index3 = require("./toDate.cjs");

/**
 * The {@link formatRFC3339} function options.
 */

/**
 * @name formatRFC3339
 * @category Common Helpers
 * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).
 *
 * @description
 * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format:
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {
 *   fractionDigits: 3
 * })
 * //=> '2019-09-18T19:00:52.234Z'
 */
function formatRFC3339(date, options) {
  const date_ = (0, _index3.toDate)(date, options?.in);

  if (!(0, _index2.isValid)(date_)) {
    throw new RangeError("Invalid time value");
  }

  const fractionDigits = options?.fractionDigits ?? 0;

  const day = (0, _index.addLeadingZeros)(date_.getDate(), 2);
  const month = (0, _index.addLeadingZeros)(date_.getMonth() + 1, 2);
  const year = date_.getFullYear();

  const hour = (0, _index.addLeadingZeros)(date_.getHours(), 2);
  const minute = (0, _index.addLeadingZeros)(date_.getMinutes(), 2);
  const second = (0, _index.addLeadingZeros)(date_.getSeconds(), 2);

  let fractionalSecond = "";
  if (fractionDigits > 0) {
    const milliseconds = date_.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, fractionDigits - 3),
    );
    fractionalSecond =
      "." + (0, _index.addLeadingZeros)(fractionalSeconds, fractionDigits);
  }

  let offset = "";
  const tzOffset = date_.getTimezoneOffset();

  if (tzOffset !== 0) {
    const absoluteOffset = Math.abs(tzOffset);
    const hourOffset = (0, _index.addLeadingZeros)(
      Math.trunc(absoluteOffset / 60),
      2,
    );
    const minuteOffset = (0, _index.addLeadingZeros)(absoluteOffset % 60, 2);
    // If less than 0, the sign is +, because it is ahead of time.
    const sign = tzOffset < 0 ? "+" : "-";

    offset = `${sign}${hourOffset}:${minuteOffset}`;
  } else {
    offset = "Z";
  }

  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;
}

--- FILE: ./node_modules/date-fns/formatRFC3339.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link formatRFC3339} function options.
 */
export interface FormatRFC3339Options extends ContextOptions<Date> {
  /** The number of digits after the decimal point after seconds, defaults to 0 */
  fractionDigits?: 0 | 1 | 2 | 3;
}
/**
 * @name formatRFC3339
 * @category Common Helpers
 * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).
 *
 * @description
 * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format:
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {
 *   fractionDigits: 3
 * })
 * //=> '2019-09-18T19:00:52.234Z'
 */
export declare function formatRFC3339(
  date: DateArg<Date> & {},
  options?: FormatRFC3339Options,
): string;

--- FILE: ./node_modules/date-fns/formatRFC3339.js ---
import { addLeadingZeros } from "./_lib/addLeadingZeros.js";
import { isValid } from "./isValid.js";
import { toDate } from "./toDate.js";

/**
 * The {@link formatRFC3339} function options.
 */

/**
 * @name formatRFC3339
 * @category Common Helpers
 * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).
 *
 * @description
 * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format:
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {
 *   fractionDigits: 3
 * })
 * //=> '2019-09-18T19:00:52.234Z'
 */
export function formatRFC3339(date, options) {
  const date_ = toDate(date, options?.in);

  if (!isValid(date_)) {
    throw new RangeError("Invalid time value");
  }

  const fractionDigits = options?.fractionDigits ?? 0;

  const day = addLeadingZeros(date_.getDate(), 2);
  const month = addLeadingZeros(date_.getMonth() + 1, 2);
  const year = date_.getFullYear();

  const hour = addLeadingZeros(date_.getHours(), 2);
  const minute = addLeadingZeros(date_.getMinutes(), 2);
  const second = addLeadingZeros(date_.getSeconds(), 2);

  let fractionalSecond = "";
  if (fractionDigits > 0) {
    const milliseconds = date_.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, fractionDigits - 3),
    );
    fractionalSecond = "." + addLeadingZeros(fractionalSeconds, fractionDigits);
  }

  let offset = "";
  const tzOffset = date_.getTimezoneOffset();

  if (tzOffset !== 0) {
    const absoluteOffset = Math.abs(tzOffset);
    const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);
    const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);
    // If less than 0, the sign is +, because it is ahead of time.
    const sign = tzOffset < 0 ? "+" : "-";

    offset = `${sign}${hourOffset}:${minuteOffset}`;
  } else {
    offset = "Z";
  }

  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;
}

// Fallback for modularized imports:
export default formatRFC3339;

--- FILE: ./node_modules/date-fns/formatRFC7231.cjs ---
"use strict";
exports.formatRFC7231 = formatRFC7231;
var _index = require("./_lib/addLeadingZeros.cjs");
var _index2 = require("./isValid.cjs");
var _index3 = require("./toDate.cjs");

const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

const months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

/**
 * @name formatRFC7231
 * @category Common Helpers
 * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).
 *
 * @description
 * Return the formatted date string in RFC 7231 format.
 * The result will always be in UTC timezone.
 *
 * @param date - The original date
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 7231 format:
 * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))
 * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'
 */
function formatRFC7231(date) {
  const _date = (0, _index3.toDate)(date);

  if (!(0, _index2.isValid)(_date)) {
    throw new RangeError("Invalid time value");
  }

  const dayName = days[_date.getUTCDay()];
  const dayOfMonth = (0, _index.addLeadingZeros)(_date.getUTCDate(), 2);
  const monthName = months[_date.getUTCMonth()];
  const year = _date.getUTCFullYear();

  const hour = (0, _index.addLeadingZeros)(_date.getUTCHours(), 2);
  const minute = (0, _index.addLeadingZeros)(_date.getUTCMinutes(), 2);
  const second = (0, _index.addLeadingZeros)(_date.getUTCSeconds(), 2);

  // Result variables.
  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;
}

--- FILE: ./node_modules/date-fns/formatRFC7231.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name formatRFC7231
 * @category Common Helpers
 * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).
 *
 * @description
 * Return the formatted date string in RFC 7231 format.
 * The result will always be in UTC timezone.
 *
 * @param date - The original date
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 7231 format:
 * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))
 * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'
 */
export declare function formatRFC7231(date: DateArg<Date> & {}): string;

--- FILE: ./node_modules/date-fns/formatRFC7231.js ---
import { addLeadingZeros } from "./_lib/addLeadingZeros.js";
import { isValid } from "./isValid.js";
import { toDate } from "./toDate.js";

const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

const months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

/**
 * @name formatRFC7231
 * @category Common Helpers
 * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).
 *
 * @description
 * Return the formatted date string in RFC 7231 format.
 * The result will always be in UTC timezone.
 *
 * @param date - The original date
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 7231 format:
 * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))
 * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'
 */
export function formatRFC7231(date) {
  const _date = toDate(date);

  if (!isValid(_date)) {
    throw new RangeError("Invalid time value");
  }

  const dayName = days[_date.getUTCDay()];
  const dayOfMonth = addLeadingZeros(_date.getUTCDate(), 2);
  const monthName = months[_date.getUTCMonth()];
  const year = _date.getUTCFullYear();

  const hour = addLeadingZeros(_date.getUTCHours(), 2);
  const minute = addLeadingZeros(_date.getUTCMinutes(), 2);
  const second = addLeadingZeros(_date.getUTCSeconds(), 2);

  // Result variables.
  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;
}

// Fallback for modularized imports:
export default formatRFC7231;

--- FILE: ./node_modules/date-fns/formatRelative.cjs ---
"use strict";
exports.formatRelative = formatRelative;
var _index = require("./_lib/defaultLocale.cjs");
var _index2 = require("./_lib/defaultOptions.cjs");
var _index3 = require("./_lib/normalizeDates.cjs");
var _index4 = require("./differenceInCalendarDays.cjs");
var _index5 = require("./format.cjs");

/**
 * The {@link formatRelative} function options.
 */

/**
 * @name formatRelative
 * @category Common Helpers
 * @summary Represent the date in words relative to the given base date.
 *
 * @description
 * Represent the date in words relative to the given base date.
 *
 * | Distance to the base date | Result                    |
 * |---------------------------|---------------------------|
 * | Previous 6 days           | last Sunday at 04:30 AM   |
 * | Last day                  | yesterday at 04:30 AM     |
 * | Same day                  | today at 04:30 AM         |
 * | Next day                  | tomorrow at 04:30 AM      |
 * | Next 6 days               | Sunday at 04:30 AM        |
 * | Other                     | 12/31/2017                |
 *
 * @param date - The date to format
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The date in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws `options.locale` must contain `formatRelative` property
 *
 * @example
 * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday
 * const result = formatRelative(subDays(new Date(), 6), new Date())
 * //=> "last Thursday at 12:45 AM"
 */
function formatRelative(date, baseDate, options) {
  const [date_, baseDate_] = (0, _index3.normalizeDates)(
    options?.in,
    date,
    baseDate,
  );

  const defaultOptions = (0, _index2.getDefaultOptions)();
  const locale =
    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const diff = (0, _index4.differenceInCalendarDays)(date_, baseDate_);

  if (isNaN(diff)) {
    throw new RangeError("Invalid time value");
  }

  let token;
  if (diff < -6) {
    token = "other";
  } else if (diff < -1) {
    token = "lastWeek";
  } else if (diff < 0) {
    token = "yesterday";
  } else if (diff < 1) {
    token = "today";
  } else if (diff < 2) {
    token = "tomorrow";
  } else if (diff < 7) {
    token = "nextWeek";
  } else {
    token = "other";
  }

  const formatStr = locale.formatRelative(token, date_, baseDate_, {
    locale,
    weekStartsOn,
  });
  return (0, _index5.format)(date_, formatStr, { locale, weekStartsOn });
}

--- FILE: ./node_modules/date-fns/formatRelative.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link formatRelative} function options.
 */
export interface FormatRelativeOptions
  extends LocalizedOptions<
      "options" | "localize" | "formatLong" | "formatRelative"
    >,
    WeekOptions,
    ContextOptions<Date> {}
/**
 * @name formatRelative
 * @category Common Helpers
 * @summary Represent the date in words relative to the given base date.
 *
 * @description
 * Represent the date in words relative to the given base date.
 *
 * | Distance to the base date | Result                    |
 * |---------------------------|---------------------------|
 * | Previous 6 days           | last Sunday at 04:30 AM   |
 * | Last day                  | yesterday at 04:30 AM     |
 * | Same day                  | today at 04:30 AM         |
 * | Next day                  | tomorrow at 04:30 AM      |
 * | Next 6 days               | Sunday at 04:30 AM        |
 * | Other                     | 12/31/2017                |
 *
 * @param date - The date to format
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The date in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws `options.locale` must contain `formatRelative` property
 *
 * @example
 * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday
 * const result = formatRelative(subDays(new Date(), 6), new Date())
 * //=> "last Thursday at 12:45 AM"
 */
export declare function formatRelative(
  date: DateArg<Date> & {},
  baseDate: DateArg<Date> & {},
  options?: FormatRelativeOptions,
): string;

--- FILE: ./node_modules/date-fns/formatRelative.js ---
import { defaultLocale } from "./_lib/defaultLocale.js";
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { normalizeDates } from "./_lib/normalizeDates.js";
import { differenceInCalendarDays } from "./differenceInCalendarDays.js";
import { format } from "./format.js";

/**
 * The {@link formatRelative} function options.
 */

/**
 * @name formatRelative
 * @category Common Helpers
 * @summary Represent the date in words relative to the given base date.
 *
 * @description
 * Represent the date in words relative to the given base date.
 *
 * | Distance to the base date | Result                    |
 * |---------------------------|---------------------------|
 * | Previous 6 days           | last Sunday at 04:30 AM   |
 * | Last day                  | yesterday at 04:30 AM     |
 * | Same day                  | today at 04:30 AM         |
 * | Next day                  | tomorrow at 04:30 AM      |
 * | Next 6 days               | Sunday at 04:30 AM        |
 * | Other                     | 12/31/2017                |
 *
 * @param date - The date to format
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The date in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws `options.locale` must contain `formatRelative` property
 *
 * @example
 * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday
 * const result = formatRelative(subDays(new Date(), 6), new Date())
 * //=> "last Thursday at 12:45 AM"
 */
export function formatRelative(date, baseDate, options) {
  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);

  const defaultOptions = getDefaultOptions();
  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const diff = differenceInCalendarDays(date_, baseDate_);

  if (isNaN(diff)) {
    throw new RangeError("Invalid time value");
  }

  let token;
  if (diff < -6) {
    token = "other";
  } else if (diff < -1) {
    token = "lastWeek";
  } else if (diff < 0) {
    token = "yesterday";
  } else if (diff < 1) {
    token = "today";
  } else if (diff < 2) {
    token = "tomorrow";
  } else if (diff < 7) {
    token = "nextWeek";
  } else {
    token = "other";
  }

  const formatStr = locale.formatRelative(token, date_, baseDate_, {
    locale,
    weekStartsOn,
  });
  return format(date_, formatStr, { locale, weekStartsOn });
}

// Fallback for modularized imports:
export default formatRelative;

--- FILE: ./node_modules/date-fns/fp.cjs ---
"use strict";

var _index = require("./fp/add.cjs");
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    },
  });
});
var _index2 = require("./fp/addBusinessDays.cjs");
Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    },
  });
});
var _index3 = require("./fp/addBusinessDaysWithOptions.cjs");
Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    },
  });
});
var _index4 = require("./fp/addDays.cjs");
Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    },
  });
});
var _index5 = require("./fp/addDaysWithOptions.cjs");
Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    },
  });
});
var _index6 = require("./fp/addHours.cjs");
Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    },
  });
});
var _index7 = require("./fp/addHoursWithOptions.cjs");
Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    },
  });
});
var _index8 = require("./fp/addISOWeekYears.cjs");
Object.keys(_index8).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index8[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index8[key];
    },
  });
});
var _index9 = require("./fp/addISOWeekYearsWithOptions.cjs");
Object.keys(_index9).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index9[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index9[key];
    },
  });
});
var _index10 = require("./fp/addMilliseconds.cjs");
Object.keys(_index10).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index10[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index10[key];
    },
  });
});
var _index11 = require("./fp/addMillisecondsWithOptions.cjs");
Object.keys(_index11).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index11[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index11[key];
    },
  });
});
var _index12 = require("./fp/addMinutes.cjs");
Object.keys(_index12).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index12[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index12[key];
    },
  });
});
var _index13 = require("./fp/addMinutesWithOptions.cjs");
Object.keys(_index13).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index13[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index13[key];
    },
  });
});
var _index14 = require("./fp/addMonths.cjs");
Object.keys(_index14).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index14[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index14[key];
    },
  });
});
var _index15 = require("./fp/addMonthsWithOptions.cjs");
Object.keys(_index15).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index15[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index15[key];
    },
  });
});
var _index16 = require("./fp/addQuarters.cjs");
Object.keys(_index16).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index16[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index16[key];
    },
  });
});
var _index17 = require("./fp/addQuartersWithOptions.cjs");
Object.keys(_index17).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index17[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index17[key];
    },
  });
});
var _index18 = require("./fp/addSeconds.cjs");
Object.keys(_index18).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index18[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index18[key];
    },
  });
});
var _index19 = require("./fp/addSecondsWithOptions.cjs");
Object.keys(_index19).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index19[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index19[key];
    },
  });
});
var _index20 = require("./fp/addWeeks.cjs");
Object.keys(_index20).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index20[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index20[key];
    },
  });
});
var _index21 = require("./fp/addWeeksWithOptions.cjs");
Object.keys(_index21).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index21[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index21[key];
    },
  });
});
var _index22 = require("./fp/addWithOptions.cjs");
Object.keys(_index22).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index22[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index22[key];
    },
  });
});
var _index23 = require("./fp/addYears.cjs");
Object.keys(_index23).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index23[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index23[key];
    },
  });
});
var _index24 = require("./fp/addYearsWithOptions.cjs");
Object.keys(_index24).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index24[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index24[key];
    },
  });
});
var _index25 = require("./fp/areIntervalsOverlapping.cjs");
Object.keys(_index25).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index25[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index25[key];
    },
  });
});
var _index26 = require("./fp/areIntervalsOverlappingWithOptions.cjs");
Object.keys(_index26).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index26[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index26[key];
    },
  });
});
var _index27 = require("./fp/clamp.cjs");
Object.keys(_index27).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index27[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index27[key];
    },
  });
});
var _index28 = require("./fp/clampWithOptions.cjs");
Object.keys(_index28).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index28[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index28[key];
    },
  });
});
var _index29 = require("./fp/closestIndexTo.cjs");
Object.keys(_index29).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index29[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index29[key];
    },
  });
});
var _index30 = require("./fp/closestTo.cjs");
Object.keys(_index30).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index30[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index30[key];
    },
  });
});
var _index31 = require("./fp/closestToWithOptions.cjs");
Object.keys(_index31).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index31[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index31[key];
    },
  });
});
var _index32 = require("./fp/compareAsc.cjs");
Object.keys(_index32).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index32[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index32[key];
    },
  });
});
var _index33 = require("./fp/compareDesc.cjs");
Object.keys(_index33).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index33[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index33[key];
    },
  });
});
var _index34 = require("./fp/constructFrom.cjs");
Object.keys(_index34).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index34[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index34[key];
    },
  });
});
var _index35 = require("./fp/daysToWeeks.cjs");
Object.keys(_index35).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index35[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index35[key];
    },
  });
});
var _index36 = require("./fp/differenceInBusinessDays.cjs");
Object.keys(_index36).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index36[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index36[key];
    },
  });
});
var _index37 = require("./fp/differenceInBusinessDaysWithOptions.cjs");
Object.keys(_index37).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index37[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index37[key];
    },
  });
});
var _index38 = require("./fp/differenceInCalendarDays.cjs");
Object.keys(_index38).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index38[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index38[key];
    },
  });
});
var _index39 = require("./fp/differenceInCalendarDaysWithOptions.cjs");
Object.keys(_index39).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index39[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index39[key];
    },
  });
});
var _index40 = require("./fp/differenceInCalendarISOWeekYears.cjs");
Object.keys(_index40).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index40[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index40[key];
    },
  });
});
var _index41 = require("./fp/differenceInCalendarISOWeekYearsWithOptions.cjs");
Object.keys(_index41).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index41[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index41[key];
    },
  });
});
var _index42 = require("./fp/differenceInCalendarISOWeeks.cjs");
Object.keys(_index42).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index42[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index42[key];
    },
  });
});
var _index43 = require("./fp/differenceInCalendarISOWeeksWithOptions.cjs");
Object.keys(_index43).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index43[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index43[key];
    },
  });
});
var _index44 = require("./fp/differenceInCalendarMonths.cjs");
Object.keys(_index44).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index44[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index44[key];
    },
  });
});
var _index45 = require("./fp/differenceInCalendarMonthsWithOptions.cjs");
Object.keys(_index45).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index45[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index45[key];
    },
  });
});
var _index46 = require("./fp/differenceInCalendarQuarters.cjs");
Object.keys(_index46).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index46[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index46[key];
    },
  });
});
var _index47 = require("./fp/differenceInCalendarQuartersWithOptions.cjs");
Object.keys(_index47).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index47[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index47[key];
    },
  });
});
var _index48 = require("./fp/differenceInCalendarWeeks.cjs");
Object.keys(_index48).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index48[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index48[key];
    },
  });
});
var _index49 = require("./fp/differenceInCalendarWeeksWithOptions.cjs");
Object.keys(_index49).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index49[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index49[key];
    },
  });
});
var _index50 = require("./fp/differenceInCalendarYears.cjs");
Object.keys(_index50).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index50[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index50[key];
    },
  });
});
var _index51 = require("./fp/differenceInCalendarYearsWithOptions.cjs");
Object.keys(_index51).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index51[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index51[key];
    },
  });
});
var _index52 = require("./fp/differenceInDays.cjs");
Object.keys(_index52).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index52[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index52[key];
    },
  });
});
var _index53 = require("./fp/differenceInDaysWithOptions.cjs");
Object.keys(_index53).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index53[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index53[key];
    },
  });
});
var _index54 = require("./fp/differenceInHours.cjs");
Object.keys(_index54).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index54[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index54[key];
    },
  });
});
var _index55 = require("./fp/differenceInHoursWithOptions.cjs");
Object.keys(_index55).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index55[key]) return;

--- FILE: ./node_modules/date-fns/fp.d.ts ---
export * from "./fp/add.js";
export * from "./fp/addBusinessDays.js";
export * from "./fp/addBusinessDaysWithOptions.js";
export * from "./fp/addDays.js";
export * from "./fp/addDaysWithOptions.js";
export * from "./fp/addHours.js";
export * from "./fp/addHoursWithOptions.js";
export * from "./fp/addISOWeekYears.js";
export * from "./fp/addISOWeekYearsWithOptions.js";
export * from "./fp/addMilliseconds.js";
export * from "./fp/addMillisecondsWithOptions.js";
export * from "./fp/addMinutes.js";
export * from "./fp/addMinutesWithOptions.js";
export * from "./fp/addMonths.js";
export * from "./fp/addMonthsWithOptions.js";
export * from "./fp/addQuarters.js";
export * from "./fp/addQuartersWithOptions.js";
export * from "./fp/addSeconds.js";
export * from "./fp/addSecondsWithOptions.js";
export * from "./fp/addWeeks.js";
export * from "./fp/addWeeksWithOptions.js";
export * from "./fp/addWithOptions.js";
export * from "./fp/addYears.js";
export * from "./fp/addYearsWithOptions.js";
export * from "./fp/areIntervalsOverlapping.js";
export * from "./fp/areIntervalsOverlappingWithOptions.js";
export * from "./fp/clamp.js";
export * from "./fp/clampWithOptions.js";
export * from "./fp/closestIndexTo.js";
export * from "./fp/closestTo.js";
export * from "./fp/closestToWithOptions.js";
export * from "./fp/compareAsc.js";
export * from "./fp/compareDesc.js";
export * from "./fp/constructFrom.js";
export * from "./fp/daysToWeeks.js";
export * from "./fp/differenceInBusinessDays.js";
export * from "./fp/differenceInBusinessDaysWithOptions.js";
export * from "./fp/differenceInCalendarDays.js";
export * from "./fp/differenceInCalendarDaysWithOptions.js";
export * from "./fp/differenceInCalendarISOWeekYears.js";
export * from "./fp/differenceInCalendarISOWeekYearsWithOptions.js";
export * from "./fp/differenceInCalendarISOWeeks.js";
export * from "./fp/differenceInCalendarISOWeeksWithOptions.js";
export * from "./fp/differenceInCalendarMonths.js";
export * from "./fp/differenceInCalendarMonthsWithOptions.js";
export * from "./fp/differenceInCalendarQuarters.js";
export * from "./fp/differenceInCalendarQuartersWithOptions.js";
export * from "./fp/differenceInCalendarWeeks.js";
export * from "./fp/differenceInCalendarWeeksWithOptions.js";
export * from "./fp/differenceInCalendarYears.js";
export * from "./fp/differenceInCalendarYearsWithOptions.js";
export * from "./fp/differenceInDays.js";
export * from "./fp/differenceInDaysWithOptions.js";
export * from "./fp/differenceInHours.js";
export * from "./fp/differenceInHoursWithOptions.js";
export * from "./fp/differenceInISOWeekYears.js";
export * from "./fp/differenceInISOWeekYearsWithOptions.js";
export * from "./fp/differenceInMilliseconds.js";
export * from "./fp/differenceInMinutes.js";
export * from "./fp/differenceInMinutesWithOptions.js";
export * from "./fp/differenceInMonths.js";
export * from "./fp/differenceInMonthsWithOptions.js";
export * from "./fp/differenceInQuarters.js";
export * from "./fp/differenceInQuartersWithOptions.js";
export * from "./fp/differenceInSeconds.js";
export * from "./fp/differenceInSecondsWithOptions.js";
export * from "./fp/differenceInWeeks.js";
export * from "./fp/differenceInWeeksWithOptions.js";
export * from "./fp/differenceInYears.js";
export * from "./fp/differenceInYearsWithOptions.js";
export * from "./fp/eachDayOfInterval.js";
export * from "./fp/eachDayOfIntervalWithOptions.js";
export * from "./fp/eachHourOfInterval.js";
export * from "./fp/eachHourOfIntervalWithOptions.js";
export * from "./fp/eachMinuteOfInterval.js";
export * from "./fp/eachMinuteOfIntervalWithOptions.js";
export * from "./fp/eachMonthOfInterval.js";
export * from "./fp/eachMonthOfIntervalWithOptions.js";
export * from "./fp/eachQuarterOfInterval.js";
export * from "./fp/eachQuarterOfIntervalWithOptions.js";
export * from "./fp/eachWeekOfInterval.js";
export * from "./fp/eachWeekOfIntervalWithOptions.js";
export * from "./fp/eachWeekendOfInterval.js";
export * from "./fp/eachWeekendOfIntervalWithOptions.js";
export * from "./fp/eachWeekendOfMonth.js";
export * from "./fp/eachWeekendOfMonthWithOptions.js";
export * from "./fp/eachWeekendOfYear.js";
export * from "./fp/eachWeekendOfYearWithOptions.js";
export * from "./fp/eachYearOfInterval.js";
export * from "./fp/eachYearOfIntervalWithOptions.js";
export * from "./fp/endOfDay.js";
export * from "./fp/endOfDayWithOptions.js";
export * from "./fp/endOfDecade.js";
export * from "./fp/endOfDecadeWithOptions.js";
export * from "./fp/endOfHour.js";
export * from "./fp/endOfHourWithOptions.js";
export * from "./fp/endOfISOWeek.js";
export * from "./fp/endOfISOWeekWithOptions.js";
export * from "./fp/endOfISOWeekYear.js";
export * from "./fp/endOfISOWeekYearWithOptions.js";
export * from "./fp/endOfMinute.js";
export * from "./fp/endOfMinuteWithOptions.js";
export * from "./fp/endOfMonth.js";
export * from "./fp/endOfMonthWithOptions.js";
export * from "./fp/endOfQuarter.js";
export * from "./fp/endOfQuarterWithOptions.js";
export * from "./fp/endOfSecond.js";
export * from "./fp/endOfSecondWithOptions.js";
export * from "./fp/endOfWeek.js";
export * from "./fp/endOfWeekWithOptions.js";
export * from "./fp/endOfYear.js";
export * from "./fp/endOfYearWithOptions.js";
export * from "./fp/format.js";
export * from "./fp/formatDistance.js";
export * from "./fp/formatDistanceStrict.js";
export * from "./fp/formatDistanceStrictWithOptions.js";
export * from "./fp/formatDistanceWithOptions.js";
export * from "./fp/formatDuration.js";
export * from "./fp/formatDurationWithOptions.js";
export * from "./fp/formatISO.js";
export * from "./fp/formatISO9075.js";
export * from "./fp/formatISO9075WithOptions.js";
export * from "./fp/formatISODuration.js";
export * from "./fp/formatISOWithOptions.js";
export * from "./fp/formatRFC3339.js";
export * from "./fp/formatRFC3339WithOptions.js";
export * from "./fp/formatRFC7231.js";
export * from "./fp/formatRelative.js";
export * from "./fp/formatRelativeWithOptions.js";
export * from "./fp/formatWithOptions.js";
export * from "./fp/fromUnixTime.js";
export * from "./fp/fromUnixTimeWithOptions.js";
export * from "./fp/getDate.js";
export * from "./fp/getDateWithOptions.js";
export * from "./fp/getDay.js";
export * from "./fp/getDayOfYear.js";
export * from "./fp/getDayOfYearWithOptions.js";
export * from "./fp/getDayWithOptions.js";
export * from "./fp/getDaysInMonth.js";
export * from "./fp/getDaysInMonthWithOptions.js";
export * from "./fp/getDaysInYear.js";
export * from "./fp/getDaysInYearWithOptions.js";
export * from "./fp/getDecade.js";
export * from "./fp/getDecadeWithOptions.js";
export * from "./fp/getHours.js";
export * from "./fp/getHoursWithOptions.js";
export * from "./fp/getISODay.js";
export * from "./fp/getISODayWithOptions.js";
export * from "./fp/getISOWeek.js";
export * from "./fp/getISOWeekWithOptions.js";
export * from "./fp/getISOWeekYear.js";
export * from "./fp/getISOWeekYearWithOptions.js";
export * from "./fp/getISOWeeksInYear.js";
export * from "./fp/getISOWeeksInYearWithOptions.js";
export * from "./fp/getMilliseconds.js";
export * from "./fp/getMinutes.js";
export * from "./fp/getMinutesWithOptions.js";
export * from "./fp/getMonth.js";
export * from "./fp/getMonthWithOptions.js";
export * from "./fp/getOverlappingDaysInIntervals.js";
export * from "./fp/getQuarter.js";
export * from "./fp/getQuarterWithOptions.js";
export * from "./fp/getSeconds.js";
export * from "./fp/getTime.js";
export * from "./fp/getUnixTime.js";
export * from "./fp/getWeek.js";
export * from "./fp/getWeekOfMonth.js";
export * from "./fp/getWeekOfMonthWithOptions.js";
export * from "./fp/getWeekWithOptions.js";
export * from "./fp/getWeekYear.js";
export * from "./fp/getWeekYearWithOptions.js";
export * from "./fp/getWeeksInMonth.js";
export * from "./fp/getWeeksInMonthWithOptions.js";
export * from "./fp/getYear.js";
export * from "./fp/getYearWithOptions.js";
export * from "./fp/hoursToMilliseconds.js";
export * from "./fp/hoursToMinutes.js";
export * from "./fp/hoursToSeconds.js";
export * from "./fp/interval.js";
export * from "./fp/intervalToDuration.js";
export * from "./fp/intervalToDurationWithOptions.js";
export * from "./fp/intervalWithOptions.js";
export * from "./fp/intlFormat.js";
export * from "./fp/intlFormatDistance.js";
export * from "./fp/intlFormatDistanceWithOptions.js";
export * from "./fp/isAfter.js";
export * from "./fp/isBefore.js";
export * from "./fp/isDate.js";
export * from "./fp/isEqual.js";
export * from "./fp/isExists.js";
export * from "./fp/isFirstDayOfMonth.js";
export * from "./fp/isFirstDayOfMonthWithOptions.js";
export * from "./fp/isFriday.js";
export * from "./fp/isFridayWithOptions.js";
export * from "./fp/isLastDayOfMonth.js";
export * from "./fp/isLastDayOfMonthWithOptions.js";
export * from "./fp/isLeapYear.js";
export * from "./fp/isLeapYearWithOptions.js";
export * from "./fp/isMatch.js";
export * from "./fp/isMatchWithOptions.js";
export * from "./fp/isMonday.js";
export * from "./fp/isMondayWithOptions.js";
export * from "./fp/isSameDay.js";
export * from "./fp/isSameDayWithOptions.js";
export * from "./fp/isSameHour.js";
export * from "./fp/isSameHourWithOptions.js";
export * from "./fp/isSameISOWeek.js";
export * from "./fp/isSameISOWeekWithOptions.js";
export * from "./fp/isSameISOWeekYear.js";
export * from "./fp/isSameISOWeekYearWithOptions.js";
export * from "./fp/isSameMinute.js";
export * from "./fp/isSameMonth.js";
export * from "./fp/isSameMonthWithOptions.js";
export * from "./fp/isSameQuarter.js";
export * from "./fp/isSameQuarterWithOptions.js";
export * from "./fp/isSameSecond.js";
export * from "./fp/isSameWeek.js";
export * from "./fp/isSameWeekWithOptions.js";
export * from "./fp/isSameYear.js";
export * from "./fp/isSameYearWithOptions.js";
export * from "./fp/isSaturday.js";
export * from "./fp/isSaturdayWithOptions.js";
export * from "./fp/isSunday.js";
export * from "./fp/isSundayWithOptions.js";
export * from "./fp/isThursday.js";
export * from "./fp/isThursdayWithOptions.js";
export * from "./fp/isTuesday.js";
export * from "./fp/isTuesdayWithOptions.js";
export * from "./fp/isValid.js";
export * from "./fp/isWednesday.js";
export * from "./fp/isWednesdayWithOptions.js";
export * from "./fp/isWeekend.js";
export * from "./fp/isWeekendWithOptions.js";
export * from "./fp/isWithinInterval.js";
export * from "./fp/isWithinIntervalWithOptions.js";
export * from "./fp/lastDayOfDecade.js";
export * from "./fp/lastDayOfDecadeWithOptions.js";
export * from "./fp/lastDayOfISOWeek.js";
export * from "./fp/lastDayOfISOWeekWithOptions.js";
export * from "./fp/lastDayOfISOWeekYear.js";
export * from "./fp/lastDayOfISOWeekYearWithOptions.js";
export * from "./fp/lastDayOfMonth.js";
export * from "./fp/lastDayOfMonthWithOptions.js";
export * from "./fp/lastDayOfQuarter.js";
export * from "./fp/lastDayOfQuarterWithOptions.js";
export * from "./fp/lastDayOfWeek.js";
export * from "./fp/lastDayOfWeekWithOptions.js";
export * from "./fp/lastDayOfYear.js";
export * from "./fp/lastDayOfYearWithOptions.js";
export * from "./fp/lightFormat.js";
export * from "./fp/max.js";
export * from "./fp/maxWithOptions.js";
export * from "./fp/milliseconds.js";
export * from "./fp/millisecondsToHours.js";
export * from "./fp/millisecondsToMinutes.js";
export * from "./fp/millisecondsToSeconds.js";
export * from "./fp/min.js";
export * from "./fp/minWithOptions.js";
export * from "./fp/minutesToHours.js";
export * from "./fp/minutesToMilliseconds.js";
export * from "./fp/minutesToSeconds.js";
export * from "./fp/monthsToQuarters.js";
export * from "./fp/monthsToYears.js";
export * from "./fp/nextDay.js";
export * from "./fp/nextDayWithOptions.js";
export * from "./fp/nextFriday.js";
export * from "./fp/nextFridayWithOptions.js";
export * from "./fp/nextMonday.js";
export * from "./fp/nextMondayWithOptions.js";
export * from "./fp/nextSaturday.js";
export * from "./fp/nextSaturdayWithOptions.js";
export * from "./fp/nextSunday.js";
export * from "./fp/nextSundayWithOptions.js";
export * from "./fp/nextThursday.js";
export * from "./fp/nextThursdayWithOptions.js";
export * from "./fp/nextTuesday.js";
export * from "./fp/nextTuesdayWithOptions.js";
export * from "./fp/nextWednesday.js";
export * from "./fp/nextWednesdayWithOptions.js";
export * from "./fp/parse.js";
export * from "./fp/parseISO.js";
export * from "./fp/parseISOWithOptions.js";
export * from "./fp/parseJSON.js";
export * from "./fp/parseJSONWithOptions.js";
export * from "./fp/parseWithOptions.js";
export * from "./fp/previousDay.js";
export * from "./fp/previousDayWithOptions.js";
export * from "./fp/previousFriday.js";
export * from "./fp/previousFridayWithOptions.js";
export * from "./fp/previousMonday.js";
export * from "./fp/previousMondayWithOptions.js";
export * from "./fp/previousSaturday.js";
export * from "./fp/previousSaturdayWithOptions.js";
export * from "./fp/previousSunday.js";
export * from "./fp/previousSundayWithOptions.js";
export * from "./fp/previousThursday.js";
export * from "./fp/previousThursdayWithOptions.js";
export * from "./fp/previousTuesday.js";
export * from "./fp/previousTuesdayWithOptions.js";
export * from "./fp/previousWednesday.js";
export * from "./fp/previousWednesdayWithOptions.js";
export * from "./fp/quartersToMonths.js";
export * from "./fp/quartersToYears.js";
export * from "./fp/roundToNearestHours.js";
export * from "./fp/roundToNearestHoursWithOptions.js";
export * from "./fp/roundToNearestMinutes.js";
export * from "./fp/roundToNearestMinutesWithOptions.js";
export * from "./fp/secondsToHours.js";
export * from "./fp/secondsToMilliseconds.js";
export * from "./fp/secondsToMinutes.js";
export * from "./fp/set.js";
export * from "./fp/setDate.js";
export * from "./fp/setDateWithOptions.js";
export * from "./fp/setDay.js";
export * from "./fp/setDayOfYear.js";
export * from "./fp/setDayOfYearWithOptions.js";
export * from "./fp/setDayWithOptions.js";
export * from "./fp/setHours.js";
export * from "./fp/setHoursWithOptions.js";
export * from "./fp/setISODay.js";
export * from "./fp/setISODayWithOptions.js";
export * from "./fp/setISOWeek.js";
export * from "./fp/setISOWeekWithOptions.js";
export * from "./fp/setISOWeekYear.js";
export * from "./fp/setISOWeekYearWithOptions.js";
export * from "./fp/setMilliseconds.js";
export * from "./fp/setMillisecondsWithOptions.js";
export * from "./fp/setMinutes.js";
export * from "./fp/setMinutesWithOptions.js";
export * from "./fp/setMonth.js";
export * from "./fp/setMonthWithOptions.js";
export * from "./fp/setQuarter.js";
export * from "./fp/setQuarterWithOptions.js";
export * from "./fp/setSeconds.js";
export * from "./fp/setSecondsWithOptions.js";
export * from "./fp/setWeek.js";
export * from "./fp/setWeekWithOptions.js";
export * from "./fp/setWeekYear.js";
export * from "./fp/setWeekYearWithOptions.js";
export * from "./fp/setWithOptions.js";
export * from "./fp/setYear.js";
export * from "./fp/setYearWithOptions.js";
export * from "./fp/startOfDay.js";
export * from "./fp/startOfDayWithOptions.js";
export * from "./fp/startOfDecade.js";
export * from "./fp/startOfDecadeWithOptions.js";
export * from "./fp/startOfHour.js";
export * from "./fp/startOfHourWithOptions.js";
export * from "./fp/startOfISOWeek.js";
export * from "./fp/startOfISOWeekWithOptions.js";
export * from "./fp/startOfISOWeekYear.js";
export * from "./fp/startOfISOWeekYearWithOptions.js";
export * from "./fp/startOfMinute.js";
export * from "./fp/startOfMinuteWithOptions.js";
export * from "./fp/startOfMonth.js";
export * from "./fp/startOfMonthWithOptions.js";
export * from "./fp/startOfQuarter.js";
export * from "./fp/startOfQuarterWithOptions.js";
export * from "./fp/startOfSecond.js";
export * from "./fp/startOfSecondWithOptions.js";
export * from "./fp/startOfWeek.js";
export * from "./fp/startOfWeekWithOptions.js";
export * from "./fp/startOfWeekYear.js";
export * from "./fp/startOfWeekYearWithOptions.js";
export * from "./fp/startOfYear.js";
export * from "./fp/startOfYearWithOptions.js";
export * from "./fp/sub.js";
export * from "./fp/subBusinessDays.js";
export * from "./fp/subBusinessDaysWithOptions.js";
export * from "./fp/subDays.js";
export * from "./fp/subDaysWithOptions.js";
export * from "./fp/subHours.js";
export * from "./fp/subHoursWithOptions.js";
export * from "./fp/subISOWeekYears.js";
export * from "./fp/subISOWeekYearsWithOptions.js";
export * from "./fp/subMilliseconds.js";
export * from "./fp/subMillisecondsWithOptions.js";
export * from "./fp/subMinutes.js";
export * from "./fp/subMinutesWithOptions.js";
export * from "./fp/subMonths.js";
export * from "./fp/subMonthsWithOptions.js";
export * from "./fp/subQuarters.js";
export * from "./fp/subQuartersWithOptions.js";
export * from "./fp/subSeconds.js";
export * from "./fp/subSecondsWithOptions.js";
export * from "./fp/subWeeks.js";
export * from "./fp/subWeeksWithOptions.js";
export * from "./fp/subWithOptions.js";
export * from "./fp/subYears.js";
export * from "./fp/subYearsWithOptions.js";
export * from "./fp/toDate.js";
export * from "./fp/transpose.js";
export * from "./fp/weeksToDays.js";
export * from "./fp/yearsToDays.js";
export * from "./fp/yearsToMonths.js";
export * from "./fp/yearsToQuarters.js";
export type * from "./types.js";

--- FILE: ./node_modules/date-fns/fp.js ---
// This file is generated automatically by `scripts/build/indices.ts`. Please, don't change it.

export * from "./fp/add.js";
export * from "./fp/addBusinessDays.js";
export * from "./fp/addBusinessDaysWithOptions.js";
export * from "./fp/addDays.js";
export * from "./fp/addDaysWithOptions.js";
export * from "./fp/addHours.js";
export * from "./fp/addHoursWithOptions.js";
export * from "./fp/addISOWeekYears.js";
export * from "./fp/addISOWeekYearsWithOptions.js";
export * from "./fp/addMilliseconds.js";
export * from "./fp/addMillisecondsWithOptions.js";
export * from "./fp/addMinutes.js";
export * from "./fp/addMinutesWithOptions.js";
export * from "./fp/addMonths.js";
export * from "./fp/addMonthsWithOptions.js";
export * from "./fp/addQuarters.js";
export * from "./fp/addQuartersWithOptions.js";
export * from "./fp/addSeconds.js";
export * from "./fp/addSecondsWithOptions.js";
export * from "./fp/addWeeks.js";
export * from "./fp/addWeeksWithOptions.js";
export * from "./fp/addWithOptions.js";
export * from "./fp/addYears.js";
export * from "./fp/addYearsWithOptions.js";
export * from "./fp/areIntervalsOverlapping.js";
export * from "./fp/areIntervalsOverlappingWithOptions.js";
export * from "./fp/clamp.js";
export * from "./fp/clampWithOptions.js";
export * from "./fp/closestIndexTo.js";
export * from "./fp/closestTo.js";
export * from "./fp/closestToWithOptions.js";
export * from "./fp/compareAsc.js";
export * from "./fp/compareDesc.js";
export * from "./fp/constructFrom.js";
export * from "./fp/daysToWeeks.js";
export * from "./fp/differenceInBusinessDays.js";
export * from "./fp/differenceInBusinessDaysWithOptions.js";
export * from "./fp/differenceInCalendarDays.js";
export * from "./fp/differenceInCalendarDaysWithOptions.js";
export * from "./fp/differenceInCalendarISOWeekYears.js";
export * from "./fp/differenceInCalendarISOWeekYearsWithOptions.js";
export * from "./fp/differenceInCalendarISOWeeks.js";
export * from "./fp/differenceInCalendarISOWeeksWithOptions.js";
export * from "./fp/differenceInCalendarMonths.js";
export * from "./fp/differenceInCalendarMonthsWithOptions.js";
export * from "./fp/differenceInCalendarQuarters.js";
export * from "./fp/differenceInCalendarQuartersWithOptions.js";
export * from "./fp/differenceInCalendarWeeks.js";
export * from "./fp/differenceInCalendarWeeksWithOptions.js";
export * from "./fp/differenceInCalendarYears.js";
export * from "./fp/differenceInCalendarYearsWithOptions.js";
export * from "./fp/differenceInDays.js";
export * from "./fp/differenceInDaysWithOptions.js";
export * from "./fp/differenceInHours.js";
export * from "./fp/differenceInHoursWithOptions.js";
export * from "./fp/differenceInISOWeekYears.js";
export * from "./fp/differenceInISOWeekYearsWithOptions.js";
export * from "./fp/differenceInMilliseconds.js";
export * from "./fp/differenceInMinutes.js";
export * from "./fp/differenceInMinutesWithOptions.js";
export * from "./fp/differenceInMonths.js";
export * from "./fp/differenceInMonthsWithOptions.js";
export * from "./fp/differenceInQuarters.js";
export * from "./fp/differenceInQuartersWithOptions.js";
export * from "./fp/differenceInSeconds.js";
export * from "./fp/differenceInSecondsWithOptions.js";
export * from "./fp/differenceInWeeks.js";
export * from "./fp/differenceInWeeksWithOptions.js";
export * from "./fp/differenceInYears.js";
export * from "./fp/differenceInYearsWithOptions.js";
export * from "./fp/eachDayOfInterval.js";
export * from "./fp/eachDayOfIntervalWithOptions.js";
export * from "./fp/eachHourOfInterval.js";
export * from "./fp/eachHourOfIntervalWithOptions.js";
export * from "./fp/eachMinuteOfInterval.js";
export * from "./fp/eachMinuteOfIntervalWithOptions.js";
export * from "./fp/eachMonthOfInterval.js";
export * from "./fp/eachMonthOfIntervalWithOptions.js";
export * from "./fp/eachQuarterOfInterval.js";
export * from "./fp/eachQuarterOfIntervalWithOptions.js";
export * from "./fp/eachWeekOfInterval.js";
export * from "./fp/eachWeekOfIntervalWithOptions.js";
export * from "./fp/eachWeekendOfInterval.js";
export * from "./fp/eachWeekendOfIntervalWithOptions.js";
export * from "./fp/eachWeekendOfMonth.js";
export * from "./fp/eachWeekendOfMonthWithOptions.js";
export * from "./fp/eachWeekendOfYear.js";
export * from "./fp/eachWeekendOfYearWithOptions.js";
export * from "./fp/eachYearOfInterval.js";
export * from "./fp/eachYearOfIntervalWithOptions.js";
export * from "./fp/endOfDay.js";
export * from "./fp/endOfDayWithOptions.js";
export * from "./fp/endOfDecade.js";
export * from "./fp/endOfDecadeWithOptions.js";
export * from "./fp/endOfHour.js";
export * from "./fp/endOfHourWithOptions.js";
export * from "./fp/endOfISOWeek.js";
export * from "./fp/endOfISOWeekWithOptions.js";
export * from "./fp/endOfISOWeekYear.js";
export * from "./fp/endOfISOWeekYearWithOptions.js";
export * from "./fp/endOfMinute.js";
export * from "./fp/endOfMinuteWithOptions.js";
export * from "./fp/endOfMonth.js";
export * from "./fp/endOfMonthWithOptions.js";
export * from "./fp/endOfQuarter.js";
export * from "./fp/endOfQuarterWithOptions.js";
export * from "./fp/endOfSecond.js";
export * from "./fp/endOfSecondWithOptions.js";
export * from "./fp/endOfWeek.js";
export * from "./fp/endOfWeekWithOptions.js";
export * from "./fp/endOfYear.js";
export * from "./fp/endOfYearWithOptions.js";
export * from "./fp/format.js";
export * from "./fp/formatDistance.js";
export * from "./fp/formatDistanceStrict.js";
export * from "./fp/formatDistanceStrictWithOptions.js";
export * from "./fp/formatDistanceWithOptions.js";
export * from "./fp/formatDuration.js";
export * from "./fp/formatDurationWithOptions.js";
export * from "./fp/formatISO.js";
export * from "./fp/formatISO9075.js";
export * from "./fp/formatISO9075WithOptions.js";
export * from "./fp/formatISODuration.js";
export * from "./fp/formatISOWithOptions.js";
export * from "./fp/formatRFC3339.js";
export * from "./fp/formatRFC3339WithOptions.js";
export * from "./fp/formatRFC7231.js";
export * from "./fp/formatRelative.js";
export * from "./fp/formatRelativeWithOptions.js";
export * from "./fp/formatWithOptions.js";
export * from "./fp/fromUnixTime.js";
export * from "./fp/fromUnixTimeWithOptions.js";
export * from "./fp/getDate.js";
export * from "./fp/getDateWithOptions.js";
export * from "./fp/getDay.js";
export * from "./fp/getDayOfYear.js";
export * from "./fp/getDayOfYearWithOptions.js";
export * from "./fp/getDayWithOptions.js";
export * from "./fp/getDaysInMonth.js";
export * from "./fp/getDaysInMonthWithOptions.js";
export * from "./fp/getDaysInYear.js";
export * from "./fp/getDaysInYearWithOptions.js";
export * from "./fp/getDecade.js";
export * from "./fp/getDecadeWithOptions.js";
export * from "./fp/getHours.js";
export * from "./fp/getHoursWithOptions.js";
export * from "./fp/getISODay.js";
export * from "./fp/getISODayWithOptions.js";
export * from "./fp/getISOWeek.js";
export * from "./fp/getISOWeekWithOptions.js";
export * from "./fp/getISOWeekYear.js";
export * from "./fp/getISOWeekYearWithOptions.js";
export * from "./fp/getISOWeeksInYear.js";
export * from "./fp/getISOWeeksInYearWithOptions.js";
export * from "./fp/getMilliseconds.js";
export * from "./fp/getMinutes.js";
export * from "./fp/getMinutesWithOptions.js";
export * from "./fp/getMonth.js";
export * from "./fp/getMonthWithOptions.js";
export * from "./fp/getOverlappingDaysInIntervals.js";
export * from "./fp/getQuarter.js";
export * from "./fp/getQuarterWithOptions.js";
export * from "./fp/getSeconds.js";
export * from "./fp/getTime.js";
export * from "./fp/getUnixTime.js";
export * from "./fp/getWeek.js";
export * from "./fp/getWeekOfMonth.js";
export * from "./fp/getWeekOfMonthWithOptions.js";
export * from "./fp/getWeekWithOptions.js";
export * from "./fp/getWeekYear.js";
export * from "./fp/getWeekYearWithOptions.js";
export * from "./fp/getWeeksInMonth.js";
export * from "./fp/getWeeksInMonthWithOptions.js";
export * from "./fp/getYear.js";
export * from "./fp/getYearWithOptions.js";
export * from "./fp/hoursToMilliseconds.js";
export * from "./fp/hoursToMinutes.js";
export * from "./fp/hoursToSeconds.js";
export * from "./fp/interval.js";
export * from "./fp/intervalToDuration.js";
export * from "./fp/intervalToDurationWithOptions.js";
export * from "./fp/intervalWithOptions.js";
export * from "./fp/intlFormat.js";
export * from "./fp/intlFormatDistance.js";
export * from "./fp/intlFormatDistanceWithOptions.js";
export * from "./fp/isAfter.js";
export * from "./fp/isBefore.js";
export * from "./fp/isDate.js";
export * from "./fp/isEqual.js";
export * from "./fp/isExists.js";
export * from "./fp/isFirstDayOfMonth.js";
export * from "./fp/isFirstDayOfMonthWithOptions.js";
export * from "./fp/isFriday.js";
export * from "./fp/isFridayWithOptions.js";
export * from "./fp/isLastDayOfMonth.js";
export * from "./fp/isLastDayOfMonthWithOptions.js";
export * from "./fp/isLeapYear.js";
export * from "./fp/isLeapYearWithOptions.js";
export * from "./fp/isMatch.js";
export * from "./fp/isMatchWithOptions.js";
export * from "./fp/isMonday.js";
export * from "./fp/isMondayWithOptions.js";
export * from "./fp/isSameDay.js";
export * from "./fp/isSameDayWithOptions.js";
export * from "./fp/isSameHour.js";
export * from "./fp/isSameHourWithOptions.js";
export * from "./fp/isSameISOWeek.js";
export * from "./fp/isSameISOWeekWithOptions.js";
export * from "./fp/isSameISOWeekYear.js";
export * from "./fp/isSameISOWeekYearWithOptions.js";
export * from "./fp/isSameMinute.js";
export * from "./fp/isSameMonth.js";
export * from "./fp/isSameMonthWithOptions.js";
export * from "./fp/isSameQuarter.js";
export * from "./fp/isSameQuarterWithOptions.js";
export * from "./fp/isSameSecond.js";
export * from "./fp/isSameWeek.js";
export * from "./fp/isSameWeekWithOptions.js";
export * from "./fp/isSameYear.js";
export * from "./fp/isSameYearWithOptions.js";
export * from "./fp/isSaturday.js";
export * from "./fp/isSaturdayWithOptions.js";
export * from "./fp/isSunday.js";
export * from "./fp/isSundayWithOptions.js";
export * from "./fp/isThursday.js";
export * from "./fp/isThursdayWithOptions.js";
export * from "./fp/isTuesday.js";
export * from "./fp/isTuesdayWithOptions.js";
export * from "./fp/isValid.js";
export * from "./fp/isWednesday.js";
export * from "./fp/isWednesdayWithOptions.js";
export * from "./fp/isWeekend.js";
export * from "./fp/isWeekendWithOptions.js";
export * from "./fp/isWithinInterval.js";
export * from "./fp/isWithinIntervalWithOptions.js";
export * from "./fp/lastDayOfDecade.js";
export * from "./fp/lastDayOfDecadeWithOptions.js";
export * from "./fp/lastDayOfISOWeek.js";
export * from "./fp/lastDayOfISOWeekWithOptions.js";
export * from "./fp/lastDayOfISOWeekYear.js";
export * from "./fp/lastDayOfISOWeekYearWithOptions.js";
export * from "./fp/lastDayOfMonth.js";
export * from "./fp/lastDayOfMonthWithOptions.js";
export * from "./fp/lastDayOfQuarter.js";
export * from "./fp/lastDayOfQuarterWithOptions.js";
export * from "./fp/lastDayOfWeek.js";
export * from "./fp/lastDayOfWeekWithOptions.js";
export * from "./fp/lastDayOfYear.js";
export * from "./fp/lastDayOfYearWithOptions.js";
export * from "./fp/lightFormat.js";
export * from "./fp/max.js";
export * from "./fp/maxWithOptions.js";
export * from "./fp/milliseconds.js";
export * from "./fp/millisecondsToHours.js";
export * from "./fp/millisecondsToMinutes.js";
export * from "./fp/millisecondsToSeconds.js";
export * from "./fp/min.js";
export * from "./fp/minWithOptions.js";
export * from "./fp/minutesToHours.js";
export * from "./fp/minutesToMilliseconds.js";
export * from "./fp/minutesToSeconds.js";
export * from "./fp/monthsToQuarters.js";
export * from "./fp/monthsToYears.js";
export * from "./fp/nextDay.js";
export * from "./fp/nextDayWithOptions.js";
export * from "./fp/nextFriday.js";
export * from "./fp/nextFridayWithOptions.js";
export * from "./fp/nextMonday.js";
export * from "./fp/nextMondayWithOptions.js";
export * from "./fp/nextSaturday.js";
export * from "./fp/nextSaturdayWithOptions.js";
export * from "./fp/nextSunday.js";
export * from "./fp/nextSundayWithOptions.js";
export * from "./fp/nextThursday.js";
export * from "./fp/nextThursdayWithOptions.js";
export * from "./fp/nextTuesday.js";
export * from "./fp/nextTuesdayWithOptions.js";
export * from "./fp/nextWednesday.js";
export * from "./fp/nextWednesdayWithOptions.js";
export * from "./fp/parse.js";
export * from "./fp/parseISO.js";
export * from "./fp/parseISOWithOptions.js";
export * from "./fp/parseJSON.js";
export * from "./fp/parseJSONWithOptions.js";
export * from "./fp/parseWithOptions.js";
export * from "./fp/previousDay.js";
export * from "./fp/previousDayWithOptions.js";
export * from "./fp/previousFriday.js";
export * from "./fp/previousFridayWithOptions.js";
export * from "./fp/previousMonday.js";
export * from "./fp/previousMondayWithOptions.js";
export * from "./fp/previousSaturday.js";
export * from "./fp/previousSaturdayWithOptions.js";
export * from "./fp/previousSunday.js";
export * from "./fp/previousSundayWithOptions.js";
export * from "./fp/previousThursday.js";
export * from "./fp/previousThursdayWithOptions.js";
export * from "./fp/previousTuesday.js";
export * from "./fp/previousTuesdayWithOptions.js";
export * from "./fp/previousWednesday.js";
export * from "./fp/previousWednesdayWithOptions.js";
export * from "./fp/quartersToMonths.js";
export * from "./fp/quartersToYears.js";
export * from "./fp/roundToNearestHours.js";
export * from "./fp/roundToNearestHoursWithOptions.js";
export * from "./fp/roundToNearestMinutes.js";
export * from "./fp/roundToNearestMinutesWithOptions.js";
export * from "./fp/secondsToHours.js";
export * from "./fp/secondsToMilliseconds.js";
export * from "./fp/secondsToMinutes.js";
export * from "./fp/set.js";
export * from "./fp/setDate.js";
export * from "./fp/setDateWithOptions.js";
export * from "./fp/setDay.js";
export * from "./fp/setDayOfYear.js";
export * from "./fp/setDayOfYearWithOptions.js";
export * from "./fp/setDayWithOptions.js";
export * from "./fp/setHours.js";
export * from "./fp/setHoursWithOptions.js";
export * from "./fp/setISODay.js";
export * from "./fp/setISODayWithOptions.js";
export * from "./fp/setISOWeek.js";
export * from "./fp/setISOWeekWithOptions.js";
export * from "./fp/setISOWeekYear.js";
export * from "./fp/setISOWeekYearWithOptions.js";
export * from "./fp/setMilliseconds.js";
export * from "./fp/setMillisecondsWithOptions.js";
export * from "./fp/setMinutes.js";
export * from "./fp/setMinutesWithOptions.js";
export * from "./fp/setMonth.js";
export * from "./fp/setMonthWithOptions.js";
export * from "./fp/setQuarter.js";
export * from "./fp/setQuarterWithOptions.js";
export * from "./fp/setSeconds.js";
export * from "./fp/setSecondsWithOptions.js";
export * from "./fp/setWeek.js";
export * from "./fp/setWeekWithOptions.js";
export * from "./fp/setWeekYear.js";
export * from "./fp/setWeekYearWithOptions.js";
export * from "./fp/setWithOptions.js";
export * from "./fp/setYear.js";
export * from "./fp/setYearWithOptions.js";
export * from "./fp/startOfDay.js";
export * from "./fp/startOfDayWithOptions.js";
export * from "./fp/startOfDecade.js";
export * from "./fp/startOfDecadeWithOptions.js";
export * from "./fp/startOfHour.js";
export * from "./fp/startOfHourWithOptions.js";
export * from "./fp/startOfISOWeek.js";
export * from "./fp/startOfISOWeekWithOptions.js";
export * from "./fp/startOfISOWeekYear.js";
export * from "./fp/startOfISOWeekYearWithOptions.js";
export * from "./fp/startOfMinute.js";
export * from "./fp/startOfMinuteWithOptions.js";
export * from "./fp/startOfMonth.js";
export * from "./fp/startOfMonthWithOptions.js";
export * from "./fp/startOfQuarter.js";
export * from "./fp/startOfQuarterWithOptions.js";
export * from "./fp/startOfSecond.js";
export * from "./fp/startOfSecondWithOptions.js";
export * from "./fp/startOfWeek.js";
export * from "./fp/startOfWeekWithOptions.js";
export * from "./fp/startOfWeekYear.js";
export * from "./fp/startOfWeekYearWithOptions.js";
export * from "./fp/startOfYear.js";
export * from "./fp/startOfYearWithOptions.js";
export * from "./fp/sub.js";
export * from "./fp/subBusinessDays.js";
export * from "./fp/subBusinessDaysWithOptions.js";
export * from "./fp/subDays.js";
export * from "./fp/subDaysWithOptions.js";
export * from "./fp/subHours.js";
export * from "./fp/subHoursWithOptions.js";
export * from "./fp/subISOWeekYears.js";
export * from "./fp/subISOWeekYearsWithOptions.js";
export * from "./fp/subMilliseconds.js";
export * from "./fp/subMillisecondsWithOptions.js";
export * from "./fp/subMinutes.js";
export * from "./fp/subMinutesWithOptions.js";
export * from "./fp/subMonths.js";
export * from "./fp/subMonthsWithOptions.js";
export * from "./fp/subQuarters.js";
export * from "./fp/subQuartersWithOptions.js";
export * from "./fp/subSeconds.js";
export * from "./fp/subSecondsWithOptions.js";
export * from "./fp/subWeeks.js";
export * from "./fp/subWeeksWithOptions.js";
export * from "./fp/subWithOptions.js";
export * from "./fp/subYears.js";
export * from "./fp/subYearsWithOptions.js";
export * from "./fp/toDate.js";
export * from "./fp/transpose.js";
export * from "./fp/weeksToDays.js";
export * from "./fp/yearsToDays.js";
export * from "./fp/yearsToMonths.js";
export * from "./fp/yearsToQuarters.js";

--- FILE: ./node_modules/date-fns/fromUnixTime.cjs ---
"use strict";
exports.fromUnixTime = fromUnixTime;
var _index = require("./toDate.cjs");

/**
 * The {@link fromUnixTime} function options.
 */

/**
 * @name fromUnixTime
 * @category Timestamp Helpers
 * @summary Create a date from a Unix timestamp.
 *
 * @description
 * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.
 *
 * @param unixTime - The given Unix timestamp (in seconds)
 * @param options - An object with options. Allows to pass a context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The date
 *
 * @example
 * // Create the date 29 February 2012 11:45:05:
 * const result = fromUnixTime(1330515905)
 * //=> Wed Feb 29 2012 11:45:05
 */
function fromUnixTime(unixTime, options) {
  return (0, _index.toDate)(unixTime * 1000, options?.in);
}

--- FILE: ./node_modules/date-fns/fromUnixTime.d.ts ---
import type { ContextOptions } from "./types.js";
/**
 * The {@link fromUnixTime} function options.
 */
export interface FromUnixTimeOptions<DateType extends Date = Date>
  extends ContextOptions<DateType> {}
/**
 * @name fromUnixTime
 * @category Timestamp Helpers
 * @summary Create a date from a Unix timestamp.
 *
 * @description
 * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.
 *
 * @param unixTime - The given Unix timestamp (in seconds)
 * @param options - An object with options. Allows to pass a context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The date
 *
 * @example
 * // Create the date 29 February 2012 11:45:05:
 * const result = fromUnixTime(1330515905)
 * //=> Wed Feb 29 2012 11:45:05
 */
export declare function fromUnixTime<DateType extends Date = Date>(
  unixTime: number,
  options?: FromUnixTimeOptions<DateType> | undefined,
): DateType;

--- FILE: ./node_modules/date-fns/fromUnixTime.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link fromUnixTime} function options.
 */

/**
 * @name fromUnixTime
 * @category Timestamp Helpers
 * @summary Create a date from a Unix timestamp.
 *
 * @description
 * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.
 *
 * @param unixTime - The given Unix timestamp (in seconds)
 * @param options - An object with options. Allows to pass a context.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The date
 *
 * @example
 * // Create the date 29 February 2012 11:45:05:
 * const result = fromUnixTime(1330515905)
 * //=> Wed Feb 29 2012 11:45:05
 */
export function fromUnixTime(unixTime, options) {
  return toDate(unixTime * 1000, options?.in);
}

// Fallback for modularized imports:
export default fromUnixTime;

--- FILE: ./node_modules/date-fns/getDate.cjs ---
"use strict";
exports.getDate = getDate;
var _index = require("./toDate.cjs");

/**
 * The {@link getDate} function options.
 */

/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
function getDate(date, options) {
  return (0, _index.toDate)(date, options?.in).getDate();
}

--- FILE: ./node_modules/date-fns/getDate.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDate} function options.
 */
export interface GetDateOptions extends ContextOptions<Date> {}
/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
export declare function getDate(
  date: DateArg<Date> & {},
  options?: GetDateOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDate.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getDate} function options.
 */

/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
export function getDate(date, options) {
  return toDate(date, options?.in).getDate();
}

// Fallback for modularized imports:
export default getDate;

--- FILE: ./node_modules/date-fns/getDay.cjs ---
"use strict";
exports.getDay = getDay;
var _index = require("./toDate.cjs");

/**
 * The {@link getDay} function options.
 */

/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of week, 0 represents Sunday
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
function getDay(date, options) {
  return (0, _index.toDate)(date, options?.in).getDay();
}

--- FILE: ./node_modules/date-fns/getDay.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDay} function options.
 */
export interface GetDayOptions extends ContextOptions<Date> {}
/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of week, 0 represents Sunday
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
export declare function getDay(
  date: DateArg<Date> & {},
  options?: GetDayOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDay.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getDay} function options.
 */

/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of week, 0 represents Sunday
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
export function getDay(date, options) {
  return toDate(date, options?.in).getDay();
}

// Fallback for modularized imports:
export default getDay;

--- FILE: ./node_modules/date-fns/getDayOfYear.cjs ---
"use strict";
exports.getDayOfYear = getDayOfYear;
var _index = require("./differenceInCalendarDays.cjs");
var _index2 = require("./startOfYear.cjs");
var _index3 = require("./toDate.cjs");

/**
 * The {@link getDayOfYear} function options.
 */

/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
function getDayOfYear(date, options) {
  const _date = (0, _index3.toDate)(date, options?.in);
  const diff = (0, _index.differenceInCalendarDays)(
    _date,
    (0, _index2.startOfYear)(_date),
  );
  const dayOfYear = diff + 1;
  return dayOfYear;
}

--- FILE: ./node_modules/date-fns/getDayOfYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDayOfYear} function options.
 */
export interface GetDayOfYearOptions extends ContextOptions<Date> {}
/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
export declare function getDayOfYear(
  date: DateArg<Date> & {},
  options?: GetDayOfYearOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDayOfYear.js ---
import { differenceInCalendarDays } from "./differenceInCalendarDays.js";
import { startOfYear } from "./startOfYear.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getDayOfYear} function options.
 */

/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
export function getDayOfYear(date, options) {
  const _date = toDate(date, options?.in);
  const diff = differenceInCalendarDays(_date, startOfYear(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}

// Fallback for modularized imports:
export default getDayOfYear;

--- FILE: ./node_modules/date-fns/getDaysInMonth.cjs ---
"use strict";
exports.getDaysInMonth = getDaysInMonth;
var _index = require("./constructFrom.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link getDaysInMonth} function options.
 */

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date, considering the context if provided.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth(date, options) {
  const _date = (0, _index2.toDate)(date, options?.in);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth = (0, _index.constructFrom)(_date, 0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

--- FILE: ./node_modules/date-fns/getDaysInMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDaysInMonth} function options.
 */
export interface GetDaysInMonthOptions extends ContextOptions<Date> {}
/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date, considering the context if provided.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
export declare function getDaysInMonth(
  date: DateArg<Date> & {},
  options?: GetDaysInMonthOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDaysInMonth.js ---
import { constructFrom } from "./constructFrom.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getDaysInMonth} function options.
 */

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date, considering the context if provided.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
export function getDaysInMonth(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth = constructFrom(_date, 0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

// Fallback for modularized imports:
export default getDaysInMonth;

--- FILE: ./node_modules/date-fns/getDaysInYear.cjs ---
"use strict";
exports.getDaysInYear = getDaysInYear;
var _index = require("./isLeapYear.cjs");
var _index2 = require("./toDate.cjs");

/**
 * The {@link getDaysInYear} function options.
 */

/**
 * @name getDaysInYear
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * const result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */
function getDaysInYear(date, options) {
  const _date = (0, _index2.toDate)(date, options?.in);
  if (Number.isNaN(+_date)) return NaN;
  return (0, _index.isLeapYear)(_date) ? 366 : 365;
}

--- FILE: ./node_modules/date-fns/getDaysInYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDaysInYear} function options.
 */
export interface GetDaysInYearOptions extends ContextOptions<Date> {}
/**
 * @name getDaysInYear
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * const result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */
export declare function getDaysInYear(
  date: DateArg<Date> & {},
  options?: GetDaysInYearOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDaysInYear.js ---
import { isLeapYear } from "./isLeapYear.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getDaysInYear} function options.
 */

/**
 * @name getDaysInYear
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * const result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */
export function getDaysInYear(date, options) {
  const _date = toDate(date, options?.in);
  if (Number.isNaN(+_date)) return NaN;
  return isLeapYear(_date) ? 366 : 365;
}

// Fallback for modularized imports:
export default getDaysInYear;

--- FILE: ./node_modules/date-fns/getDecade.cjs ---
"use strict";
exports.getDecade = getDecade;
var _index = require("./toDate.cjs");

/**
 * The {@link getDecade} function options.
 */

/**
 * @name getDecade
 * @category Decade Helpers
 * @summary Get the decade of the given date.
 *
 * @description
 * Get the decade of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year of decade
 *
 * @example
 * // Which decade belongs 27 November 1942?
 * const result = getDecade(new Date(1942, 10, 27))
 * //=> 1940
 */
function getDecade(date, options) {
  // TODO: Switch to more technical definition in of decades that start with 1
  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
  // change, so it can only be done in 4.0.
  const _date = (0, _index.toDate)(date, options?.in);
  const year = _date.getFullYear();
  const decade = Math.floor(year / 10) * 10;
  return decade;
}

--- FILE: ./node_modules/date-fns/getDecade.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getDecade} function options.
 */
export interface GetDecadeOptions extends ContextOptions<Date> {}
/**
 * @name getDecade
 * @category Decade Helpers
 * @summary Get the decade of the given date.
 *
 * @description
 * Get the decade of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year of decade
 *
 * @example
 * // Which decade belongs 27 November 1942?
 * const result = getDecade(new Date(1942, 10, 27))
 * //=> 1940
 */
export declare function getDecade(
  date: DateArg<Date> & {},
  options?: GetDecadeOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getDecade.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getDecade} function options.
 */

/**
 * @name getDecade
 * @category Decade Helpers
 * @summary Get the decade of the given date.
 *
 * @description
 * Get the decade of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year of decade
 *
 * @example
 * // Which decade belongs 27 November 1942?
 * const result = getDecade(new Date(1942, 10, 27))
 * //=> 1940
 */
export function getDecade(date, options) {
  // TODO: Switch to more technical definition in of decades that start with 1
  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
  // change, so it can only be done in 4.0.
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  const decade = Math.floor(year / 10) * 10;
  return decade;
}

// Fallback for modularized imports:
export default getDecade;

--- FILE: ./node_modules/date-fns/getDefaultOptions.cjs ---
"use strict";
exports.getDefaultOptions = getDefaultOptions;

var _index = require("./_lib/defaultOptions.cjs");

/**
 * @name getDefaultOptions
 * @category Common Helpers
 * @summary Get default options.
 * @pure false
 *
 * @description
 * Returns an object that contains defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
 *
 * @returns The default options
 *
 * @example
 * const result = getDefaultOptions()
 * //=> {}
 *
 * @example
 * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
 * const result = getDefaultOptions()
 * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
 */
function getDefaultOptions() {
  return Object.assign({}, (0, _index.getDefaultOptions)());
}

--- FILE: ./node_modules/date-fns/getDefaultOptions.d.ts ---
import type { DefaultOptions } from "./_lib/defaultOptions.js";
/**
 * @name getDefaultOptions
 * @category Common Helpers
 * @summary Get default options.
 * @pure false
 *
 * @description
 * Returns an object that contains defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
 *
 * @returns The default options
 *
 * @example
 * const result = getDefaultOptions()
 * //=> {}
 *
 * @example
 * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
 * const result = getDefaultOptions()
 * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
 */
export declare function getDefaultOptions(): DefaultOptions;

--- FILE: ./node_modules/date-fns/getDefaultOptions.js ---
import { getDefaultOptions as getInternalDefaultOptions } from "./_lib/defaultOptions.js";

/**
 * @name getDefaultOptions
 * @category Common Helpers
 * @summary Get default options.
 * @pure false
 *
 * @description
 * Returns an object that contains defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
 *
 * @returns The default options
 *
 * @example
 * const result = getDefaultOptions()
 * //=> {}
 *
 * @example
 * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
 * const result = getDefaultOptions()
 * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
 */
export function getDefaultOptions() {
  return Object.assign({}, getInternalDefaultOptions());
}

// Fallback for modularized imports:
export default getDefaultOptions;

--- FILE: ./node_modules/date-fns/getHours.cjs ---
"use strict";
exports.getHours = getHours;
var _index = require("./toDate.cjs");

/**
 * The {@link getHours} function options.
 */

/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
function getHours(date, options) {
  return (0, _index.toDate)(date, options?.in).getHours();
}

--- FILE: ./node_modules/date-fns/getHours.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getHours} function options.
 */
export interface GetHoursOptions extends ContextOptions<Date> {}
/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
export declare function getHours(
  date: DateArg<Date> & {},
  options?: GetHoursOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getHours.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getHours} function options.
 */

/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
export function getHours(date, options) {
  return toDate(date, options?.in).getHours();
}

// Fallback for modularized imports:
export default getHours;

--- FILE: ./node_modules/date-fns/getISODay.cjs ---
"use strict";
exports.getISODay = getISODay;
var _index = require("./toDate.cjs");

/**
 * The {@link getISODay} function options.
 */

/**
 * @name getISODay
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * const result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
function getISODay(date, options) {
  const day = (0, _index.toDate)(date, options?.in).getDay();
  return day === 0 ? 7 : day;
}

--- FILE: ./node_modules/date-fns/getISODay.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getISODay} function options.
 */
export interface GetISODayOptions extends ContextOptions<Date> {}
/**
 * @name getISODay
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * const result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
export declare function getISODay(
  date: DateArg<Date> & {},
  options?: GetISODayOptions,
): number;

--- FILE: ./node_modules/date-fns/getISODay.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getISODay} function options.
 */

/**
 * @name getISODay
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * const result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
export function getISODay(date, options) {
  const day = toDate(date, options?.in).getDay();
  return day === 0 ? 7 : day;
}

// Fallback for modularized imports:
export default getISODay;

--- FILE: ./node_modules/date-fns/getISOWeek.cjs ---
"use strict";
exports.getISOWeek = getISOWeek;
var _index = require("./constants.cjs");
var _index2 = require("./startOfISOWeek.cjs");
var _index3 = require("./startOfISOWeekYear.cjs");
var _index4 = require("./toDate.cjs");

/**
 * The {@link getISOWeek} function options.
 */

/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek(date, options) {
  const _date = (0, _index4.toDate)(date, options?.in);
  const diff =
    +(0, _index2.startOfISOWeek)(_date) -
    +(0, _index3.startOfISOWeekYear)(_date);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / _index.millisecondsInWeek) + 1;
}

--- FILE: ./node_modules/date-fns/getISOWeek.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getISOWeek} function options.
 */
export interface GetISOWeekOptions extends ContextOptions<Date> {}
/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
export declare function getISOWeek(
  date: DateArg<Date> & {},
  options?: GetISOWeekOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getISOWeek.js ---
import { millisecondsInWeek } from "./constants.js";
import { startOfISOWeek } from "./startOfISOWeek.js";
import { startOfISOWeekYear } from "./startOfISOWeekYear.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getISOWeek} function options.
 */

/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
export function getISOWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / millisecondsInWeek) + 1;
}

// Fallback for modularized imports:
export default getISOWeek;

--- FILE: ./node_modules/date-fns/getISOWeekYear.cjs ---
"use strict";
exports.getISOWeekYear = getISOWeekYear;
var _index = require("./constructFrom.cjs");
var _index2 = require("./startOfISOWeek.cjs");
var _index3 = require("./toDate.cjs");

/**
 * The {@link getISOWeekYear} function options.
 */

/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOWeekYear(date, options) {
  const _date = (0, _index3.toDate)(date, options?.in);
  const year = _date.getFullYear();

  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = (0, _index2.startOfISOWeek)(
    fourthOfJanuaryOfNextYear,
  );

  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = (0, _index2.startOfISOWeek)(
    fourthOfJanuaryOfThisYear,
  );

  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

--- FILE: ./node_modules/date-fns/getISOWeekYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getISOWeekYear} function options.
 */
export interface GetISOWeekYearOptions extends ContextOptions<Date> {}
/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
export declare function getISOWeekYear(
  date: DateArg<Date> & {},
  options?: GetISOWeekYearOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getISOWeekYear.js ---
import { constructFrom } from "./constructFrom.js";
import { startOfISOWeek } from "./startOfISOWeek.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getISOWeekYear} function options.
 */

/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
export function getISOWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();

  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);

  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);

  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// Fallback for modularized imports:
export default getISOWeekYear;

--- FILE: ./node_modules/date-fns/getISOWeeksInYear.cjs ---
"use strict";
exports.getISOWeeksInYear = getISOWeeksInYear;
var _index = require("./addWeeks.cjs");
var _index2 = require("./constants.cjs");
var _index3 = require("./startOfISOWeekYear.cjs");

/**
 * The {@link getISOWeeksInYear} function options.
 */

/**
 * @name getISOWeeksInYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * const result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */
function getISOWeeksInYear(date, options) {
  const thisYear = (0, _index3.startOfISOWeekYear)(date, options);
  const nextYear = (0, _index3.startOfISOWeekYear)(
    (0, _index.addWeeks)(thisYear, 60),
  );
  const diff = +nextYear - +thisYear;

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / _index2.millisecondsInWeek);
}

--- FILE: ./node_modules/date-fns/getISOWeeksInYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getISOWeeksInYear} function options.
 */
export interface GetISOWeeksInYearOptions extends ContextOptions<Date> {}
/**
 * @name getISOWeeksInYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * const result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */
export declare function getISOWeeksInYear(
  date: DateArg<Date> & {},
  options?: GetISOWeeksInYearOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getISOWeeksInYear.js ---
import { addWeeks } from "./addWeeks.js";
import { millisecondsInWeek } from "./constants.js";
import { startOfISOWeekYear } from "./startOfISOWeekYear.js";

/**
 * The {@link getISOWeeksInYear} function options.
 */

/**
 * @name getISOWeeksInYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * const result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */
export function getISOWeeksInYear(date, options) {
  const thisYear = startOfISOWeekYear(date, options);
  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));
  const diff = +nextYear - +thisYear;

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / millisecondsInWeek);
}

// Fallback for modularized imports:
export default getISOWeeksInYear;

--- FILE: ./node_modules/date-fns/getMilliseconds.cjs ---
"use strict";
exports.getMilliseconds = getMilliseconds;
var _index = require("./toDate.cjs");

/**
 * @name getMilliseconds
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */
function getMilliseconds(date) {
  return (0, _index.toDate)(date).getMilliseconds();
}

--- FILE: ./node_modules/date-fns/getMilliseconds.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name getMilliseconds
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */
export declare function getMilliseconds(date: DateArg<Date> & {}): number;

--- FILE: ./node_modules/date-fns/getMilliseconds.js ---
import { toDate } from "./toDate.js";

/**
 * @name getMilliseconds
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */
export function getMilliseconds(date) {
  return toDate(date).getMilliseconds();
}

// Fallback for modularized imports:
export default getMilliseconds;

--- FILE: ./node_modules/date-fns/getMinutes.cjs ---
"use strict";
exports.getMinutes = getMinutes;
var _index = require("./toDate.cjs");

/**
 * The {@link getMinutes} function options.
 */

/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
function getMinutes(date, options) {
  return (0, _index.toDate)(date, options?.in).getMinutes();
}

--- FILE: ./node_modules/date-fns/getMinutes.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getMinutes} function options.
 */
export interface GetMinutesOptions extends ContextOptions<Date> {}
/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
export declare function getMinutes(
  date: DateArg<Date> & {},
  options?: GetMinutesOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getMinutes.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getMinutes} function options.
 */

/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
export function getMinutes(date, options) {
  return toDate(date, options?.in).getMinutes();
}

// Fallback for modularized imports:
export default getMinutes;

--- FILE: ./node_modules/date-fns/getMonth.cjs ---
"use strict";
exports.getMonth = getMonth;
var _index = require("./toDate.cjs");

/**
 * The {@link getMonth} function options.
 */

/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The month index (0-11)
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth(date, options) {
  return (0, _index.toDate)(date, options?.in).getMonth();
}

--- FILE: ./node_modules/date-fns/getMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getMonth} function options.
 */
export interface GetMonthOptions extends ContextOptions<Date> {}
/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The month index (0-11)
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
export declare function getMonth(
  date: DateArg<Date> & {},
  options?: GetMonthOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getMonth.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getMonth} function options.
 */

/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The month index (0-11)
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
export function getMonth(date, options) {
  return toDate(date, options?.in).getMonth();
}

// Fallback for modularized imports:
export default getMonth;

--- FILE: ./node_modules/date-fns/getOverlappingDaysInIntervals.cjs ---
"use strict";
exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;
var _index = require("./_lib/getTimezoneOffsetInMilliseconds.cjs");
var _index2 = require("./constants.cjs");
var _index3 = require("./toDate.cjs");

/**
 * @name getOverlappingDaysInIntervals
 * @category Interval Helpers
 * @summary Get the number of days that overlap in two time intervals
 *
 * @description
 * Get the number of days that overlap in two time intervals. It uses the time
 * between dates to calculate the number of days, rounding it up to include
 * partial days.
 *
 * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will
 * result in 1.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - An object with options
 *
 * @returns The number of days that overlap in two time intervals
 *
 * @example
 * // For overlapping time intervals adds 1 for each started overlapping day:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping time intervals returns 0:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> 0
 */

function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {
  const [leftStart, leftEnd] = [
    +(0, _index3.toDate)(intervalLeft.start),
    +(0, _index3.toDate)(intervalLeft.end),
  ].sort((a, b) => a - b);
  const [rightStart, rightEnd] = [
    +(0, _index3.toDate)(intervalRight.start),
    +(0, _index3.toDate)(intervalRight.end),
  ].sort((a, b) => a - b);

  // Prevent NaN result if intervals don't overlap at all.
  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;
  if (!isOverlapping) return 0;

  // Remove the timezone offset to negate the DST effect on calculations.
  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;
  const left =
    overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);
  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;
  const right =
    overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);

  // Ceil the number to include partial days too.
  return Math.ceil((right - left) / _index2.millisecondsInDay);
}

--- FILE: ./node_modules/date-fns/getOverlappingDaysInIntervals.d.ts ---
import type { Interval } from "./types.js";
/**
 * @name getOverlappingDaysInIntervals
 * @category Interval Helpers
 * @summary Get the number of days that overlap in two time intervals
 *
 * @description
 * Get the number of days that overlap in two time intervals. It uses the time
 * between dates to calculate the number of days, rounding it up to include
 * partial days.
 *
 * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will
 * result in 1.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - An object with options
 *
 * @returns The number of days that overlap in two time intervals
 *
 * @example
 * // For overlapping time intervals adds 1 for each started overlapping day:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping time intervals returns 0:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> 0
 */
export declare function getOverlappingDaysInIntervals(
  intervalLeft: Interval,
  intervalRight: Interval,
): number;

--- FILE: ./node_modules/date-fns/getOverlappingDaysInIntervals.js ---
import { getTimezoneOffsetInMilliseconds } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { millisecondsInDay } from "./constants.js";
import { toDate } from "./toDate.js";

/**
 * @name getOverlappingDaysInIntervals
 * @category Interval Helpers
 * @summary Get the number of days that overlap in two time intervals
 *
 * @description
 * Get the number of days that overlap in two time intervals. It uses the time
 * between dates to calculate the number of days, rounding it up to include
 * partial days.
 *
 * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will
 * result in 1.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - An object with options
 *
 * @returns The number of days that overlap in two time intervals
 *
 * @example
 * // For overlapping time intervals adds 1 for each started overlapping day:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping time intervals returns 0:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> 0
 */

export function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {
  const [leftStart, leftEnd] = [
    +toDate(intervalLeft.start),
    +toDate(intervalLeft.end),
  ].sort((a, b) => a - b);
  const [rightStart, rightEnd] = [
    +toDate(intervalRight.start),
    +toDate(intervalRight.end),
  ].sort((a, b) => a - b);

  // Prevent NaN result if intervals don't overlap at all.
  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;
  if (!isOverlapping) return 0;

  // Remove the timezone offset to negate the DST effect on calculations.
  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;
  const left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);
  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;
  const right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight);

  // Ceil the number to include partial days too.
  return Math.ceil((right - left) / millisecondsInDay);
}

// Fallback for modularized imports:
export default getOverlappingDaysInIntervals;

--- FILE: ./node_modules/date-fns/getQuarter.cjs ---
"use strict";
exports.getQuarter = getQuarter;
var _index = require("./toDate.cjs");

/**
 * The {@link getQuarter} function options.
 */

/**
 * @name getQuarter
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * const result = getQuarter(new Date(2014, 6, 2));
 * //=> 3
 */
function getQuarter(date, options) {
  const _date = (0, _index.toDate)(date, options?.in);
  const quarter = Math.trunc(_date.getMonth() / 3) + 1;
  return quarter;
}

--- FILE: ./node_modules/date-fns/getQuarter.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getQuarter} function options.
 */
export interface GetQuarterOptions extends ContextOptions<Date> {}
/**
 * @name getQuarter
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * const result = getQuarter(new Date(2014, 6, 2));
 * //=> 3
 */
export declare function getQuarter(
  date: DateArg<Date> & {},
  options?: GetQuarterOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getQuarter.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getQuarter} function options.
 */

/**
 * @name getQuarter
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * const result = getQuarter(new Date(2014, 6, 2));
 * //=> 3
 */
export function getQuarter(date, options) {
  const _date = toDate(date, options?.in);
  const quarter = Math.trunc(_date.getMonth() / 3) + 1;
  return quarter;
}

// Fallback for modularized imports:
export default getQuarter;

--- FILE: ./node_modules/date-fns/getSeconds.cjs ---
"use strict";
exports.getSeconds = getSeconds;
var _index = require("./toDate.cjs");

/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
function getSeconds(date) {
  return (0, _index.toDate)(date).getSeconds();
}

--- FILE: ./node_modules/date-fns/getSeconds.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
export declare function getSeconds(date: DateArg<Date> & {}): number;

--- FILE: ./node_modules/date-fns/getSeconds.js ---
import { toDate } from "./toDate.js";

/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param date - The given date
 *
 * @returns The seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
export function getSeconds(date) {
  return toDate(date).getSeconds();
}

// Fallback for modularized imports:
export default getSeconds;

--- FILE: ./node_modules/date-fns/getTime.cjs ---
"use strict";
exports.getTime = getTime;
var _index = require("./toDate.cjs");

/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
function getTime(date) {
  return +(0, _index.toDate)(date);
}

--- FILE: ./node_modules/date-fns/getTime.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
export declare function getTime(date: DateArg<Date> & {}): number;

--- FILE: ./node_modules/date-fns/getTime.js ---
import { toDate } from "./toDate.js";

/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
export function getTime(date) {
  return +toDate(date);
}

// Fallback for modularized imports:
export default getTime;

--- FILE: ./node_modules/date-fns/getUnixTime.cjs ---
"use strict";
exports.getUnixTime = getUnixTime;
var _index = require("./toDate.cjs");

/**
 * @name getUnixTime
 * @category Timestamp Helpers
 * @summary Get the seconds timestamp of the given date.
 *
 * @description
 * Get the seconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05 CET:
 * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 1330512305
 */
function getUnixTime(date) {
  return Math.trunc(+(0, _index.toDate)(date) / 1000);
}

--- FILE: ./node_modules/date-fns/getUnixTime.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name getUnixTime
 * @category Timestamp Helpers
 * @summary Get the seconds timestamp of the given date.
 *
 * @description
 * Get the seconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05 CET:
 * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 1330512305
 */
export declare function getUnixTime(date: DateArg<Date> & {}): number;

--- FILE: ./node_modules/date-fns/getUnixTime.js ---
import { toDate } from "./toDate.js";

/**
 * @name getUnixTime
 * @category Timestamp Helpers
 * @summary Get the seconds timestamp of the given date.
 *
 * @description
 * Get the seconds timestamp of the given date.
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05 CET:
 * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 1330512305
 */
export function getUnixTime(date) {
  return Math.trunc(+toDate(date) / 1000);
}

// Fallback for modularized imports:
export default getUnixTime;

--- FILE: ./node_modules/date-fns/getWeek.cjs ---
"use strict";
exports.getWeek = getWeek;
var _index = require("./constants.cjs");
var _index2 = require("./startOfWeek.cjs");
var _index3 = require("./startOfWeekYear.cjs");
var _index4 = require("./toDate.cjs");

/**
 * The {@link getWeek} function options.
 */

/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */
function getWeek(date, options) {
  const _date = (0, _index4.toDate)(date, options?.in);
  const diff =
    +(0, _index2.startOfWeek)(_date, options) -
    +(0, _index3.startOfWeekYear)(_date, options);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / _index.millisecondsInWeek) + 1;
}

--- FILE: ./node_modules/date-fns/getWeek.d.ts ---
import type {
  ContextOptions,
  DateArg,
  FirstWeekContainsDateOptions,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link getWeek} function options.
 */
export interface GetWeekOptions
  extends LocalizedOptions<"options">,
    WeekOptions,
    FirstWeekContainsDateOptions,
    ContextOptions<Date> {}
/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */
export declare function getWeek(
  date: DateArg<Date> & {},
  options?: GetWeekOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getWeek.js ---
import { millisecondsInWeek } from "./constants.js";
import { startOfWeek } from "./startOfWeek.js";
import { startOfWeekYear } from "./startOfWeekYear.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getWeek} function options.
 */

/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */
export function getWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / millisecondsInWeek) + 1;
}

// Fallback for modularized imports:
export default getWeek;

--- FILE: ./node_modules/date-fns/getWeekOfMonth.cjs ---
"use strict";
exports.getWeekOfMonth = getWeekOfMonth;
var _index = require("./_lib/defaultOptions.cjs");
var _index2 = require("./getDate.cjs");
var _index3 = require("./getDay.cjs");
var _index4 = require("./startOfMonth.cjs");
var _index5 = require("./toDate.cjs");

/**
 * The {@link getWeekOfMonth} function options.
 */

/**
 * @name getWeekOfMonth
 * @category Week Helpers
 * @summary Get the week of the month of the given date.
 *
 * @description
 * Get the week of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The week of month
 *
 * @example
 * // Which week of the month is 9 November 2017?
 * const result = getWeekOfMonth(new Date(2017, 10, 9))
 * //=> 2
 */
function getWeekOfMonth(date, options) {
  const defaultOptions = (0, _index.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const currentDayOfMonth = (0, _index2.getDate)(
    (0, _index5.toDate)(date, options?.in),
  );
  if (isNaN(currentDayOfMonth)) return NaN;

  const startWeekDay = (0, _index3.getDay)(
    (0, _index4.startOfMonth)(date, options),
  );

  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;
  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;

  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
}

--- FILE: ./node_modules/date-fns/getWeekOfMonth.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link getWeekOfMonth} function options.
 */
export interface GetWeekOfMonthOptions
  extends LocalizedOptions<"options">,
    WeekOptions,
    ContextOptions<Date> {}
/**
 * @name getWeekOfMonth
 * @category Week Helpers
 * @summary Get the week of the month of the given date.
 *
 * @description
 * Get the week of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The week of month
 *
 * @example
 * // Which week of the month is 9 November 2017?
 * const result = getWeekOfMonth(new Date(2017, 10, 9))
 * //=> 2
 */
export declare function getWeekOfMonth(
  date: DateArg<Date> & {},
  options?: GetWeekOfMonthOptions,
): number;

--- FILE: ./node_modules/date-fns/getWeekOfMonth.js ---
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { getDate } from "./getDate.js";
import { getDay } from "./getDay.js";
import { startOfMonth } from "./startOfMonth.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getWeekOfMonth} function options.
 */

/**
 * @name getWeekOfMonth
 * @category Week Helpers
 * @summary Get the week of the month of the given date.
 *
 * @description
 * Get the week of the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The week of month
 *
 * @example
 * // Which week of the month is 9 November 2017?
 * const result = getWeekOfMonth(new Date(2017, 10, 9))
 * //=> 2
 */
export function getWeekOfMonth(date, options) {
  const defaultOptions = getDefaultOptions();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const currentDayOfMonth = getDate(toDate(date, options?.in));
  if (isNaN(currentDayOfMonth)) return NaN;

  const startWeekDay = getDay(startOfMonth(date, options));

  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;
  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;

  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
}

// Fallback for modularized imports:
export default getWeekOfMonth;

--- FILE: ./node_modules/date-fns/getWeekYear.cjs ---
"use strict";
exports.getWeekYear = getWeekYear;
var _index = require("./_lib/defaultOptions.cjs");
var _index2 = require("./constructFrom.cjs");
var _index3 = require("./startOfWeek.cjs");
var _index4 = require("./toDate.cjs");

/**
 * The {@link getWeekYear} function options.
 */

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
function getWeekYear(date, options) {
  const _date = (0, _index4.toDate)(date, options?.in);
  const year = _date.getFullYear();

  const defaultOptions = (0, _index.getDefaultOptions)();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const firstWeekOfNextYear = (0, _index2.constructFrom)(
    options?.in || date,
    0,
  );
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = (0, _index3.startOfWeek)(
    firstWeekOfNextYear,
    options,
  );

  const firstWeekOfThisYear = (0, _index2.constructFrom)(
    options?.in || date,
    0,
  );
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = (0, _index3.startOfWeek)(
    firstWeekOfThisYear,
    options,
  );

  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

--- FILE: ./node_modules/date-fns/getWeekYear.d.ts ---
import type {
  ContextOptions,
  DateArg,
  FirstWeekContainsDateOptions,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link getWeekYear} function options.
 */
export interface GetWeekYearOptions
  extends LocalizedOptions<"options">,
    WeekOptions,
    FirstWeekContainsDateOptions,
    ContextOptions<Date> {}
/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
export declare function getWeekYear(
  date: DateArg<Date> & {},
  options?: GetWeekYearOptions,
): number;

--- FILE: ./node_modules/date-fns/getWeekYear.js ---
import { getDefaultOptions } from "./_lib/defaultOptions.js";
import { constructFrom } from "./constructFrom.js";
import { startOfWeek } from "./startOfWeek.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getWeekYear} function options.
 */

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
export function getWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();

  const defaultOptions = getDefaultOptions();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);

  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);

  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

// Fallback for modularized imports:
export default getWeekYear;

--- FILE: ./node_modules/date-fns/getWeeksInMonth.cjs ---
"use strict";
exports.getWeeksInMonth = getWeeksInMonth;
var _index = require("./differenceInCalendarWeeks.cjs");
var _index2 = require("./lastDayOfMonth.cjs");
var _index3 = require("./startOfMonth.cjs");
var _index4 = require("./toDate.cjs");

/**
 * The {@link getWeeksInMonth} function options.
 */

/**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */
function getWeeksInMonth(date, options) {
  const contextDate = (0, _index4.toDate)(date, options?.in);
  return (
    (0, _index.differenceInCalendarWeeks)(
      (0, _index2.lastDayOfMonth)(contextDate, options),
      (0, _index3.startOfMonth)(contextDate, options),
      options,
    ) + 1
  );
}

--- FILE: ./node_modules/date-fns/getWeeksInMonth.d.ts ---
import type {
  ContextOptions,
  DateArg,
  LocalizedOptions,
  WeekOptions,
} from "./types.js";
/**
 * The {@link getWeeksInMonth} function options.
 */
export interface GetWeeksInMonthOptions
  extends LocalizedOptions<"options">,
    WeekOptions,
    ContextOptions<Date> {}
/**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */
export declare function getWeeksInMonth(
  date: DateArg<Date> & {},
  options?: GetWeeksInMonthOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getWeeksInMonth.js ---
import { differenceInCalendarWeeks } from "./differenceInCalendarWeeks.js";
import { lastDayOfMonth } from "./lastDayOfMonth.js";
import { startOfMonth } from "./startOfMonth.js";
import { toDate } from "./toDate.js";

/**
 * The {@link getWeeksInMonth} function options.
 */

/**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */
export function getWeeksInMonth(date, options) {
  const contextDate = toDate(date, options?.in);
  return (
    differenceInCalendarWeeks(
      lastDayOfMonth(contextDate, options),
      startOfMonth(contextDate, options),
      options,
    ) + 1
  );
}

// Fallback for modularized imports:
export default getWeeksInMonth;

--- FILE: ./node_modules/date-fns/getYear.cjs ---
"use strict";
exports.getYear = getYear;
var _index = require("./toDate.cjs");

/**
 * The {@link getYear} function options.
 */

/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear(date, options) {
  return (0, _index.toDate)(date, options?.in).getFullYear();
}

--- FILE: ./node_modules/date-fns/getYear.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link getYear} function options.
 */
export interface GetYearOptions extends ContextOptions<Date> {}
/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
export declare function getYear(
  date: DateArg<Date> & {},
  options?: GetYearOptions | undefined,
): number;

--- FILE: ./node_modules/date-fns/getYear.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link getYear} function options.
 */

/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
export function getYear(date, options) {
  return toDate(date, options?.in).getFullYear();
}

// Fallback for modularized imports:
export default getYear;

--- FILE: ./node_modules/date-fns/hoursToMilliseconds.cjs ---
"use strict";
exports.hoursToMilliseconds = hoursToMilliseconds;
var _index = require("./constants.cjs");

/**
 * @name hoursToMilliseconds
 * @category  Conversion Helpers
 * @summary Convert hours to milliseconds.
 *
 * @description
 * Convert a number of hours to a full number of milliseconds.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted to milliseconds
 *
 * @example
 * // Convert 2 hours to milliseconds:
 * const result = hoursToMilliseconds(2)
 * //=> 7200000
 */
function hoursToMilliseconds(hours) {
  return Math.trunc(hours * _index.millisecondsInHour);
}

--- FILE: ./node_modules/date-fns/hoursToMilliseconds.d.ts ---
/**
 * @name hoursToMilliseconds
 * @category  Conversion Helpers
 * @summary Convert hours to milliseconds.
 *
 * @description
 * Convert a number of hours to a full number of milliseconds.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted to milliseconds
 *
 * @example
 * // Convert 2 hours to milliseconds:
 * const result = hoursToMilliseconds(2)
 * //=> 7200000
 */
export declare function hoursToMilliseconds(hours: number): number;

--- FILE: ./node_modules/date-fns/hoursToMilliseconds.js ---
import { millisecondsInHour } from "./constants.js";

/**
 * @name hoursToMilliseconds
 * @category  Conversion Helpers
 * @summary Convert hours to milliseconds.
 *
 * @description
 * Convert a number of hours to a full number of milliseconds.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted to milliseconds
 *
 * @example
 * // Convert 2 hours to milliseconds:
 * const result = hoursToMilliseconds(2)
 * //=> 7200000
 */
export function hoursToMilliseconds(hours) {
  return Math.trunc(hours * millisecondsInHour);
}

// Fallback for modularized imports:
export default hoursToMilliseconds;

--- FILE: ./node_modules/date-fns/hoursToMinutes.cjs ---
"use strict";
exports.hoursToMinutes = hoursToMinutes;
var _index = require("./constants.cjs");

/**
 * @name hoursToMinutes
 * @category Conversion Helpers
 * @summary Convert hours to minutes.
 *
 * @description
 * Convert a number of hours to a full number of minutes.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted in minutes
 *
 * @example
 * // Convert 2 hours to minutes:
 * const result = hoursToMinutes(2)
 * //=> 120
 */
function hoursToMinutes(hours) {
  return Math.trunc(hours * _index.minutesInHour);
}

--- FILE: ./node_modules/date-fns/hoursToMinutes.d.ts ---
/**
 * @name hoursToMinutes
 * @category Conversion Helpers
 * @summary Convert hours to minutes.
 *
 * @description
 * Convert a number of hours to a full number of minutes.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted in minutes
 *
 * @example
 * // Convert 2 hours to minutes:
 * const result = hoursToMinutes(2)
 * //=> 120
 */
export declare function hoursToMinutes(hours: number): number;

--- FILE: ./node_modules/date-fns/hoursToMinutes.js ---
import { minutesInHour } from "./constants.js";

/**
 * @name hoursToMinutes
 * @category Conversion Helpers
 * @summary Convert hours to minutes.
 *
 * @description
 * Convert a number of hours to a full number of minutes.
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted in minutes
 *
 * @example
 * // Convert 2 hours to minutes:
 * const result = hoursToMinutes(2)
 * //=> 120
 */
export function hoursToMinutes(hours) {
  return Math.trunc(hours * minutesInHour);
}

// Fallback for modularized imports:
export default hoursToMinutes;

--- FILE: ./node_modules/date-fns/hoursToSeconds.cjs ---
"use strict";
exports.hoursToSeconds = hoursToSeconds;
var _index = require("./constants.cjs");

/**
 * @name hoursToSeconds
 * @category Conversion Helpers
 * @summary Convert hours to seconds.
 *
 * @description
 * Convert a number of hours to a full number of seconds.
 *
 * @param hours - The number of hours to be converted
 *
 * @returns The number of hours converted in seconds
 *
 * @example
 * // Convert 2 hours to seconds:
 * const result = hoursToSeconds(2)
 * //=> 7200
 */
function hoursToSeconds(hours) {
  return Math.trunc(hours * _index.secondsInHour);
}

--- FILE: ./node_modules/date-fns/hoursToSeconds.d.ts ---
/**
 * @name hoursToSeconds
 * @category Conversion Helpers
 * @summary Convert hours to seconds.
 *
 * @description
 * Convert a number of hours to a full number of seconds.
 *
 * @param hours - The number of hours to be converted
 *
 * @returns The number of hours converted in seconds
 *
 * @example
 * // Convert 2 hours to seconds:
 * const result = hoursToSeconds(2)
 * //=> 7200
 */
export declare function hoursToSeconds(hours: number): number;

--- FILE: ./node_modules/date-fns/hoursToSeconds.js ---
import { secondsInHour } from "./constants.js";

/**
 * @name hoursToSeconds
 * @category Conversion Helpers
 * @summary Convert hours to seconds.
 *
 * @description
 * Convert a number of hours to a full number of seconds.
 *
 * @param hours - The number of hours to be converted
 *
 * @returns The number of hours converted in seconds
 *
 * @example
 * // Convert 2 hours to seconds:
 * const result = hoursToSeconds(2)
 * //=> 7200
 */
export function hoursToSeconds(hours) {
  return Math.trunc(hours * secondsInHour);
}

// Fallback for modularized imports:
export default hoursToSeconds;

--- FILE: ./node_modules/date-fns/index.cjs ---
"use strict";

var _index = require("./add.cjs");
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    },
  });
});
var _index2 = require("./addBusinessDays.cjs");
Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    },
  });
});
var _index3 = require("./addDays.cjs");
Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    },
  });
});
var _index4 = require("./addHours.cjs");
Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    },
  });
});
var _index5 = require("./addISOWeekYears.cjs");
Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    },
  });
});
var _index6 = require("./addMilliseconds.cjs");
Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    },
  });
});
var _index7 = require("./addMinutes.cjs");
Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    },
  });
});
var _index8 = require("./addMonths.cjs");
Object.keys(_index8).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index8[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index8[key];
    },
  });
});
var _index9 = require("./addQuarters.cjs");
Object.keys(_index9).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index9[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index9[key];
    },
  });
});
var _index10 = require("./addSeconds.cjs");
Object.keys(_index10).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index10[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index10[key];
    },
  });
});
var _index11 = require("./addWeeks.cjs");
Object.keys(_index11).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index11[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index11[key];
    },
  });
});
var _index12 = require("./addYears.cjs");
Object.keys(_index12).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index12[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index12[key];
    },
  });
});
var _index13 = require("./areIntervalsOverlapping.cjs");
Object.keys(_index13).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index13[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index13[key];
    },
  });
});
var _index14 = require("./clamp.cjs");
Object.keys(_index14).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index14[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index14[key];
    },
  });
});
var _index15 = require("./closestIndexTo.cjs");
Object.keys(_index15).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index15[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index15[key];
    },
  });
});
var _index16 = require("./closestTo.cjs");
Object.keys(_index16).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index16[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index16[key];
    },
  });
});
var _index17 = require("./compareAsc.cjs");
Object.keys(_index17).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index17[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index17[key];
    },
  });
});
var _index18 = require("./compareDesc.cjs");
Object.keys(_index18).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index18[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index18[key];
    },
  });
});
var _index19 = require("./constructFrom.cjs");
Object.keys(_index19).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index19[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index19[key];
    },
  });
});
var _index20 = require("./constructNow.cjs");
Object.keys(_index20).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index20[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index20[key];
    },
  });
});
var _index21 = require("./daysToWeeks.cjs");
Object.keys(_index21).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index21[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index21[key];
    },
  });
});
var _index22 = require("./differenceInBusinessDays.cjs");
Object.keys(_index22).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index22[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index22[key];
    },
  });
});
var _index23 = require("./differenceInCalendarDays.cjs");
Object.keys(_index23).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index23[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index23[key];
    },
  });
});
var _index24 = require("./differenceInCalendarISOWeekYears.cjs");
Object.keys(_index24).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index24[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index24[key];
    },
  });
});
var _index25 = require("./differenceInCalendarISOWeeks.cjs");
Object.keys(_index25).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index25[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index25[key];
    },
  });
});
var _index26 = require("./differenceInCalendarMonths.cjs");
Object.keys(_index26).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index26[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index26[key];
    },
  });
});
var _index27 = require("./differenceInCalendarQuarters.cjs");
Object.keys(_index27).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index27[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index27[key];
    },
  });
});
var _index28 = require("./differenceInCalendarWeeks.cjs");
Object.keys(_index28).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index28[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index28[key];
    },
  });
});
var _index29 = require("./differenceInCalendarYears.cjs");
Object.keys(_index29).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index29[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index29[key];
    },
  });
});
var _index30 = require("./differenceInDays.cjs");
Object.keys(_index30).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index30[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index30[key];
    },
  });
});
var _index31 = require("./differenceInHours.cjs");
Object.keys(_index31).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index31[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index31[key];
    },
  });
});
var _index32 = require("./differenceInISOWeekYears.cjs");
Object.keys(_index32).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index32[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index32[key];
    },
  });
});
var _index33 = require("./differenceInMilliseconds.cjs");
Object.keys(_index33).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index33[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index33[key];
    },
  });
});
var _index34 = require("./differenceInMinutes.cjs");
Object.keys(_index34).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index34[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index34[key];
    },
  });
});
var _index35 = require("./differenceInMonths.cjs");
Object.keys(_index35).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index35[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index35[key];
    },
  });
});
var _index36 = require("./differenceInQuarters.cjs");
Object.keys(_index36).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index36[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index36[key];
    },
  });
});
var _index37 = require("./differenceInSeconds.cjs");
Object.keys(_index37).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index37[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index37[key];
    },
  });
});
var _index38 = require("./differenceInWeeks.cjs");
Object.keys(_index38).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index38[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index38[key];
    },
  });
});
var _index39 = require("./differenceInYears.cjs");
Object.keys(_index39).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index39[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index39[key];
    },
  });
});
var _index40 = require("./eachDayOfInterval.cjs");
Object.keys(_index40).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index40[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index40[key];
    },
  });
});
var _index41 = require("./eachHourOfInterval.cjs");
Object.keys(_index41).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index41[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index41[key];
    },
  });
});
var _index42 = require("./eachMinuteOfInterval.cjs");
Object.keys(_index42).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index42[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index42[key];
    },
  });
});
var _index43 = require("./eachMonthOfInterval.cjs");
Object.keys(_index43).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index43[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index43[key];
    },
  });
});
var _index44 = require("./eachQuarterOfInterval.cjs");
Object.keys(_index44).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index44[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index44[key];
    },
  });
});
var _index45 = require("./eachWeekOfInterval.cjs");
Object.keys(_index45).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index45[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index45[key];
    },
  });
});
var _index46 = require("./eachWeekendOfInterval.cjs");
Object.keys(_index46).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index46[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index46[key];
    },
  });
});
var _index47 = require("./eachWeekendOfMonth.cjs");
Object.keys(_index47).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index47[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index47[key];
    },
  });
});
var _index48 = require("./eachWeekendOfYear.cjs");
Object.keys(_index48).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index48[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index48[key];
    },
  });
});
var _index49 = require("./eachYearOfInterval.cjs");
Object.keys(_index49).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index49[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index49[key];
    },
  });
});
var _index50 = require("./endOfDay.cjs");
Object.keys(_index50).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index50[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index50[key];
    },
  });
});
var _index51 = require("./endOfDecade.cjs");
Object.keys(_index51).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index51[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index51[key];
    },
  });
});
var _index52 = require("./endOfHour.cjs");
Object.keys(_index52).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index52[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index52[key];
    },
  });
});
var _index53 = require("./endOfISOWeek.cjs");
Object.keys(_index53).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index53[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index53[key];
    },
  });
});
var _index54 = require("./endOfISOWeekYear.cjs");
Object.keys(_index54).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index54[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index54[key];
    },
  });
});
var _index55 = require("./endOfMinute.cjs");
Object.keys(_index55).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index55[key]) return;

--- FILE: ./node_modules/date-fns/index.d.ts ---
export * from "./add.js";
export * from "./addBusinessDays.js";
export * from "./addDays.js";
export * from "./addHours.js";
export * from "./addISOWeekYears.js";
export * from "./addMilliseconds.js";
export * from "./addMinutes.js";
export * from "./addMonths.js";
export * from "./addQuarters.js";
export * from "./addSeconds.js";
export * from "./addWeeks.js";
export * from "./addYears.js";
export * from "./areIntervalsOverlapping.js";
export * from "./clamp.js";
export * from "./closestIndexTo.js";
export * from "./closestTo.js";
export * from "./compareAsc.js";
export * from "./compareDesc.js";
export * from "./constructFrom.js";
export * from "./constructNow.js";
export * from "./daysToWeeks.js";
export * from "./differenceInBusinessDays.js";
export * from "./differenceInCalendarDays.js";
export * from "./differenceInCalendarISOWeekYears.js";
export * from "./differenceInCalendarISOWeeks.js";
export * from "./differenceInCalendarMonths.js";
export * from "./differenceInCalendarQuarters.js";
export * from "./differenceInCalendarWeeks.js";
export * from "./differenceInCalendarYears.js";
export * from "./differenceInDays.js";
export * from "./differenceInHours.js";
export * from "./differenceInISOWeekYears.js";
export * from "./differenceInMilliseconds.js";
export * from "./differenceInMinutes.js";
export * from "./differenceInMonths.js";
export * from "./differenceInQuarters.js";
export * from "./differenceInSeconds.js";
export * from "./differenceInWeeks.js";
export * from "./differenceInYears.js";
export * from "./eachDayOfInterval.js";
export * from "./eachHourOfInterval.js";
export * from "./eachMinuteOfInterval.js";
export * from "./eachMonthOfInterval.js";
export * from "./eachQuarterOfInterval.js";
export * from "./eachWeekOfInterval.js";
export * from "./eachWeekendOfInterval.js";
export * from "./eachWeekendOfMonth.js";
export * from "./eachWeekendOfYear.js";
export * from "./eachYearOfInterval.js";
export * from "./endOfDay.js";
export * from "./endOfDecade.js";
export * from "./endOfHour.js";
export * from "./endOfISOWeek.js";
export * from "./endOfISOWeekYear.js";
export * from "./endOfMinute.js";
export * from "./endOfMonth.js";
export * from "./endOfQuarter.js";
export * from "./endOfSecond.js";
export * from "./endOfToday.js";
export * from "./endOfTomorrow.js";
export * from "./endOfWeek.js";
export * from "./endOfYear.js";
export * from "./endOfYesterday.js";
export * from "./format.js";
export * from "./formatDistance.js";
export * from "./formatDistanceStrict.js";
export * from "./formatDistanceToNow.js";
export * from "./formatDistanceToNowStrict.js";
export * from "./formatDuration.js";
export * from "./formatISO.js";
export * from "./formatISO9075.js";
export * from "./formatISODuration.js";
export * from "./formatRFC3339.js";
export * from "./formatRFC7231.js";
export * from "./formatRelative.js";
export * from "./fromUnixTime.js";
export * from "./getDate.js";
export * from "./getDay.js";
export * from "./getDayOfYear.js";
export * from "./getDaysInMonth.js";
export * from "./getDaysInYear.js";
export * from "./getDecade.js";
export * from "./getDefaultOptions.js";
export * from "./getHours.js";
export * from "./getISODay.js";
export * from "./getISOWeek.js";
export * from "./getISOWeekYear.js";
export * from "./getISOWeeksInYear.js";
export * from "./getMilliseconds.js";
export * from "./getMinutes.js";
export * from "./getMonth.js";
export * from "./getOverlappingDaysInIntervals.js";
export * from "./getQuarter.js";
export * from "./getSeconds.js";
export * from "./getTime.js";
export * from "./getUnixTime.js";
export * from "./getWeek.js";
export * from "./getWeekOfMonth.js";
export * from "./getWeekYear.js";
export * from "./getWeeksInMonth.js";
export * from "./getYear.js";
export * from "./hoursToMilliseconds.js";
export * from "./hoursToMinutes.js";
export * from "./hoursToSeconds.js";
export * from "./interval.js";
export * from "./intervalToDuration.js";
export * from "./intlFormat.js";
export * from "./intlFormatDistance.js";
export * from "./isAfter.js";
export * from "./isBefore.js";
export * from "./isDate.js";
export * from "./isEqual.js";
export * from "./isExists.js";
export * from "./isFirstDayOfMonth.js";
export * from "./isFriday.js";
export * from "./isFuture.js";
export * from "./isLastDayOfMonth.js";
export * from "./isLeapYear.js";
export * from "./isMatch.js";
export * from "./isMonday.js";
export * from "./isPast.js";
export * from "./isSameDay.js";
export * from "./isSameHour.js";
export * from "./isSameISOWeek.js";
export * from "./isSameISOWeekYear.js";
export * from "./isSameMinute.js";
export * from "./isSameMonth.js";
export * from "./isSameQuarter.js";
export * from "./isSameSecond.js";
export * from "./isSameWeek.js";
export * from "./isSameYear.js";
export * from "./isSaturday.js";
export * from "./isSunday.js";
export * from "./isThisHour.js";
export * from "./isThisISOWeek.js";
export * from "./isThisMinute.js";
export * from "./isThisMonth.js";
export * from "./isThisQuarter.js";
export * from "./isThisSecond.js";
export * from "./isThisWeek.js";
export * from "./isThisYear.js";
export * from "./isThursday.js";
export * from "./isToday.js";
export * from "./isTomorrow.js";
export * from "./isTuesday.js";
export * from "./isValid.js";
export * from "./isWednesday.js";
export * from "./isWeekend.js";
export * from "./isWithinInterval.js";
export * from "./isYesterday.js";
export * from "./lastDayOfDecade.js";
export * from "./lastDayOfISOWeek.js";
export * from "./lastDayOfISOWeekYear.js";
export * from "./lastDayOfMonth.js";
export * from "./lastDayOfQuarter.js";
export * from "./lastDayOfWeek.js";
export * from "./lastDayOfYear.js";
export * from "./lightFormat.js";
export * from "./max.js";
export * from "./milliseconds.js";
export * from "./millisecondsToHours.js";
export * from "./millisecondsToMinutes.js";
export * from "./millisecondsToSeconds.js";
export * from "./min.js";
export * from "./minutesToHours.js";
export * from "./minutesToMilliseconds.js";
export * from "./minutesToSeconds.js";
export * from "./monthsToQuarters.js";
export * from "./monthsToYears.js";
export * from "./nextDay.js";
export * from "./nextFriday.js";
export * from "./nextMonday.js";
export * from "./nextSaturday.js";
export * from "./nextSunday.js";
export * from "./nextThursday.js";
export * from "./nextTuesday.js";
export * from "./nextWednesday.js";
export * from "./parse.js";
export * from "./parseISO.js";
export * from "./parseJSON.js";
export * from "./previousDay.js";
export * from "./previousFriday.js";
export * from "./previousMonday.js";
export * from "./previousSaturday.js";
export * from "./previousSunday.js";
export * from "./previousThursday.js";
export * from "./previousTuesday.js";
export * from "./previousWednesday.js";
export * from "./quartersToMonths.js";
export * from "./quartersToYears.js";
export * from "./roundToNearestHours.js";
export * from "./roundToNearestMinutes.js";
export * from "./secondsToHours.js";
export * from "./secondsToMilliseconds.js";
export * from "./secondsToMinutes.js";
export * from "./set.js";
export * from "./setDate.js";
export * from "./setDay.js";
export * from "./setDayOfYear.js";
export * from "./setDefaultOptions.js";
export * from "./setHours.js";
export * from "./setISODay.js";
export * from "./setISOWeek.js";
export * from "./setISOWeekYear.js";
export * from "./setMilliseconds.js";
export * from "./setMinutes.js";
export * from "./setMonth.js";
export * from "./setQuarter.js";
export * from "./setSeconds.js";
export * from "./setWeek.js";
export * from "./setWeekYear.js";
export * from "./setYear.js";
export * from "./startOfDay.js";
export * from "./startOfDecade.js";
export * from "./startOfHour.js";
export * from "./startOfISOWeek.js";
export * from "./startOfISOWeekYear.js";
export * from "./startOfMinute.js";
export * from "./startOfMonth.js";
export * from "./startOfQuarter.js";
export * from "./startOfSecond.js";
export * from "./startOfToday.js";
export * from "./startOfTomorrow.js";
export * from "./startOfWeek.js";
export * from "./startOfWeekYear.js";
export * from "./startOfYear.js";
export * from "./startOfYesterday.js";
export * from "./sub.js";
export * from "./subBusinessDays.js";
export * from "./subDays.js";
export * from "./subHours.js";
export * from "./subISOWeekYears.js";
export * from "./subMilliseconds.js";
export * from "./subMinutes.js";
export * from "./subMonths.js";
export * from "./subQuarters.js";
export * from "./subSeconds.js";
export * from "./subWeeks.js";
export * from "./subYears.js";
export * from "./toDate.js";
export * from "./transpose.js";
export * from "./weeksToDays.js";
export * from "./yearsToDays.js";
export * from "./yearsToMonths.js";
export * from "./yearsToQuarters.js";
export type * from "./types.js";

--- FILE: ./node_modules/date-fns/index.js ---
// This file is generated automatically by `scripts/build/indices.ts`. Please, don't change it.

export * from "./add.js";
export * from "./addBusinessDays.js";
export * from "./addDays.js";
export * from "./addHours.js";
export * from "./addISOWeekYears.js";
export * from "./addMilliseconds.js";
export * from "./addMinutes.js";
export * from "./addMonths.js";
export * from "./addQuarters.js";
export * from "./addSeconds.js";
export * from "./addWeeks.js";
export * from "./addYears.js";
export * from "./areIntervalsOverlapping.js";
export * from "./clamp.js";
export * from "./closestIndexTo.js";
export * from "./closestTo.js";
export * from "./compareAsc.js";
export * from "./compareDesc.js";
export * from "./constructFrom.js";
export * from "./constructNow.js";
export * from "./daysToWeeks.js";
export * from "./differenceInBusinessDays.js";
export * from "./differenceInCalendarDays.js";
export * from "./differenceInCalendarISOWeekYears.js";
export * from "./differenceInCalendarISOWeeks.js";
export * from "./differenceInCalendarMonths.js";
export * from "./differenceInCalendarQuarters.js";
export * from "./differenceInCalendarWeeks.js";
export * from "./differenceInCalendarYears.js";
export * from "./differenceInDays.js";
export * from "./differenceInHours.js";
export * from "./differenceInISOWeekYears.js";
export * from "./differenceInMilliseconds.js";
export * from "./differenceInMinutes.js";
export * from "./differenceInMonths.js";
export * from "./differenceInQuarters.js";
export * from "./differenceInSeconds.js";
export * from "./differenceInWeeks.js";
export * from "./differenceInYears.js";
export * from "./eachDayOfInterval.js";
export * from "./eachHourOfInterval.js";
export * from "./eachMinuteOfInterval.js";
export * from "./eachMonthOfInterval.js";
export * from "./eachQuarterOfInterval.js";
export * from "./eachWeekOfInterval.js";
export * from "./eachWeekendOfInterval.js";
export * from "./eachWeekendOfMonth.js";
export * from "./eachWeekendOfYear.js";
export * from "./eachYearOfInterval.js";
export * from "./endOfDay.js";
export * from "./endOfDecade.js";
export * from "./endOfHour.js";
export * from "./endOfISOWeek.js";
export * from "./endOfISOWeekYear.js";
export * from "./endOfMinute.js";
export * from "./endOfMonth.js";
export * from "./endOfQuarter.js";
export * from "./endOfSecond.js";
export * from "./endOfToday.js";
export * from "./endOfTomorrow.js";
export * from "./endOfWeek.js";
export * from "./endOfYear.js";
export * from "./endOfYesterday.js";
export * from "./format.js";
export * from "./formatDistance.js";
export * from "./formatDistanceStrict.js";
export * from "./formatDistanceToNow.js";
export * from "./formatDistanceToNowStrict.js";
export * from "./formatDuration.js";
export * from "./formatISO.js";
export * from "./formatISO9075.js";
export * from "./formatISODuration.js";
export * from "./formatRFC3339.js";
export * from "./formatRFC7231.js";
export * from "./formatRelative.js";
export * from "./fromUnixTime.js";
export * from "./getDate.js";
export * from "./getDay.js";
export * from "./getDayOfYear.js";
export * from "./getDaysInMonth.js";
export * from "./getDaysInYear.js";
export * from "./getDecade.js";
export * from "./getDefaultOptions.js";
export * from "./getHours.js";
export * from "./getISODay.js";
export * from "./getISOWeek.js";
export * from "./getISOWeekYear.js";
export * from "./getISOWeeksInYear.js";
export * from "./getMilliseconds.js";
export * from "./getMinutes.js";
export * from "./getMonth.js";
export * from "./getOverlappingDaysInIntervals.js";
export * from "./getQuarter.js";
export * from "./getSeconds.js";
export * from "./getTime.js";
export * from "./getUnixTime.js";
export * from "./getWeek.js";
export * from "./getWeekOfMonth.js";
export * from "./getWeekYear.js";
export * from "./getWeeksInMonth.js";
export * from "./getYear.js";
export * from "./hoursToMilliseconds.js";
export * from "./hoursToMinutes.js";
export * from "./hoursToSeconds.js";
export * from "./interval.js";
export * from "./intervalToDuration.js";
export * from "./intlFormat.js";
export * from "./intlFormatDistance.js";
export * from "./isAfter.js";
export * from "./isBefore.js";
export * from "./isDate.js";
export * from "./isEqual.js";
export * from "./isExists.js";
export * from "./isFirstDayOfMonth.js";
export * from "./isFriday.js";
export * from "./isFuture.js";
export * from "./isLastDayOfMonth.js";
export * from "./isLeapYear.js";
export * from "./isMatch.js";
export * from "./isMonday.js";
export * from "./isPast.js";
export * from "./isSameDay.js";
export * from "./isSameHour.js";
export * from "./isSameISOWeek.js";
export * from "./isSameISOWeekYear.js";
export * from "./isSameMinute.js";
export * from "./isSameMonth.js";
export * from "./isSameQuarter.js";
export * from "./isSameSecond.js";
export * from "./isSameWeek.js";
export * from "./isSameYear.js";
export * from "./isSaturday.js";
export * from "./isSunday.js";
export * from "./isThisHour.js";
export * from "./isThisISOWeek.js";
export * from "./isThisMinute.js";
export * from "./isThisMonth.js";
export * from "./isThisQuarter.js";
export * from "./isThisSecond.js";
export * from "./isThisWeek.js";
export * from "./isThisYear.js";
export * from "./isThursday.js";
export * from "./isToday.js";
export * from "./isTomorrow.js";
export * from "./isTuesday.js";
export * from "./isValid.js";
export * from "./isWednesday.js";
export * from "./isWeekend.js";
export * from "./isWithinInterval.js";
export * from "./isYesterday.js";
export * from "./lastDayOfDecade.js";
export * from "./lastDayOfISOWeek.js";
export * from "./lastDayOfISOWeekYear.js";
export * from "./lastDayOfMonth.js";
export * from "./lastDayOfQuarter.js";
export * from "./lastDayOfWeek.js";
export * from "./lastDayOfYear.js";
export * from "./lightFormat.js";
export * from "./max.js";
export * from "./milliseconds.js";
export * from "./millisecondsToHours.js";
export * from "./millisecondsToMinutes.js";
export * from "./millisecondsToSeconds.js";
export * from "./min.js";
export * from "./minutesToHours.js";
export * from "./minutesToMilliseconds.js";
export * from "./minutesToSeconds.js";
export * from "./monthsToQuarters.js";
export * from "./monthsToYears.js";
export * from "./nextDay.js";
export * from "./nextFriday.js";
export * from "./nextMonday.js";
export * from "./nextSaturday.js";
export * from "./nextSunday.js";
export * from "./nextThursday.js";
export * from "./nextTuesday.js";
export * from "./nextWednesday.js";
export * from "./parse.js";
export * from "./parseISO.js";
export * from "./parseJSON.js";
export * from "./previousDay.js";
export * from "./previousFriday.js";
export * from "./previousMonday.js";
export * from "./previousSaturday.js";
export * from "./previousSunday.js";
export * from "./previousThursday.js";
export * from "./previousTuesday.js";
export * from "./previousWednesday.js";
export * from "./quartersToMonths.js";
export * from "./quartersToYears.js";
export * from "./roundToNearestHours.js";
export * from "./roundToNearestMinutes.js";
export * from "./secondsToHours.js";
export * from "./secondsToMilliseconds.js";
export * from "./secondsToMinutes.js";
export * from "./set.js";
export * from "./setDate.js";
export * from "./setDay.js";
export * from "./setDayOfYear.js";
export * from "./setDefaultOptions.js";
export * from "./setHours.js";
export * from "./setISODay.js";
export * from "./setISOWeek.js";
export * from "./setISOWeekYear.js";
export * from "./setMilliseconds.js";
export * from "./setMinutes.js";
export * from "./setMonth.js";
export * from "./setQuarter.js";
export * from "./setSeconds.js";
export * from "./setWeek.js";
export * from "./setWeekYear.js";
export * from "./setYear.js";
export * from "./startOfDay.js";
export * from "./startOfDecade.js";
export * from "./startOfHour.js";
export * from "./startOfISOWeek.js";
export * from "./startOfISOWeekYear.js";
export * from "./startOfMinute.js";
export * from "./startOfMonth.js";
export * from "./startOfQuarter.js";
export * from "./startOfSecond.js";
export * from "./startOfToday.js";
export * from "./startOfTomorrow.js";
export * from "./startOfWeek.js";
export * from "./startOfWeekYear.js";
export * from "./startOfYear.js";
export * from "./startOfYesterday.js";
export * from "./sub.js";
export * from "./subBusinessDays.js";
export * from "./subDays.js";
export * from "./subHours.js";
export * from "./subISOWeekYears.js";
export * from "./subMilliseconds.js";
export * from "./subMinutes.js";
export * from "./subMonths.js";
export * from "./subQuarters.js";
export * from "./subSeconds.js";
export * from "./subWeeks.js";
export * from "./subYears.js";
export * from "./toDate.js";
export * from "./transpose.js";
export * from "./weeksToDays.js";
export * from "./yearsToDays.js";
export * from "./yearsToMonths.js";
export * from "./yearsToQuarters.js";

--- FILE: ./node_modules/date-fns/interval.cjs ---
"use strict";
exports.interval = interval;
var _index = require("./_lib/normalizeDates.cjs");

/**
 * The {@link interval} function options.
 */

/**
 * The {@link interval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the start argument,
 * then the end interval date. If a context function is passed, it uses the context
 * function return type.
 */

/**
 * @name interval
 * @category Interval Helpers
 * @summary Creates an interval object and validates its values.
 *
 * @description
 * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.
 *
 * @typeParam StartDate - Start date type.
 * @typeParam EndDate - End date type.
 * @typeParam Options - Options type.
 *
 * @param start - The start of the interval.
 * @param end - The end of the interval.
 * @param options - The options object.
 *
 * @throws `Start date is invalid` when `start` is invalid.
 * @throws `End date is invalid` when `end` is invalid.
 * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.
 *
 * @returns The normalized and validated interval object.
 */
function interval(start, end, options) {
  const [_start, _end] = (0, _index.normalizeDates)(options?.in, start, end);

  if (isNaN(+_start)) throw new TypeError("Start date is invalid");
  if (isNaN(+_end)) throw new TypeError("End date is invalid");

  if (options?.assertPositive && +_start > +_end)
    throw new TypeError("End date must be after start date");

  return { start: _start, end: _end };
}

--- FILE: ./node_modules/date-fns/interval.d.ts ---
import type { ContextOptions, DateArg, NormalizedInterval } from "./types.js";
/**
 * The {@link interval} function options.
 */
export interface IntervalOptions<ContextDate extends Date = Date>
  extends ContextOptions<ContextDate> {
  /** Asserts that the interval is positive (start is after the end). */
  assertPositive?: boolean;
}
/**
 * The {@link interval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the start argument,
 * then the end interval date. If a context function is passed, it uses the context
 * function return type.
 */
export type IntervalResult<
  StartDate extends DateArg<Date>,
  EndDate extends DateArg<Date>,
  Options extends IntervalOptions | undefined = undefined,
> = NormalizedInterval<
  Options extends IntervalOptions<infer DateType extends Date>
    ? DateType
    : StartDate extends Date
      ? StartDate
      : EndDate extends Date
        ? EndDate
        : Date
>;
/**
 * @name interval
 * @category Interval Helpers
 * @summary Creates an interval object and validates its values.
 *
 * @description
 * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.
 *
 * @typeParam StartDate - Start date type.
 * @typeParam EndDate - End date type.
 * @typeParam Options - Options type.
 *
 * @param start - The start of the interval.
 * @param end - The end of the interval.
 * @param options - The options object.
 *
 * @throws `Start date is invalid` when `start` is invalid.
 * @throws `End date is invalid` when `end` is invalid.
 * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.
 *
 * @returns The normalized and validated interval object.
 */
export declare function interval<
  StartDate extends DateArg<Date>,
  EndDate extends DateArg<Date>,
  Options extends IntervalOptions | undefined = undefined,
>(
  start: StartDate,
  end: EndDate,
  options?: Options,
): IntervalResult<StartDate, EndDate, Options>;

--- FILE: ./node_modules/date-fns/interval.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";

/**
 * The {@link interval} function options.
 */

/**
 * The {@link interval} function result type. It resolves the proper data type.
 * It uses the first argument date object type, starting from the start argument,
 * then the end interval date. If a context function is passed, it uses the context
 * function return type.
 */

/**
 * @name interval
 * @category Interval Helpers
 * @summary Creates an interval object and validates its values.
 *
 * @description
 * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.
 *
 * @typeParam StartDate - Start date type.
 * @typeParam EndDate - End date type.
 * @typeParam Options - Options type.
 *
 * @param start - The start of the interval.
 * @param end - The end of the interval.
 * @param options - The options object.
 *
 * @throws `Start date is invalid` when `start` is invalid.
 * @throws `End date is invalid` when `end` is invalid.
 * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.
 *
 * @returns The normalized and validated interval object.
 */
export function interval(start, end, options) {
  const [_start, _end] = normalizeDates(options?.in, start, end);

  if (isNaN(+_start)) throw new TypeError("Start date is invalid");
  if (isNaN(+_end)) throw new TypeError("End date is invalid");

  if (options?.assertPositive && +_start > +_end)
    throw new TypeError("End date must be after start date");

  return { start: _start, end: _end };
}

// Fallback for modularized imports:
export default interval;

--- FILE: ./node_modules/date-fns/intervalToDuration.cjs ---
"use strict";
exports.intervalToDuration = intervalToDuration;
var _index = require("./_lib/normalizeInterval.cjs");
var _index2 = require("./add.cjs");
var _index3 = require("./differenceInDays.cjs");
var _index4 = require("./differenceInHours.cjs");
var _index5 = require("./differenceInMinutes.cjs");
var _index6 = require("./differenceInMonths.cjs");
var _index7 = require("./differenceInSeconds.cjs");
var _index8 = require("./differenceInYears.cjs");

/**
 * The {@link intervalToDuration} function options.
 */

/**
 * @name intervalToDuration
 * @category Common Helpers
 * @summary Convert interval to duration
 *
 * @description
 * Convert an interval object to a duration object.
 *
 * @param interval - The interval to convert to duration
 * @param options - The context options
 *
 * @returns The duration object
 *
 * @example
 * // Get the duration between January 15, 1929 and April 4, 1968.
 * intervalToDuration({
 *   start: new Date(1929, 0, 15, 12, 0, 0),
 *   end: new Date(1968, 3, 4, 19, 5, 0)
 * });
 * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }
 */
function intervalToDuration(interval, options) {
  const { start, end } = (0, _index.normalizeInterval)(options?.in, interval);
  const duration = {};

  const years = (0, _index8.differenceInYears)(end, start);
  if (years) duration.years = years;

  const remainingMonths = (0, _index2.add)(start, { years: duration.years });
  const months = (0, _index6.differenceInMonths)(end, remainingMonths);
  if (months) duration.months = months;

  const remainingDays = (0, _index2.add)(remainingMonths, {
    months: duration.months,
  });
  const days = (0, _index3.differenceInDays)(end, remainingDays);
  if (days) duration.days = days;

  const remainingHours = (0, _index2.add)(remainingDays, {
    days: duration.days,
  });
  const hours = (0, _index4.differenceInHours)(end, remainingHours);
  if (hours) duration.hours = hours;

  const remainingMinutes = (0, _index2.add)(remainingHours, {
    hours: duration.hours,
  });
  const minutes = (0, _index5.differenceInMinutes)(end, remainingMinutes);
  if (minutes) duration.minutes = minutes;

  const remainingSeconds = (0, _index2.add)(remainingMinutes, {
    minutes: duration.minutes,
  });
  const seconds = (0, _index7.differenceInSeconds)(end, remainingSeconds);
  if (seconds) duration.seconds = seconds;

  return duration;
}

--- FILE: ./node_modules/date-fns/intervalToDuration.d.ts ---
import type { ContextOptions, Duration, Interval } from "./types.js";
/**
 * The {@link intervalToDuration} function options.
 */
export interface IntervalToDurationOptions extends ContextOptions<Date> {}
/**
 * @name intervalToDuration
 * @category Common Helpers
 * @summary Convert interval to duration
 *
 * @description
 * Convert an interval object to a duration object.
 *
 * @param interval - The interval to convert to duration
 * @param options - The context options
 *
 * @returns The duration object
 *
 * @example
 * // Get the duration between January 15, 1929 and April 4, 1968.
 * intervalToDuration({
 *   start: new Date(1929, 0, 15, 12, 0, 0),
 *   end: new Date(1968, 3, 4, 19, 5, 0)
 * });
 * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }
 */
export declare function intervalToDuration(
  interval: Interval,
  options?: IntervalToDurationOptions | undefined,
): Duration;

--- FILE: ./node_modules/date-fns/intervalToDuration.js ---
import { normalizeInterval } from "./_lib/normalizeInterval.js";
import { add } from "./add.js";
import { differenceInDays } from "./differenceInDays.js";
import { differenceInHours } from "./differenceInHours.js";
import { differenceInMinutes } from "./differenceInMinutes.js";
import { differenceInMonths } from "./differenceInMonths.js";
import { differenceInSeconds } from "./differenceInSeconds.js";
import { differenceInYears } from "./differenceInYears.js";

/**
 * The {@link intervalToDuration} function options.
 */

/**
 * @name intervalToDuration
 * @category Common Helpers
 * @summary Convert interval to duration
 *
 * @description
 * Convert an interval object to a duration object.
 *
 * @param interval - The interval to convert to duration
 * @param options - The context options
 *
 * @returns The duration object
 *
 * @example
 * // Get the duration between January 15, 1929 and April 4, 1968.
 * intervalToDuration({
 *   start: new Date(1929, 0, 15, 12, 0, 0),
 *   end: new Date(1968, 3, 4, 19, 5, 0)
 * });
 * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }
 */
export function intervalToDuration(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);
  const duration = {};

  const years = differenceInYears(end, start);
  if (years) duration.years = years;

  const remainingMonths = add(start, { years: duration.years });
  const months = differenceInMonths(end, remainingMonths);
  if (months) duration.months = months;

  const remainingDays = add(remainingMonths, { months: duration.months });
  const days = differenceInDays(end, remainingDays);
  if (days) duration.days = days;

  const remainingHours = add(remainingDays, { days: duration.days });
  const hours = differenceInHours(end, remainingHours);
  if (hours) duration.hours = hours;

  const remainingMinutes = add(remainingHours, { hours: duration.hours });
  const minutes = differenceInMinutes(end, remainingMinutes);
  if (minutes) duration.minutes = minutes;

  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });
  const seconds = differenceInSeconds(end, remainingSeconds);
  if (seconds) duration.seconds = seconds;

  return duration;
}

// Fallback for modularized imports:
export default intervalToDuration;

--- FILE: ./node_modules/date-fns/intlFormat.cjs ---
"use strict";
exports.intlFormat = intlFormat;
var _index = require("./toDate.cjs");

/**
 * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).
 * @deprecated
 *
 * [TODO] Remove in v4
 */

/**
 * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)
 */

/**
 * The locale options.
 */

/**
 * @name intlFormat
 * @category Common Helpers
 * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).
 *
 * @description
 * Return the formatted date string in the given format.
 * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.
 * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)
 *
 * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.
 *
 * @param date - The date to format
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in middle-endian format:
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))
 * //=> 10/4/2019
 */

/**
 * @param date - The date to format
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in Korean.
 * // Convert the date with locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   locale: 'ko-KR',
 * })
 * //=> 2019. 10. 4.
 */

/**
 * @param date - The date to format
 * @param formatOptions - The format options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019.
 * // Convert the date with format's options.
 * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   year: 'numeric',
 *   month: 'numeric',
 *   day: 'numeric',
 *   hour: 'numeric',
 * })
 * //=> 10/4/2019, 12 PM
 */

/**
 * @param date - The date to format
 * @param formatOptions - The format options
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in German.
 * // Convert the date with format's options and locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   weekday: 'long',
 *   year: 'numeric',
 *   month: 'long',
 *   day: 'numeric',
 * }, {
 *   locale: 'de-DE',
 * })
 * //=> Freitag, 4. Oktober 2019
 */

function intlFormat(date, formatOrLocale, localeOptions) {
  let formatOptions;

  if (isFormatOptions(formatOrLocale)) {
    formatOptions = formatOrLocale;
  } else {
    localeOptions = formatOrLocale;
  }

  return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format(
    (0, _index.toDate)(date),
  );
}

function isFormatOptions(opts) {
  return opts !== undefined && !("locale" in opts);
}

--- FILE: ./node_modules/date-fns/intlFormat.d.ts ---
import type { DateArg, MaybeArray } from "./types.js";
/**
 * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).
 * @deprecated
 *
 * [TODO] Remove in v4
 */
export type IntlFormatLocale = Intl.ResolvedDateTimeFormatOptions["locale"];
/**
 * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)
 */
export type IntlFormatFormatOptions = Intl.DateTimeFormatOptions;
/**
 * The locale options.
 */
export interface IntlFormatLocaleOptions {
  /** The locales to use (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument) */
  locale: MaybeArray<Intl.ResolvedDateTimeFormatOptions["locale"]>;
}
/**
 * @name intlFormat
 * @category Common Helpers
 * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).
 *
 * @description
 * Return the formatted date string in the given format.
 * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.
 * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)
 *
 * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.
 *
 * @param date - The date to format
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in middle-endian format:
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))
 * //=> 10/4/2019
 */
export declare function intlFormat(date: DateArg<Date> & {}): string;
/**
 * @param date - The date to format
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in Korean.
 * // Convert the date with locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   locale: 'ko-KR',
 * })
 * //=> 2019. 10. 4.
 */
export declare function intlFormat(
  date: DateArg<Date> & {},
  localeOptions: IntlFormatLocaleOptions,
): string;
/**
 * @param date - The date to format
 * @param formatOptions - The format options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019.
 * // Convert the date with format's options.
 * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   year: 'numeric',
 *   month: 'numeric',
 *   day: 'numeric',
 *   hour: 'numeric',
 * })
 * //=> 10/4/2019, 12 PM
 */
export declare function intlFormat(
  date: DateArg<Date> & {},
  formatOptions: IntlFormatFormatOptions,
): string;
/**
 * @param date - The date to format
 * @param formatOptions - The format options
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in German.
 * // Convert the date with format's options and locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   weekday: 'long',
 *   year: 'numeric',
 *   month: 'long',
 *   day: 'numeric',
 * }, {
 *   locale: 'de-DE',
 * })
 * //=> Freitag, 4. Oktober 2019
 */
export declare function intlFormat(
  date: DateArg<Date> & {},
  formatOptions: IntlFormatFormatOptions,
  localeOptions: IntlFormatLocaleOptions,
): string;

--- FILE: ./node_modules/date-fns/intlFormat.js ---
import { toDate } from "./toDate.js";

/**
 * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).
 * @deprecated
 *
 * [TODO] Remove in v4
 */

/**
 * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)
 */

/**
 * The locale options.
 */

/**
 * @name intlFormat
 * @category Common Helpers
 * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).
 *
 * @description
 * Return the formatted date string in the given format.
 * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.
 * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)
 *
 * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.
 *
 * @param date - The date to format
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in middle-endian format:
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))
 * //=> 10/4/2019
 */

/**
 * @param date - The date to format
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in Korean.
 * // Convert the date with locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   locale: 'ko-KR',
 * })
 * //=> 2019. 10. 4.
 */

/**
 * @param date - The date to format
 * @param formatOptions - The format options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019.
 * // Convert the date with format's options.
 * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   year: 'numeric',
 *   month: 'numeric',
 *   day: 'numeric',
 *   hour: 'numeric',
 * })
 * //=> 10/4/2019, 12 PM
 */

/**
 * @param date - The date to format
 * @param formatOptions - The format options
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in German.
 * // Convert the date with format's options and locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   weekday: 'long',
 *   year: 'numeric',
 *   month: 'long',
 *   day: 'numeric',
 * }, {
 *   locale: 'de-DE',
 * })
 * //=> Freitag, 4. Oktober 2019
 */

export function intlFormat(date, formatOrLocale, localeOptions) {
  let formatOptions;

  if (isFormatOptions(formatOrLocale)) {
    formatOptions = formatOrLocale;
  } else {
    localeOptions = formatOrLocale;
  }

  return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format(
    toDate(date),
  );
}

function isFormatOptions(opts) {
  return opts !== undefined && !("locale" in opts);
}

// Fallback for modularized imports:
export default intlFormat;

--- FILE: ./node_modules/date-fns/intlFormatDistance.cjs ---
"use strict";
exports.intlFormatDistance = intlFormatDistance;
var _index = require("./_lib/normalizeDates.cjs");
var _index2 = require("./constants.cjs");

var _index3 = require("./differenceInCalendarDays.cjs");
var _index4 = require("./differenceInCalendarMonths.cjs");
var _index5 = require("./differenceInCalendarQuarters.cjs");
var _index6 = require("./differenceInCalendarWeeks.cjs");
var _index7 = require("./differenceInCalendarYears.cjs");
var _index8 = require("./differenceInHours.cjs");
var _index9 = require("./differenceInMinutes.cjs");
var _index10 = require("./differenceInSeconds.cjs");

/**
 * The {@link intlFormatDistance} function options.
 */

/**
 * The unit used to format the distance in {@link intlFormatDistance}.
 */

/**
 * @name intlFormatDistance
 * @category Common Helpers
 * @summary Formats distance between two dates in a human-readable format
 * @description
 * The function calculates the difference between two dates and formats it as a human-readable string.
 *
 * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.
 *
 * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.
 *
 * See the table below for the unit picking logic:
 *
 * | Distance between dates | Result (past)  | Result (future) |
 * | ---------------------- | -------------- | --------------- |
 * | 0 seconds              | now            | now             |
 * | 1-59 seconds           | X seconds ago  | in X seconds    |
 * | 1-59 minutes           | X minutes ago  | in X minutes    |
 * | 1-23 hours             | X hours ago    | in X hours      |
 * | 1 day                  | yesterday      | tomorrow        |
 * | 2-6 days               | X days ago     | in X days       |
 * | 7 days                 | last week      | next week       |
 * | 8 days-1 month         | X weeks ago    | in X weeks      |
 * | 1 month                | last month     | next month      |
 * | 2-3 months             | X months ago   | in X months     |
 * | 1 quarter              | last quarter   | next quarter    |
 * | 2-3 quarters           | X quarters ago | in X quarters   |
 * | 1 year                 | last year      | next year       |
 * | 2+ years               | X years ago    | in X years      |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with.
 * @param options - An object with options.
 * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)
 * The narrow one could be similar to the short one for some locales.
 *
 * @returns The distance in words according to language-sensitive relative time formatting.
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must not be invalid Unit
 * @throws `options.locale` must not be invalid locale
 * @throws `options.localeMatcher` must not be invalid localeMatcher
 * @throws `options.numeric` must not be invalid numeric
 * @throws `options.style` must not be invalid style
 *
 * @example
 * // What is the distance between the dates when the fist date is after the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0)
 * )
 * //=> 'in 1 hour'
 *
 * // What is the distance between the dates when the fist date is before the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0)
 * )
 * //=> '1 hour ago'
 *
 * @example
 * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return "next year"
 * intlFormatDistance(
 *   new Date(1987, 6, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { unit: 'quarter' }
 * )
 * //=> 'in 5 quarters'
 *
 * @example
 * // Use the locale option to get the result in Spanish. Without setting it, the example would return "in 1 hour".
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { locale: 'es' }
 * )
 * //=> 'dentro de 1 hora'
 *
 * @example
 * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return "tomorrow".
 * intlFormatDistance(
 *   new Date(1986, 3, 5, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { numeric: 'always' }
 * )
 * //=> 'in 1 day'
 *
 * @example
 * // Use the style option to force the function to use short values. Without setting it, the example would return "in 2 years".
 * intlFormatDistance(
 *   new Date(1988, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { style: 'short' }
 * )
 * //=> 'in 2 yr'
 */
function intlFormatDistance(laterDate, earlierDate, options) {
  let value = 0;
  let unit;

  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  if (!options?.unit) {
    // Get the unit based on diffInSeconds calculations if no unit is specified
    const diffInSeconds = (0, _index10.differenceInSeconds)(
      laterDate_,
      earlierDate_,
    ); // The smallest unit

    if (Math.abs(diffInSeconds) < _index2.secondsInMinute) {
      value = (0, _index10.differenceInSeconds)(laterDate_, earlierDate_);
      unit = "second";
    } else if (Math.abs(diffInSeconds) < _index2.secondsInHour) {
      value = (0, _index9.differenceInMinutes)(laterDate_, earlierDate_);
      unit = "minute";
    } else if (
      Math.abs(diffInSeconds) < _index2.secondsInDay &&
      Math.abs(
        (0, _index3.differenceInCalendarDays)(laterDate_, earlierDate_),
      ) < 1
    ) {
      value = (0, _index8.differenceInHours)(laterDate_, earlierDate_);
      unit = "hour";
    } else if (
      Math.abs(diffInSeconds) < _index2.secondsInWeek &&
      (value = (0, _index3.differenceInCalendarDays)(
        laterDate_,
        earlierDate_,
      )) &&
      Math.abs(value) < 7
    ) {
      unit = "day";
    } else if (Math.abs(diffInSeconds) < _index2.secondsInMonth) {
      value = (0, _index6.differenceInCalendarWeeks)(laterDate_, earlierDate_);
      unit = "week";
    } else if (Math.abs(diffInSeconds) < _index2.secondsInQuarter) {
      value = (0, _index4.differenceInCalendarMonths)(laterDate_, earlierDate_);
      unit = "month";
    } else if (Math.abs(diffInSeconds) < _index2.secondsInYear) {
      if (
        (0, _index5.differenceInCalendarQuarters)(laterDate_, earlierDate_) < 4
      ) {
        // To filter out cases that are less than a year but match 4 quarters
        value = (0, _index5.differenceInCalendarQuarters)(
          laterDate_,
          earlierDate_,
        );
        unit = "quarter";
      } else {
        value = (0, _index7.differenceInCalendarYears)(
          laterDate_,
          earlierDate_,
        );
        unit = "year";
      }
    } else {
      value = (0, _index7.differenceInCalendarYears)(laterDate_, earlierDate_);
      unit = "year";
    }
  } else {
    // Get the value if unit is specified
    unit = options?.unit;
    if (unit === "second") {
      value = (0, _index10.differenceInSeconds)(laterDate_, earlierDate_);
    } else if (unit === "minute") {
      value = (0, _index9.differenceInMinutes)(laterDate_, earlierDate_);
    } else if (unit === "hour") {
      value = (0, _index8.differenceInHours)(laterDate_, earlierDate_);
    } else if (unit === "day") {
      value = (0, _index3.differenceInCalendarDays)(laterDate_, earlierDate_);
    } else if (unit === "week") {
      value = (0, _index6.differenceInCalendarWeeks)(laterDate_, earlierDate_);
    } else if (unit === "month") {
      value = (0, _index4.differenceInCalendarMonths)(laterDate_, earlierDate_);
    } else if (unit === "quarter") {
      value = (0, _index5.differenceInCalendarQuarters)(
        laterDate_,
        earlierDate_,
      );
    } else if (unit === "year") {
      value = (0, _index7.differenceInCalendarYears)(laterDate_, earlierDate_);
    }
  }

  const rtf = new Intl.RelativeTimeFormat(options?.locale, {
    numeric: "auto",
    ...options,
  });

  return rtf.format(value, unit);
}

--- FILE: ./node_modules/date-fns/intlFormatDistance.d.ts ---
import type { ContextOptions, DateArg, MaybeArray } from "./types.js";
/**
 * The {@link intlFormatDistance} function options.
 */
export interface IntlFormatDistanceOptions
  extends Intl.RelativeTimeFormatOptions,
    ContextOptions<Date> {
  /** Force the distance unit */
  unit?: IntlFormatDistanceUnit;
  /** The locales to use (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument) */
  locale?: MaybeArray<Intl.ResolvedDateTimeFormatOptions["locale"]>;
}
/**
 * The unit used to format the distance in {@link intlFormatDistance}.
 */
export type IntlFormatDistanceUnit =
  | "year"
  | "quarter"
  | "month"
  | "week"
  | "day"
  | "hour"
  | "minute"
  | "second";
/**
 * @name intlFormatDistance
 * @category Common Helpers
 * @summary Formats distance between two dates in a human-readable format
 * @description
 * The function calculates the difference between two dates and formats it as a human-readable string.
 *
 * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.
 *
 * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.
 *
 * See the table below for the unit picking logic:
 *
 * | Distance between dates | Result (past)  | Result (future) |
 * | ---------------------- | -------------- | --------------- |
 * | 0 seconds              | now            | now             |
 * | 1-59 seconds           | X seconds ago  | in X seconds    |
 * | 1-59 minutes           | X minutes ago  | in X minutes    |
 * | 1-23 hours             | X hours ago    | in X hours      |
 * | 1 day                  | yesterday      | tomorrow        |
 * | 2-6 days               | X days ago     | in X days       |
 * | 7 days                 | last week      | next week       |
 * | 8 days-1 month         | X weeks ago    | in X weeks      |
 * | 1 month                | last month     | next month      |
 * | 2-3 months             | X months ago   | in X months     |
 * | 1 quarter              | last quarter   | next quarter    |
 * | 2-3 quarters           | X quarters ago | in X quarters   |
 * | 1 year                 | last year      | next year       |
 * | 2+ years               | X years ago    | in X years      |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with.
 * @param options - An object with options.
 * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)
 * The narrow one could be similar to the short one for some locales.
 *
 * @returns The distance in words according to language-sensitive relative time formatting.
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must not be invalid Unit
 * @throws `options.locale` must not be invalid locale
 * @throws `options.localeMatcher` must not be invalid localeMatcher
 * @throws `options.numeric` must not be invalid numeric
 * @throws `options.style` must not be invalid style
 *
 * @example
 * // What is the distance between the dates when the fist date is after the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0)
 * )
 * //=> 'in 1 hour'
 *
 * // What is the distance between the dates when the fist date is before the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0)
 * )
 * //=> '1 hour ago'
 *
 * @example
 * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return "next year"
 * intlFormatDistance(
 *   new Date(1987, 6, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { unit: 'quarter' }
 * )
 * //=> 'in 5 quarters'
 *
 * @example
 * // Use the locale option to get the result in Spanish. Without setting it, the example would return "in 1 hour".
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { locale: 'es' }
 * )
 * //=> 'dentro de 1 hora'
 *
 * @example
 * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return "tomorrow".
 * intlFormatDistance(
 *   new Date(1986, 3, 5, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { numeric: 'always' }
 * )
 * //=> 'in 1 day'
 *
 * @example
 * // Use the style option to force the function to use short values. Without setting it, the example would return "in 2 years".
 * intlFormatDistance(
 *   new Date(1988, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { style: 'short' }
 * )
 * //=> 'in 2 yr'
 */
export declare function intlFormatDistance(
  laterDate: DateArg<Date> & {},
  earlierDate: DateArg<Date> & {},
  options?: IntlFormatDistanceOptions,
): string;

--- FILE: ./node_modules/date-fns/intlFormatDistance.js ---
import { normalizeDates } from "./_lib/normalizeDates.js";
import {
  secondsInDay,
  secondsInHour,
  secondsInMinute,
  secondsInMonth,
  secondsInQuarter,
  secondsInWeek,
  secondsInYear,
} from "./constants.js";
import { differenceInCalendarDays } from "./differenceInCalendarDays.js";
import { differenceInCalendarMonths } from "./differenceInCalendarMonths.js";
import { differenceInCalendarQuarters } from "./differenceInCalendarQuarters.js";
import { differenceInCalendarWeeks } from "./differenceInCalendarWeeks.js";
import { differenceInCalendarYears } from "./differenceInCalendarYears.js";
import { differenceInHours } from "./differenceInHours.js";
import { differenceInMinutes } from "./differenceInMinutes.js";
import { differenceInSeconds } from "./differenceInSeconds.js";

/**
 * The {@link intlFormatDistance} function options.
 */

/**
 * The unit used to format the distance in {@link intlFormatDistance}.
 */

/**
 * @name intlFormatDistance
 * @category Common Helpers
 * @summary Formats distance between two dates in a human-readable format
 * @description
 * The function calculates the difference between two dates and formats it as a human-readable string.
 *
 * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.
 *
 * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.
 *
 * See the table below for the unit picking logic:
 *
 * | Distance between dates | Result (past)  | Result (future) |
 * | ---------------------- | -------------- | --------------- |
 * | 0 seconds              | now            | now             |
 * | 1-59 seconds           | X seconds ago  | in X seconds    |
 * | 1-59 minutes           | X minutes ago  | in X minutes    |
 * | 1-23 hours             | X hours ago    | in X hours      |
 * | 1 day                  | yesterday      | tomorrow        |
 * | 2-6 days               | X days ago     | in X days       |
 * | 7 days                 | last week      | next week       |
 * | 8 days-1 month         | X weeks ago    | in X weeks      |
 * | 1 month                | last month     | next month      |
 * | 2-3 months             | X months ago   | in X months     |
 * | 1 quarter              | last quarter   | next quarter    |
 * | 2-3 quarters           | X quarters ago | in X quarters   |
 * | 1 year                 | last year      | next year       |
 * | 2+ years               | X years ago    | in X years      |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with.
 * @param options - An object with options.
 * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)
 * The narrow one could be similar to the short one for some locales.
 *
 * @returns The distance in words according to language-sensitive relative time formatting.
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must not be invalid Unit
 * @throws `options.locale` must not be invalid locale
 * @throws `options.localeMatcher` must not be invalid localeMatcher
 * @throws `options.numeric` must not be invalid numeric
 * @throws `options.style` must not be invalid style
 *
 * @example
 * // What is the distance between the dates when the fist date is after the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0)
 * )
 * //=> 'in 1 hour'
 *
 * // What is the distance between the dates when the fist date is before the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0)
 * )
 * //=> '1 hour ago'
 *
 * @example
 * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return "next year"
 * intlFormatDistance(
 *   new Date(1987, 6, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { unit: 'quarter' }
 * )
 * //=> 'in 5 quarters'
 *
 * @example
 * // Use the locale option to get the result in Spanish. Without setting it, the example would return "in 1 hour".
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { locale: 'es' }
 * )
 * //=> 'dentro de 1 hora'
 *
 * @example
 * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return "tomorrow".
 * intlFormatDistance(
 *   new Date(1986, 3, 5, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { numeric: 'always' }
 * )
 * //=> 'in 1 day'
 *
 * @example
 * // Use the style option to force the function to use short values. Without setting it, the example would return "in 2 years".
 * intlFormatDistance(
 *   new Date(1988, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { style: 'short' }
 * )
 * //=> 'in 2 yr'
 */
export function intlFormatDistance(laterDate, earlierDate, options) {
  let value = 0;
  let unit;

  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  if (!options?.unit) {
    // Get the unit based on diffInSeconds calculations if no unit is specified
    const diffInSeconds = differenceInSeconds(laterDate_, earlierDate_); // The smallest unit

    if (Math.abs(diffInSeconds) < secondsInMinute) {
      value = differenceInSeconds(laterDate_, earlierDate_);
      unit = "second";
    } else if (Math.abs(diffInSeconds) < secondsInHour) {
      value = differenceInMinutes(laterDate_, earlierDate_);
      unit = "minute";
    } else if (
      Math.abs(diffInSeconds) < secondsInDay &&
      Math.abs(differenceInCalendarDays(laterDate_, earlierDate_)) < 1
    ) {
      value = differenceInHours(laterDate_, earlierDate_);
      unit = "hour";
    } else if (
      Math.abs(diffInSeconds) < secondsInWeek &&
      (value = differenceInCalendarDays(laterDate_, earlierDate_)) &&
      Math.abs(value) < 7
    ) {
      unit = "day";
    } else if (Math.abs(diffInSeconds) < secondsInMonth) {
      value = differenceInCalendarWeeks(laterDate_, earlierDate_);
      unit = "week";
    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {
      value = differenceInCalendarMonths(laterDate_, earlierDate_);
      unit = "month";
    } else if (Math.abs(diffInSeconds) < secondsInYear) {
      if (differenceInCalendarQuarters(laterDate_, earlierDate_) < 4) {
        // To filter out cases that are less than a year but match 4 quarters
        value = differenceInCalendarQuarters(laterDate_, earlierDate_);
        unit = "quarter";
      } else {
        value = differenceInCalendarYears(laterDate_, earlierDate_);
        unit = "year";
      }
    } else {
      value = differenceInCalendarYears(laterDate_, earlierDate_);
      unit = "year";
    }
  } else {
    // Get the value if unit is specified
    unit = options?.unit;
    if (unit === "second") {
      value = differenceInSeconds(laterDate_, earlierDate_);
    } else if (unit === "minute") {
      value = differenceInMinutes(laterDate_, earlierDate_);
    } else if (unit === "hour") {
      value = differenceInHours(laterDate_, earlierDate_);
    } else if (unit === "day") {
      value = differenceInCalendarDays(laterDate_, earlierDate_);
    } else if (unit === "week") {
      value = differenceInCalendarWeeks(laterDate_, earlierDate_);
    } else if (unit === "month") {
      value = differenceInCalendarMonths(laterDate_, earlierDate_);
    } else if (unit === "quarter") {
      value = differenceInCalendarQuarters(laterDate_, earlierDate_);
    } else if (unit === "year") {
      value = differenceInCalendarYears(laterDate_, earlierDate_);
    }
  }

  const rtf = new Intl.RelativeTimeFormat(options?.locale, {
    numeric: "auto",
    ...options,
  });

  return rtf.format(value, unit);
}

// Fallback for modularized imports:
export default intlFormatDistance;

--- FILE: ./node_modules/date-fns/isAfter.cjs ---
"use strict";
exports.isAfter = isAfter;
var _index = require("./toDate.cjs");

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param date - The date that should be after the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter(date, dateToCompare) {
  return +(0, _index.toDate)(date) > +(0, _index.toDate)(dateToCompare);
}

--- FILE: ./node_modules/date-fns/isAfter.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param date - The date that should be after the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
export declare function isAfter(
  date: DateArg<Date> & {},
  dateToCompare: DateArg<Date> & {},
): boolean;

--- FILE: ./node_modules/date-fns/isAfter.js ---
import { toDate } from "./toDate.js";

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param date - The date that should be after the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
export function isAfter(date, dateToCompare) {
  return +toDate(date) > +toDate(dateToCompare);
}

// Fallback for modularized imports:
export default isAfter;

--- FILE: ./node_modules/date-fns/isBefore.cjs ---
"use strict";
exports.isBefore = isBefore;
var _index = require("./toDate.cjs");

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param date - The date that should be before the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore(date, dateToCompare) {
  return +(0, _index.toDate)(date) < +(0, _index.toDate)(dateToCompare);
}

--- FILE: ./node_modules/date-fns/isBefore.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param date - The date that should be before the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
export declare function isBefore(
  date: DateArg<Date> & {},
  dateToCompare: DateArg<Date> & {},
): boolean;

--- FILE: ./node_modules/date-fns/isBefore.js ---
import { toDate } from "./toDate.js";

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param date - The date that should be before the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
export function isBefore(date, dateToCompare) {
  return +toDate(date) < +toDate(dateToCompare);
}

// Fallback for modularized imports:
export default isBefore;

--- FILE: ./node_modules/date-fns/isDate.cjs ---
"use strict";
exports.isDate = isDate; /**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
  return (
    value instanceof Date ||
    (typeof value === "object" &&
      Object.prototype.toString.call(value) === "[object Date]")
  );
}

--- FILE: ./node_modules/date-fns/isDate.d.ts ---
/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
export declare function isDate(value: unknown): value is Date;

--- FILE: ./node_modules/date-fns/isDate.js ---
/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
export function isDate(value) {
  return (
    value instanceof Date ||
    (typeof value === "object" &&
      Object.prototype.toString.call(value) === "[object Date]")
  );
}

// Fallback for modularized imports:
export default isDate;

--- FILE: ./node_modules/date-fns/isEqual.cjs ---
"use strict";
exports.isEqual = isEqual;
var _index = require("./toDate.cjs");

/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * const result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
function isEqual(leftDate, rightDate) {
  return +(0, _index.toDate)(leftDate) === +(0, _index.toDate)(rightDate);
}

--- FILE: ./node_modules/date-fns/isEqual.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * const result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
export declare function isEqual(
  leftDate: DateArg<Date> & {},
  rightDate: DateArg<Date> & {},
): boolean;

--- FILE: ./node_modules/date-fns/isEqual.js ---
import { toDate } from "./toDate.js";

/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * const result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
export function isEqual(leftDate, rightDate) {
  return +toDate(leftDate) === +toDate(rightDate);
}

// Fallback for modularized imports:
export default isEqual;

--- FILE: ./node_modules/date-fns/isExists.cjs ---
"use strict";
exports.isExists = isExists; /**
 * @name isExists
 * @category Common Helpers
 * @summary Is the given date exists?
 *
 * @description
 * Checks if the given arguments convert to an existing date.
 *
 * @param year - The year of the date to check
 * @param month - The month of the date to check
 * @param day - The day of the date to check
 *
 * @returns `true` if the date exists
 *
 * @example
 * // For the valid date:
 * const result = isExists(2018, 0, 31)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isExists(2018, 1, 31)
 * //=> false
 */
function isExists(year, month, day) {
  const date = new Date(year, month, day);
  return (
    date.getFullYear() === year &&
    date.getMonth() === month &&
    date.getDate() === day
  );
}

--- FILE: ./node_modules/date-fns/isExists.d.ts ---
/**
 * @name isExists
 * @category Common Helpers
 * @summary Is the given date exists?
 *
 * @description
 * Checks if the given arguments convert to an existing date.
 *
 * @param year - The year of the date to check
 * @param month - The month of the date to check
 * @param day - The day of the date to check
 *
 * @returns `true` if the date exists
 *
 * @example
 * // For the valid date:
 * const result = isExists(2018, 0, 31)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isExists(2018, 1, 31)
 * //=> false
 */
export declare function isExists(
  year: number,
  month: number,
  day: number,
): boolean;

--- FILE: ./node_modules/date-fns/isExists.js ---
/**
 * @name isExists
 * @category Common Helpers
 * @summary Is the given date exists?
 *
 * @description
 * Checks if the given arguments convert to an existing date.
 *
 * @param year - The year of the date to check
 * @param month - The month of the date to check
 * @param day - The day of the date to check
 *
 * @returns `true` if the date exists
 *
 * @example
 * // For the valid date:
 * const result = isExists(2018, 0, 31)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isExists(2018, 1, 31)
 * //=> false
 */
export function isExists(year, month, day) {
  const date = new Date(year, month, day);
  return (
    date.getFullYear() === year &&
    date.getMonth() === month &&
    date.getDate() === day
  );
}

// Fallback for modularized imports:
export default isExists;

--- FILE: ./node_modules/date-fns/isFirstDayOfMonth.cjs ---
"use strict";
exports.isFirstDayOfMonth = isFirstDayOfMonth;
var _index = require("./toDate.cjs");

/**
 * The {@link isFirstDayOfMonth} function options.
 */

/**
 * @name isFirstDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * const result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */
function isFirstDayOfMonth(date, options) {
  return (0, _index.toDate)(date, options?.in).getDate() === 1;
}

--- FILE: ./node_modules/date-fns/isFirstDayOfMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link isFirstDayOfMonth} function options.
 */
export interface IsFirstDayOfMonthOptions extends ContextOptions<Date> {}
/**
 * @name isFirstDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * const result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */
export declare function isFirstDayOfMonth(
  date: DateArg<Date> & {},
  options?: IsFirstDayOfMonthOptions | undefined,
): boolean;

--- FILE: ./node_modules/date-fns/isFirstDayOfMonth.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link isFirstDayOfMonth} function options.
 */

/**
 * @name isFirstDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * const result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */
export function isFirstDayOfMonth(date, options) {
  return toDate(date, options?.in).getDate() === 1;
}

// Fallback for modularized imports:
export default isFirstDayOfMonth;

--- FILE: ./node_modules/date-fns/isFriday.cjs ---
"use strict";
exports.isFriday = isFriday;
var _index = require("./toDate.cjs");

/**
 * The {@link isFriday} function options.
 */

/**
 * @name isFriday
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * const result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */
function isFriday(date, options) {
  return (0, _index.toDate)(date, options?.in).getDay() === 5;
}

--- FILE: ./node_modules/date-fns/isFriday.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
/**
 * The {@link isFriday} function options.
 */
export interface IsFridayOptions extends ContextOptions<Date> {}
/**
 * @name isFriday
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * const result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */
export declare function isFriday(
  date: DateArg<Date> & {},
  options?: IsFridayOptions | undefined,
): boolean;

--- FILE: ./node_modules/date-fns/isFriday.js ---
import { toDate } from "./toDate.js";

/**
 * The {@link isFriday} function options.
 */

/**
 * @name isFriday
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * const result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */
export function isFriday(date, options) {
  return toDate(date, options?.in).getDay() === 5;
}

// Fallback for modularized imports:
export default isFriday;

--- FILE: ./node_modules/date-fns/isFuture.cjs ---
"use strict";
exports.isFuture = isFuture;
var _index = require("./toDate.cjs");

/**
 * @name isFuture
 * @category Common Helpers
 * @summary Is the given date in the future?
 * @pure false
 *
 * @description
 * Is the given date in the future?
 *
 * @param date - The date to check
 *
 * @returns The date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * const result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */
function isFuture(date) {
  return +(0, _index.toDate)(date) > Date.now();
}

--- FILE: ./node_modules/date-fns/isFuture.d.ts ---
import type { DateArg } from "./types.js";
/**
 * @name isFuture
 * @category Common Helpers
 * @summary Is the given date in the future?
 * @pure false
 *
 * @description
 * Is the given date in the future?
 *
 * @param date - The date to check
 *
 * @returns The date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * const result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */
export declare function isFuture(date: DateArg<Date> & {}): boolean;

--- FILE: ./node_modules/date-fns/isFuture.js ---
import { toDate } from "./toDate.js";

/**
 * @name isFuture
 * @category Common Helpers
 * @summary Is the given date in the future?
 * @pure false
 *
 * @description
 * Is the given date in the future?
 *
 * @param date - The date to check
 *
 * @returns The date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * const result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */
export function isFuture(date) {
  return +toDate(date) > Date.now();
}

// Fallback for modularized imports:
export default isFuture;

--- FILE: ./node_modules/date-fns/isLastDayOfMonth.cjs ---
"use strict";
exports.isLastDayOfMonth = isLastDayOfMonth;
var _index = require("./endOfDay.cjs");
var _index2 = require("./endOfMonth.cjs");
var _index3 = require("./toDate.cjs");

/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth(date, options) {
  const _date = (0, _index3.toDate)(date, options?.in);
  return (
    +(0, _index.endOfDay)(_date, options) ===
    +(0, _index2.endOfMonth)(_date, options)
  );
}

--- FILE: ./node_modules/date-fns/isLastDayOfMonth.d.ts ---
import type { ContextOptions, DateArg } from "./types.js";
export interface IsLastDayOfMonthOptions extends ContextOptions<Date> {}
/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
export declare function isLastDayOfMonth(
  date: DateArg<Date> & {},
  options?: IsLastDayOfMonthOptions | undefined,
): boolean;

--- FILE: ./node_modules/date-fns/isLastDayOfMonth.js ---
import { endOfDay } from "./endOfDay.js";
import { endOfMonth } from "./endOfMonth.js";
import { toDate } from "./toDate.js";

/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
export function isLastDayOfMonth(date, options) {
  const _date = toDate(date, options?.in);
  return +endOfDay(_date, options) === +endOfMonth(_date, options);
}

// Fallback for modularized imports:
export default isLastDayOfMonth;

--- FILE: ./node_modules/date-fns/isLeapYear.cjs ---
